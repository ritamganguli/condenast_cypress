// index.ts
import "source-map-support/register.js";

// lib/require.ts
import { createRequire } from "module";
var require2 = createRequire(import.meta.url);

// lib/stdout.ts
import cp from "child_process";
var orginal = cp.spawn;
cp.spawn = function(command, args, options) {
  if (command.match(/Cypress/)) {
    const process2 = orginal(command, args, {
      ...options,
      // using pipe enables capturing stdout and stderr
      stdio: ["pipe", "pipe", "pipe"]
    });
    return process2;
  }
  return orginal(command, args, options);
};

// lib/capture.ts
import Debug from "debug";
var debug = Debug("currents:capture");
var _write = process.stdout.write;
var _log = process.log;
var restore = function() {
  process.stdout.write = _write;
  process.log = _log;
};
var stdout = function() {
  debug("capturing stdout");
  let logs = [];
  const { write } = process.stdout;
  const { log: log2 } = process;
  if (log2) {
    process.log = function(str) {
      logs.push(str);
      return log2.apply(this, arguments);
    };
  }
  process.stdout.write = function(str) {
    logs.push(str);
    return write.apply(this, arguments);
  };
  return {
    toString() {
      return logs.join("");
    },
    data: logs,
    restore,
    reset: () => {
      debug("resetting captured stdout");
      logs = [];
    }
  };
};
var initialOutput = "";
var capturedOutput = null;
var initCapture = () => capturedOutput = stdout();
var cutInitialOutput = () => {
  if (!capturedOutput)
    throw new Error("capturedOutput is null");
  initialOutput = capturedOutput.toString();
  capturedOutput.reset();
};
var resetCapture = () => {
  if (!capturedOutput)
    throw new Error("capturedOutput is null");
  capturedOutput.reset();
};
var getCapturedOutput = () => {
  if (!capturedOutput)
    throw new Error("capturedOutput is null");
  return capturedOutput.toString();
};
var getInitialOutput = () => initialOutput;

// lib/httpClient/config.ts
import { isAxiosError } from "axios";
var isRetriableError = (err) => {
  if (!isAxiosError(err)) {
    return false;
  }
  if (err.code === "ECONNREFUSED") {
    return true;
  }
  return !!(err?.response?.status && 500 <= err.response.status && err.response.status < 600);
};
var getDelay = (i) => [15 * 1e3, 30 * 1e3, 60 * 1e3][i - 1];
var baseURL = "https://cy.currents.dev";
var getAPIBaseUrl = () => baseURL ?? "https://cy.currents.dev";
var setAPIBaseUrl = (url) => baseURL = url ?? "https://cy.currents.dev";

// lib/httpClient/httpClient.ts
import axios from "axios";
import axiosRetry from "axios-retry";
import Debug2 from "debug";
import _2 from "lodash";
import prettyMilliseconds from "pretty-ms";

// lib/errors.ts
var ValidationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "";
  }
};

// lib/log.ts
import chalk from "chalk";
import util from "util";
var log = (...args) => console.log(util.format(...args));
var info = log;
var withError = (msg) => chalk.bgRed.white(" ERROR ") + " " + msg;
var withWarning = (msg) => chalk.bgYellow.black(" WARNING ") + " " + msg;
var warn = (...args) => log(withWarning(util.format(...args)));
var error = (...args) => log(withError(util.format(...args)) + "\n");
var title = (color, ...args) => info("\n  " + chalk[color].bold(util.format(...args)) + "  \n");
var divider = () => console.log("\n" + chalk.gray(Array(100).fill("=").join("")) + "\n");
var spacer = (n = 0) => console.log(Array(n).fill("").join("\n"));
var cyan = chalk.cyan;
var blue = chalk.blueBright;
var red = chalk.red;
var green = chalk.greenBright;
var gray = chalk.gray;
var white = chalk.white;
var magenta = chalk.magenta;
var bold = chalk.bold;

// lib/httpClient/printErrors.ts
import _ from "lodash";
function maybePrintErrors(err) {
  if (!err.response?.data || !err.response?.status) {
    return;
  }
  const { message, errors } = err.response.data;
  switch (err.response.status) {
    case 401:
      warn("Received 401 Unauthorized");
      break;
    case 422:
      spacer(1);
      warn(...formatGenericError(message, errors));
      spacer(1);
      break;
    default:
      break;
  }
}
function formatGenericError(message, errors) {
  if (!_.isString(message)) {
    return ["Unexpected error from the cloud service"];
  }
  if (errors?.length === 0) {
    return [message];
  }
  return [
    message,
    `
${(errors ?? []).map((e) => `  - ${e}`).join("\n")}
`
  ];
}

// lib/httpClient/httpClient.ts
var debug2 = Debug2("currents:api");
var MAX_RETRIES = 3;
var _client = null;
function getClient() {
  if (_client) {
    return _client;
  }
  _client = axios.create({
    baseURL: getAPIBaseUrl()
  });
  _client.interceptors.request.use((config) => {
    const headers = {
      ...config.headers,
      // @ts-ignore
      "x-cypress-request-attempt": config["axios-retry"]?.retryCount ?? 0,
      "x-cypress-version": _cypressVersion ?? "0.0.0",
      "x-ccy-version": _currentsVersion ?? "0.0.0"
    };
    if (_runId) {
      headers["x-cypress-run-id"] = _runId;
    }
    if (!headers["Content-Type"]) {
      headers["Content-Type"] = "application/json";
    }
    const req = {
      ...config,
      headers
    };
    debug2("network request: %o", {
      ..._2.pick(req, "method", "url", "headers"),
      data: Buffer.isBuffer(req.data) ? "buffer" : req.data
    });
    return req;
  });
  axiosRetry(_client, {
    retries: MAX_RETRIES,
    retryCondition: isRetriableError,
    retryDelay: getDelay,
    // @ts-ignore
    onRetry
  });
  return _client;
}
var _runId = void 0;
var setRunId = (runId) => {
  _runId = runId;
};
var _cypressVersion = void 0;
var setCypressVersion = (cypressVersion) => {
  _cypressVersion = cypressVersion;
};
var _currentsVersion = void 0;
var setCurrentsVersion = (v) => {
  _currentsVersion = v;
};
function onRetry(retryCount, err, _config2) {
  warn(
    "Network request failed: '%s'. Next attempt is in %s (%d/%d).",
    err.message,
    prettyMilliseconds(getDelay(retryCount)),
    retryCount,
    MAX_RETRIES
  );
}
var makeRequest = (config) => {
  return getClient()(config).then((res) => {
    debug2("network response: %o", _2.omit(res, "request", "config"));
    return res;
  }).catch((error2) => {
    maybePrintErrors(error2);
    throw new ValidationError(error2.message);
  });
};

// lib/init.ts
var cypressPkg = require2("cypress/package.json");
var pkg = require2("cypress-cloud/package.json");
initCapture();
setCypressVersion(cypressPkg.version);
setCurrentsVersion(pkg.version);

// lib/run.ts
import Debug16 from "debug";

// lib/api/warnings.ts
import _3 from "lodash";
function printWarnings(warnings) {
  warn("Notice from cloud service:");
  warnings.map((w) => {
    spacer(1);
    info(magenta.bold(w.message));
    Object.entries(_3.omit(w, "message")).map(([key, value]) => {
      info("- %s: %s", key, value);
    });
    spacer(1);
  });
}

// lib/api/api.ts
var createRun = async (payload) => {
  const response = await makeRequest({
    method: "POST",
    url: "/runs",
    data: payload
  });
  if ((response.data.warnings?.length ?? 0) > 0) {
    printWarnings(response.data.warnings);
  }
  return response.data;
};
var createInstance = async ({
  runId,
  groupId,
  machineId,
  platform: platform2
}) => {
  const response = await makeRequest({
    method: "POST",
    url: `runs/${runId}/instances`,
    data: {
      runId,
      groupId,
      machineId,
      platform: platform2
    }
  });
  return response.data;
};
var createBatchedInstances = async (data) => {
  const respone = await makeRequest({
    method: "POST",
    url: `runs/${data.runId}/cy/instances`,
    data
  });
  return respone.data;
};
var setInstanceTests = (instanceId, payload) => makeRequest({
  method: "POST",
  url: `instances/${instanceId}/tests`,
  data: payload
}).then((result) => result.data);
var updateInstanceResults = (instanceId, payload) => makeRequest({
  method: "POST",
  url: `instances/${instanceId}/results`,
  data: payload
}).then((result) => result.data);
var reportInstanceResultsMerged = (instanceId, payload) => makeRequest({
  method: "POST",
  url: `instances/${instanceId}/cy/results`,
  data: payload
}).then((result) => result.data);
var updateInstanceStdout = (instanceId, stdout2) => makeRequest({
  method: "PUT",
  url: `instances/${instanceId}/stdout`,
  data: {
    stdout: stdout2
  }
});

// lib/ciProvider.ts
import debugFn from "debug";
import _4 from "lodash";
var debug3 = debugFn("currents:ci");
var join = (char, ...pieces) => {
  return _4.chain(pieces).compact().join(char).value();
};
var toCamelObject = (obj, key) => {
  return _4.set(obj, _4.camelCase(key), process.env[key]);
};
var extract = (envKeys) => {
  return _4.transform(envKeys, toCamelObject, {});
};
var isTeamFoundation = () => {
  return process.env.TF_BUILD && process.env.TF_BUILD_BUILDNUMBER;
};
var isAzureCi = () => {
  return process.env.TF_BUILD && process.env.AZURE_HTTP_USER_AGENT;
};
var isAWSCodeBuild = () => {
  return _4.some(process.env, (val, key) => {
    return /^CODEBUILD_/.test(key);
  });
};
var isBamboo = () => {
  return process.env.bamboo_buildNumber;
};
var isCodeshipBasic = () => {
  return process.env.CI_NAME && process.env.CI_NAME === "codeship" && process.env.CODESHIP;
};
var isCodeshipPro = () => {
  return process.env.CI_NAME && process.env.CI_NAME === "codeship" && !process.env.CODESHIP;
};
var isConcourse = () => {
  return _4.some(process.env, (val, key) => {
    return /^CONCOURSE_/.test(key);
  });
};
var isGitlab = () => {
  return process.env.GITLAB_CI || process.env.CI_SERVER_NAME && /^GitLab/.test(process.env.CI_SERVER_NAME);
};
var isGoogleCloud = () => {
  return process.env.GCP_PROJECT || process.env.GCLOUD_PROJECT || process.env.GOOGLE_CLOUD_PROJECT;
};
var isJenkins = () => {
  return process.env.JENKINS_URL || process.env.JENKINS_HOME || process.env.JENKINS_VERSION || process.env.HUDSON_URL || process.env.HUDSON_HOME;
};
var isWercker = () => {
  return process.env.WERCKER || process.env.WERCKER_MAIN_PIPELINE_STARTED;
};
var CI_PROVIDERS = {
  appveyor: "APPVEYOR",
  azure: isAzureCi,
  awsCodeBuild: isAWSCodeBuild,
  bamboo: isBamboo,
  bitbucket: "BITBUCKET_BUILD_NUMBER",
  buildkite: "BUILDKITE",
  circle: "CIRCLECI",
  codeshipBasic: isCodeshipBasic,
  codeshipPro: isCodeshipPro,
  concourse: isConcourse,
  codeFresh: "CF_BUILD_ID",
  drone: "DRONE",
  githubActions: "GITHUB_ACTIONS",
  gitlab: isGitlab,
  goCD: "GO_JOB_NAME",
  googleCloud: isGoogleCloud,
  jenkins: isJenkins,
  semaphore: "SEMAPHORE",
  shippable: "SHIPPABLE",
  teamcity: "TEAMCITY_VERSION",
  teamfoundation: isTeamFoundation,
  travis: "TRAVIS",
  wercker: isWercker,
  netlify: "NETLIFY",
  layerci: "LAYERCI"
};
function _detectProviderName() {
  const { env } = process;
  return _4.findKey(CI_PROVIDERS, (value) => {
    if (_4.isString(value)) {
      return env[value];
    }
    if (_4.isFunction(value)) {
      return value();
    }
  });
}
var _providerCiParams = () => {
  return {
    appveyor: extract([
      "APPVEYOR_JOB_ID",
      "APPVEYOR_ACCOUNT_NAME",
      "APPVEYOR_PROJECT_SLUG",
      "APPVEYOR_BUILD_NUMBER",
      "APPVEYOR_BUILD_VERSION",
      "APPVEYOR_PULL_REQUEST_NUMBER",
      "APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH"
    ]),
    azure: extract([
      "BUILD_BUILDID",
      "BUILD_BUILDNUMBER",
      "BUILD_CONTAINERID",
      "BUILD_REPOSITORY_URI"
    ]),
    awsCodeBuild: extract([
      "CODEBUILD_BUILD_ID",
      "CODEBUILD_BUILD_NUMBER",
      "CODEBUILD_RESOLVED_SOURCE_VERSION",
      "CODEBUILD_SOURCE_REPO_URL",
      "CODEBUILD_SOURCE_VERSION"
    ]),
    bamboo: extract([
      "bamboo_buildNumber",
      "bamboo_buildResultsUrl",
      "bamboo_planRepository_repositoryUrl",
      "bamboo_buildKey"
    ]),
    bitbucket: extract([
      "BITBUCKET_REPO_SLUG",
      "BITBUCKET_REPO_OWNER",
      "BITBUCKET_BUILD_NUMBER",
      "BITBUCKET_PARALLEL_STEP",
      "BITBUCKET_STEP_RUN_NUMBER",
      // the PR variables are only set on pull request builds
      "BITBUCKET_PR_ID",
      "BITBUCKET_PR_DESTINATION_BRANCH",
      "BITBUCKET_PR_DESTINATION_COMMIT"
    ]),
    buildkite: extract([
      "BUILDKITE_REPO",
      "BUILDKITE_SOURCE",
      "BUILDKITE_JOB_ID",
      "BUILDKITE_BUILD_ID",
      "BUILDKITE_BUILD_URL",
      "BUILDKITE_BUILD_NUMBER",
      "BUILDKITE_PULL_REQUEST",
      "BUILDKITE_PULL_REQUEST_REPO",
      "BUILDKITE_PULL_REQUEST_BASE_BRANCH"
    ]),
    circle: extract([
      "CIRCLE_JOB",
      "CIRCLE_BUILD_NUM",
      "CIRCLE_BUILD_URL",
      "CIRCLE_PR_NUMBER",
      "CIRCLE_PR_REPONAME",
      "CIRCLE_PR_USERNAME",
      "CIRCLE_COMPARE_URL",
      "CIRCLE_WORKFLOW_ID",
      "CIRCLE_PULL_REQUEST",
      "CIRCLE_REPOSITORY_URL",
      "CI_PULL_REQUEST"
    ]),
    codeshipBasic: extract([
      "CI_BUILD_ID",
      "CI_REPO_NAME",
      "CI_BUILD_URL",
      "CI_PROJECT_ID",
      "CI_BUILD_NUMBER",
      "CI_PULL_REQUEST"
    ]),
    // CodeshipPro provides very few CI variables
    // https://documentation.codeship.com/pro/builds-and-configuration/environment-variables/
    codeshipPro: extract(["CI_BUILD_ID", "CI_REPO_NAME", "CI_PROJECT_ID"]),
    // https://concourse-ci.org/implementing-resource-types.html#resource-metadata
    concourse: extract([
      "BUILD_ID",
      "BUILD_NAME",
      "BUILD_JOB_NAME",
      "BUILD_PIPELINE_NAME",
      "BUILD_TEAM_NAME",
      "ATC_EXTERNAL_URL"
    ]),
    // https://codefresh.io/docs/docs/codefresh-yaml/variables/
    codeFresh: extract([
      "CF_BUILD_ID",
      "CF_BUILD_URL",
      "CF_CURRENT_ATTEMPT",
      "CF_STEP_NAME",
      "CF_PIPELINE_NAME",
      "CF_PIPELINE_TRIGGER_ID",
      // variables added for pull requests
      "CF_PULL_REQUEST_ID",
      "CF_PULL_REQUEST_IS_FORK",
      "CF_PULL_REQUEST_NUMBER",
      "CF_PULL_REQUEST_TARGET"
    ]),
    drone: extract([
      "DRONE_JOB_NUMBER",
      "DRONE_BUILD_LINK",
      "DRONE_BUILD_NUMBER",
      "DRONE_PULL_REQUEST"
    ]),
    // https://help.github.com/en/actions/automating-your-workflow-with-github-actions/using-environment-variables#default-environment-variables
    githubActions: extract([
      "GITHUB_WORKFLOW",
      "GITHUB_ACTION",
      "GITHUB_EVENT_NAME",
      "GITHUB_RUN_ID",
      "GITHUB_RUN_ATTEMPT",
      "GITHUB_REPOSITORY"
    ]),
    // see https://docs.gitlab.com/ee/ci/variables/
    gitlab: extract([
      // pipeline is common among all jobs
      "CI_PIPELINE_ID",
      "CI_PIPELINE_URL",
      // individual jobs
      "CI_BUILD_ID",
      // build id and job id are aliases
      "CI_JOB_ID",
      "CI_JOB_URL",
      "CI_JOB_NAME",
      // other information
      "GITLAB_HOST",
      "CI_PROJECT_ID",
      "CI_PROJECT_URL",
      "CI_REPOSITORY_URL",
      "CI_ENVIRONMENT_URL",
      "CI_DEFAULT_BRANCH"
      // for PRs: https://gitlab.com/gitlab-org/gitlab-ce/issues/23902
    ]),
    // https://docs.gocd.org/current/faq/dev_use_current_revision_in_build.html#standard-gocd-environment-variables
    goCD: extract([
      "GO_SERVER_URL",
      "GO_ENVIRONMENT_NAME",
      "GO_PIPELINE_NAME",
      "GO_PIPELINE_COUNTER",
      "GO_PIPELINE_LABEL",
      "GO_STAGE_NAME",
      "GO_STAGE_COUNTER",
      "GO_JOB_NAME",
      "GO_TRIGGER_USER",
      "GO_REVISION",
      "GO_TO_REVISION",
      "GO_FROM_REVISION",
      "GO_MATERIAL_HAS_CHANGED"
    ]),
    googleCloud: extract([
      // individual jobs
      "BUILD_ID",
      "PROJECT_ID",
      // other information
      "REPO_NAME",
      "BRANCH_NAME",
      "TAG_NAME",
      "COMMIT_SHA",
      "SHORT_SHA"
      // https://cloud.google.com/cloud-build/docs/api/reference/rest/Shared.Types/Build
    ]),
    jenkins: extract(["BUILD_ID", "BUILD_URL", "BUILD_NUMBER", "ghprbPullId"]),
    // https://semaphoreci.com/docs/available-environment-variables.html
    // some come from v1, some from v2 of semaphore
    semaphore: extract([
      "SEMAPHORE_BRANCH_ID",
      "SEMAPHORE_BUILD_NUMBER",
      "SEMAPHORE_CURRENT_JOB",
      "SEMAPHORE_CURRENT_THREAD",
      "SEMAPHORE_EXECUTABLE_UUID",
      "SEMAPHORE_GIT_BRANCH",
      "SEMAPHORE_GIT_DIR",
      "SEMAPHORE_GIT_REF",
      "SEMAPHORE_GIT_REF_TYPE",
      "SEMAPHORE_GIT_REPO_SLUG",
      "SEMAPHORE_GIT_SHA",
      "SEMAPHORE_GIT_URL",
      "SEMAPHORE_JOB_COUNT",
      "SEMAPHORE_JOB_ID",
      // v2
      "SEMAPHORE_JOB_NAME",
      "SEMAPHORE_JOB_UUID",
      // v1
      "SEMAPHORE_PIPELINE_ID",
      "SEMAPHORE_PLATFORM",
      "SEMAPHORE_PROJECT_DIR",
      "SEMAPHORE_PROJECT_HASH_ID",
      "SEMAPHORE_PROJECT_ID",
      // v2
      "SEMAPHORE_PROJECT_NAME",
      "SEMAPHORE_PROJECT_UUID",
      // v1
      "SEMAPHORE_REPO_SLUG",
      "SEMAPHORE_TRIGGER_SOURCE",
      "SEMAPHORE_WORKFLOW_ID",
      "PULL_REQUEST_NUMBER"
      // pull requests from forks ONLY
    ]),
    // see http://docs.shippable.com/ci/env-vars/
    shippable: extract([
      // build variables
      "SHIPPABLE_BUILD_ID",
      // "5b93354cabfabb07007f01fd"
      "SHIPPABLE_BUILD_NUMBER",
      // "4"
      "SHIPPABLE_COMMIT_RANGE",
      // "sha1...sha2"
      "SHIPPABLE_CONTAINER_NAME",
      // "c.exec.cypress-example-kitchensink.4.1"
      "SHIPPABLE_JOB_ID",
      // "1"
      "SHIPPABLE_JOB_NUMBER",
      // "1"
      "SHIPPABLE_REPO_SLUG",
      // "<username>/<repo>"
      // additional information that Shippable provides
      "IS_FORK",
      // "true"
      "IS_GIT_TAG",
      // "false"
      "IS_PRERELEASE",
      // "false"
      "IS_RELEASE",
      // "false"
      "REPOSITORY_URL",
      // "https://github.com/....git"
      "REPO_FULL_NAME",
      // "<username>/<repo>"
      "REPO_NAME",
      // "cypress-example-kitchensink"
      "BUILD_URL",
      // "https://app.shippable.com/github/<username>/<repo>/runs/1"
      // Pull request information
      "BASE_BRANCH",
      // Name of the target branch into which the pull request changes will be merged.
      "HEAD_BRANCH",
      // This is only set for pull requests and is the name of the branch the pull request was opened from.
      "IS_PULL_REQUEST",
      // "false" or "true"
      "PULL_REQUEST",
      // Pull request number if the job is a pull request. If not, this will be set to false.
      "PULL_REQUEST_BASE_BRANCH",
      // Name of the branch that the pull request will be merged into. It should be the same as BASE_BRANCH.
      "PULL_REQUEST_REPO_FULL_NAME"
      // Full name of the repository from where the pull request originated.
    ]),
    teamcity: null,
    teamfoundation: extract([
      "BUILD_BUILDID",
      "BUILD_BUILDNUMBER",
      "BUILD_CONTAINERID"
    ]),
    travis: extract([
      "TRAVIS_JOB_ID",
      "TRAVIS_BUILD_ID",
      "TRAVIS_BUILD_WEB_URL",
      "TRAVIS_REPO_SLUG",
      "TRAVIS_JOB_NUMBER",
      "TRAVIS_EVENT_TYPE",
      "TRAVIS_COMMIT_RANGE",
      "TRAVIS_BUILD_NUMBER",
      "TRAVIS_PULL_REQUEST",
      "TRAVIS_PULL_REQUEST_BRANCH",
      "TRAVIS_PULL_REQUEST_SHA"
    ]),
    wercker: null,
    // https://docs.netlify.com/configure-builds/environment-variables/#deploy-urls-and-metadata
    netlify: extract([
      "BUILD_ID",
      "CONTEXT",
      "URL",
      "DEPLOY_URL",
      "DEPLOY_PRIME_URL",
      "DEPLOY_ID"
    ]),
    // https://layerci.com/docs/layerfile-reference/build-env
    layerci: extract([
      "LAYERCI_JOB_ID",
      "LAYERCI_RUNNER_ID",
      "RETRY_INDEX",
      "LAYERCI_PULL_REQUEST",
      "LAYERCI_REPO_NAME",
      "LAYERCI_REPO_OWNER",
      "LAYERCI_BRANCH",
      "GIT_TAG"
      // short hex for commits
    ])
  };
};
var _providerCommitParams = () => {
  const { env } = process;
  return {
    appveyor: {
      sha: env.APPVEYOR_REPO_COMMIT,
      // since APPVEYOR_REPO_BRANCH will be the target branch on a PR
      // we need to use PULL_REQUEST_HEAD_REPO_BRANCH if it exists.
      // e.g. if you have a PR: develop <- my-feature-branch
      // my-feature-branch is APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
      // develop           is APPVEYOR_REPO_BRANCH
      branch: env.APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH || env.APPVEYOR_REPO_BRANCH,
      message: join(
        "\n",
        env.APPVEYOR_REPO_COMMIT_MESSAGE,
        env.APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
      ),
      authorName: env.APPVEYOR_REPO_COMMIT_AUTHOR,
      authorEmail: env.APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    awsCodeBuild: {
      sha: env.CODEBUILD_RESOLVED_SOURCE_VERSION,
      // branch: ???,
      // message: ???
      // authorName: ???
      // authorEmail: ???
      remoteOrigin: env.CODEBUILD_SOURCE_REPO_URL
      // defaultBranch: ???
    },
    azure: {
      sha: env.BUILD_SOURCEVERSION,
      branch: env.BUILD_SOURCEBRANCHNAME,
      message: env.BUILD_SOURCEVERSIONMESSAGE,
      authorName: env.BUILD_SOURCEVERSIONAUTHOR,
      authorEmail: env.BUILD_REQUESTEDFOREMAIL
    },
    bamboo: {
      sha: env.bamboo_planRepository_revision,
      branch: env.bamboo_planRepository_branch,
      // message: ???
      authorName: env.bamboo_planRepository_username,
      // authorEmail: ???
      remoteOrigin: env.bamboo_planRepository_repositoryURL
      // defaultBranch: ???
    },
    bitbucket: {
      sha: env.BITBUCKET_COMMIT,
      branch: env.BITBUCKET_BRANCH
      // message: ???
      // authorName: ???
      // authorEmail: ???
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    buildkite: {
      sha: env.BUILDKITE_COMMIT,
      branch: env.BUILDKITE_BRANCH,
      message: env.BUILDKITE_MESSAGE,
      authorName: env.BUILDKITE_BUILD_CREATOR,
      authorEmail: env.BUILDKITE_BUILD_CREATOR_EMAIL,
      remoteOrigin: env.BUILDKITE_REPO,
      defaultBranch: env.BUILDKITE_PIPELINE_DEFAULT_BRANCH
    },
    circle: {
      sha: env.CIRCLE_SHA1,
      branch: env.CIRCLE_BRANCH,
      // message: ???
      authorName: env.CIRCLE_USERNAME,
      // authorEmail: ???
      remoteOrigin: env.CIRCLE_REPOSITORY_URL
      // defaultBranch: ???
    },
    codeshipBasic: {
      sha: env.CI_COMMIT_ID,
      branch: env.CI_BRANCH,
      message: env.CI_COMMIT_MESSAGE,
      authorName: env.CI_COMMITTER_NAME,
      authorEmail: env.CI_COMMITTER_EMAIL
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    codeshipPro: {
      sha: env.CI_COMMIT_ID,
      branch: env.CI_BRANCH,
      message: env.CI_COMMIT_MESSAGE,
      authorName: env.CI_COMMITTER_NAME,
      authorEmail: env.CI_COMMITTER_EMAIL
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    codeFresh: {
      sha: env.CF_REVISION,
      branch: env.CF_BRANCH,
      message: env.CF_COMMIT_MESSAGE,
      authorName: env.CF_COMMIT_AUTHOR
    },
    drone: {
      sha: env.DRONE_COMMIT_SHA,
      // https://docs.drone.io/pipeline/environment/reference/drone-source-branch/
      branch: env.DRONE_SOURCE_BRANCH,
      message: env.DRONE_COMMIT_MESSAGE,
      authorName: env.DRONE_COMMIT_AUTHOR,
      authorEmail: env.DRONE_COMMIT_AUTHOR_EMAIL,
      remoteOrigin: env.DRONE_GIT_HTTP_URL,
      defaultBranch: env.DRONE_REPO_BRANCH
    },
    githubActions: {
      sha: env.GITHUB_SHA,
      branch: env.GH_BRANCH || env.GITHUB_REF,
      defaultBranch: env.GITHUB_BASE_REF,
      remoteBranch: env.GITHUB_HEAD_REF,
      runAttempt: env.GITHUB_RUN_ATTEMPT
    },
    gitlab: {
      sha: env.CI_COMMIT_SHA,
      branch: env.CI_COMMIT_REF_NAME,
      message: env.CI_COMMIT_MESSAGE,
      authorName: env.GITLAB_USER_NAME,
      authorEmail: env.GITLAB_USER_EMAIL,
      remoteOrigin: env.CI_REPOSITORY_URL,
      defaultBranch: env.CI_DEFAULT_BRANCH
    },
    googleCloud: {
      sha: env.COMMIT_SHA,
      branch: env.BRANCH_NAME
      // message: ??
      // authorName: ??
      // authorEmail: ??
      // remoteOrigin: ???
      // defaultBranch: ??
    },
    jenkins: {
      sha: env.GIT_COMMIT,
      branch: env.GIT_BRANCH
      // message: ???
      // authorName: ???
      // authorEmail: ???
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    // Only from forks? https://semaphoreci.com/docs/available-environment-variables.html
    semaphore: {
      sha: env.SEMAPHORE_GIT_SHA,
      branch: env.SEMAPHORE_GIT_BRANCH,
      // message: ???
      // authorName: ???
      // authorEmail: ???
      remoteOrigin: env.SEMAPHORE_GIT_REPO_SLUG
      // defaultBranch: ???
    },
    shippable: {
      sha: env.COMMIT,
      branch: env.BRANCH,
      message: env.COMMIT_MESSAGE,
      authorName: env.COMMITTER
      // authorEmail: ???
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    snap: null,
    teamcity: null,
    teamfoundation: {
      sha: env.BUILD_SOURCEVERSION,
      branch: env.BUILD_SOURCEBRANCHNAME,
      message: env.BUILD_SOURCEVERSIONMESSAGE,
      authorName: env.BUILD_SOURCEVERSIONAUTHOR
    },
    travis: {
      sha: env.TRAVIS_PULL_REQUEST_SHA || env.TRAVIS_COMMIT,
      // for PRs, TRAVIS_BRANCH is the base branch being merged into
      branch: env.TRAVIS_PULL_REQUEST_BRANCH || env.TRAVIS_BRANCH,
      // authorName: ???
      // authorEmail: ???
      message: env.TRAVIS_COMMIT_MESSAGE
      // remoteOrigin: ???
      // defaultBranch: ???
    },
    wercker: null,
    netlify: {
      sha: env.COMMIT_REF,
      branch: env.BRANCH,
      remoteOrigin: env.REPOSITORY_URL
    },
    layerci: {
      sha: env.GIT_COMMIT,
      branch: env.LAYERCI_BRANCH,
      message: env.GIT_COMMIT_TITLE
    }
  };
};
var _get = (fn) => {
  const providerName = getCiProvider();
  if (!providerName)
    return {};
  return _4.chain(fn()).get(providerName).value();
};
function checkForCiBuildFromCi(ciProvider) {
  if (ciProvider && detectableCiBuildIdProviders().includes(ciProvider))
    return true;
  throw new ValidationError(
    `Could not determine CI build ID from the environment. Please provide a unique CI build ID using the --ci-build-id CLI flag or 'ciBuildId' parameter for 'run' method.`
  );
}
function detectableCiBuildIdProviders() {
  return _4.chain(_providerCiParams()).omitBy(_4.isNull).keys().value();
}
function getCiProvider() {
  return _detectProviderName() || null;
}
function getCiParams() {
  return _get(_providerCiParams);
}
function getCommitParams() {
  return _get(_providerCommitParams);
}
function getCI(ciBuildId) {
  const params = getCiParams();
  const provider = getCiProvider();
  if (!ciBuildId)
    checkForCiBuildFromCi(provider);
  debug3("detected CI provider: %s", provider);
  debug3("detected CI params: %O", params);
  return {
    params,
    provider
  };
}
function getCommitDefaults(existingInfo) {
  debug3("git commit existing info");
  debug3(existingInfo);
  const commitParamsObj = getCommitParams();
  debug3("commit info from provider environment variables: %O", commitParamsObj);
  const combined = _4.transform(
    existingInfo,
    (memo, value, key) => {
      return memo[key] = _4.defaultTo(value || commitParamsObj[key], null);
    }
  );
  debug3("combined git and environment variables from provider");
  debug3(combined);
  return combined;
}

// lib/config/config.ts
import Debug5 from "debug";
import path2 from "path";

// lib/bootstrap/bootstrap.ts
import { getBinPath } from "cy2";
import Debug4 from "debug";
import execa from "execa";
import fs from "fs";

// lib/fs.ts
import { file } from "tmp-promise";
var createTempFile = async () => {
  const { path: path4 } = await file();
  return path4;
};

// lib/bootstrap/serializer.ts
import Debug3 from "debug";
import _5 from "lodash";
import { customAlphabet } from "nanoid";
var debug4 = Debug3("currents:boot");
var getDummySpec = customAlphabet("abcdefghijklmnopqrstuvwxyz", 10);
function getBootstrapArgs({
  params,
  port,
  tempFilePath
}) {
  return _5.chain(getCypressCLIParams(params)).thru((opts) => ({
    ...opts,
    // merge the env with the currents specific env variables
    env: {
      ...opts.env ?? {},
      currents_temp_file: tempFilePath,
      currents_port: port,
      currents_debug_enabled: process.env.DEBUG?.includes("currents:") ? true : false
    }
  })).tap((opts) => {
    debug4("cypress bootstrap params: %o", opts);
  }).thru(serializeOptions).tap((opts) => {
    debug4("cypress bootstrap serialized params: %o", opts);
  }).thru((args) => {
    return [
      ...args,
      "--spec",
      getDummySpec(),
      params.testingType === "component" ? "--component" : "--e2e"
    ];
  }).value();
}
function getCypressCLIParams(params) {
  const result = getCypressRunAPIParams(params);
  const testingType = result.testingType === "component" ? {
    component: true
  } : {};
  return {
    ..._5.omit(result, "testingType"),
    ...testingType
  };
}
function serializeOptions(options) {
  return Object.entries(options).flatMap(([key, value]) => {
    const _key = dashed(key);
    if (typeof value === "boolean") {
      return value === true ? [`--${_key}`] : [`--${_key}`, false];
    }
    if (_5.isObject(value)) {
      return [`--${_key}`, serializeComplexParam(value)];
    }
    return [`--${_key}`, value.toString()];
  });
}
function serializeComplexParam(param) {
  return JSON.stringify(param);
}
var dashed = (v) => v.replace(/[A-Z]/g, (m) => "-" + m.toLowerCase());

// lib/bootstrap/bootstrap.ts
var debug5 = Debug4("currents:boot");
var bootCypress = async (port, params) => {
  debug5("booting cypress...");
  const tempFilePath = await createTempFile();
  const cypressBin = await getBinPath(require2.resolve("cypress"));
  debug5("cypress executable location: %s", cypressBin);
  const args = getBootstrapArgs({ port, tempFilePath, params });
  debug5("booting cypress with args: %o", args);
  const { stdout: stdout2, stderr } = await execCypress(cypressBin, args);
  if (!fs.existsSync(tempFilePath)) {
    throw new Error(
      `Cannot resolve cypress configuration from ${tempFilePath}. Please report the issue.`
    );
  }
  try {
    const f = fs.readFileSync(tempFilePath, "utf-8");
    if (!f) {
      throw new Error("Is cypress-cloud/plugin installed?");
    }
    debug5("cypress config '%s': '%s'", tempFilePath, f);
    return JSON.parse(f);
  } catch (err) {
    debug5("read config temp file failed: %o", err);
    info(bold("Cypress stdout:\n"), stdout2);
    info(bold("Cypress stderr:\n"), stderr);
    throw new ValidationError(`Unable to resolve cypress configuration
- make sure that 'cypress-cloud/plugin' is installed
- report the issue together with cypress stdout and stderr
`);
  }
};
async function execCypress(cypressBin, args) {
  let stdout2 = "";
  let stderr = "";
  try {
    await execa(cypressBin, ["run", ...args], {
      stdio: "pipe",
      env: {
        ...process.env,
        // prevent warnings about recording mode
        CYPRESS_RECORD_KEY: void 0,
        CYPRESS_PROJECT_ID: void 0
      }
    });
  } catch (err) {
    debug5("exec cypress failed (certain failures are expected): %o", err);
    stdout2 = err.stdout;
    stderr = err.stderr;
  }
  return { stdout: stdout2, stderr };
}

// lib/utils.ts
import path from "path";
function toArray(val) {
  return val ? typeof val === "string" ? [val] : val : [];
}
function toPosix(file2, sep = path.sep) {
  return file2.split(sep).join(path.posix.sep);
}
var getRandomPort = () => {
  const min = 1024;
  const max = 65535;
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// lib/config/config.ts
var debug6 = Debug5("currents:config");
var _config = null;
function getCurrentsConfig(projectRoot) {
  if (_config) {
    return _config;
  }
  const defaultConfig = {
    e2e: {
      batchSize: 3
    },
    component: {
      batchSize: 5
    },
    cloudServiceUrl: "https://cy.currents.dev"
  };
  const configFilePath = getConfigFilePath(projectRoot);
  try {
    const resolvedPath = path2.resolve(...configFilePath);
    debug6("loading currents config file from '%s'", resolvedPath);
    const fsConfig = require2(resolvedPath);
    _config = {
      ...defaultConfig,
      ...fsConfig
    };
    return _config;
  } catch (e) {
    warn("failed to load config file: %s", configFilePath);
    debug6("failure details: %s", e);
    _config = defaultConfig;
    return _config;
  }
}
async function getMergedConfig(params) {
  debug6("resolving cypress config");
  const cypressResolvedConfig = await bootCypress(getRandomPort(), params);
  debug6("cypress resolvedConfig: %O", cypressResolvedConfig);
  const rawE2EPattern = cypressResolvedConfig.rawJson?.e2e?.specPattern;
  let additionalIgnorePattern = [];
  if (params.testingType === "component" && rawE2EPattern) {
    additionalIgnorePattern = rawE2EPattern;
  }
  const result = {
    projectRoot: cypressResolvedConfig?.projectRoot || process.cwd(),
    projectId: params.projectId,
    specPattern: cypressResolvedConfig?.specPattern || "**/*.*",
    excludeSpecPattern: (
      // @ts-ignore
      cypressResolvedConfig?.resolved.excludeSpecPattern.value ?? []
    ),
    additionalIgnorePattern,
    resolved: cypressResolvedConfig
  };
  debug6("merged config: %O", result);
  return result;
}
function getConfigFilePath(projectRoot = null) {
  return [projectRoot ?? process.cwd(), "currents.config.js"];
}

// lib/config/params.ts
import Debug6 from "debug";
import _6 from "lodash";
var debug7 = Debug6("currents:validateParams");
function resolveCurrentsParams(params) {
  const configFromFile = getCurrentsConfig(params.project);
  const cloudServiceUrl = params.cloudServiceUrl ?? process.env.CURRENTS_API_URL ?? configFromFile.cloudServiceUrl;
  const recordKey = params.recordKey ?? process.env.CURRENTS_RECORD_KEY ?? configFromFile.recordKey;
  const projectId = params.projectId ?? process.env.CURRENTS_PROJECT_ID ?? configFromFile.projectId;
  const testingType = params.testingType ?? "e2e";
  const batchSize = testingType === "e2e" ? configFromFile.e2e.batchSize : configFromFile.component.batchSize;
  return {
    ...params,
    cloudServiceUrl,
    recordKey,
    projectId,
    batchSize,
    testingType
  };
}
var projectIdError = `Cannot resolve projectId. Please use one of the following:
- provide it as a "projectId" property for "run" API method
- set CURRENTS_PROJECT_ID environment variable
- set "projectId" in "currents.config.js" file`;
var cloudServiceUrlError = `Cannot resolve cloud service URL. Please use one of the following:
- provide it as a "cloudServiceUrl" property for "run" API method
- set CURRENTS_API_URL environment variable
- set "cloudServiceUrl" in "currents.config.js" file`;
var cloudServiceInvalidUrlError = `Invalid cloud service URL provided`;
var recordKeyError = `Cannot resolve record key. Please use one of the following:

- pass it as a CLI flag '-k, --key <record-key>'
- provide it as a "recordKey" property for "run" API method
- set CURRENTS_RECORD_KEY environment variable
- set "recordKey" in "currents.config.js" file
`;
function validateParams(_params) {
  const params = resolveCurrentsParams(_params);
  if (!params.cloudServiceUrl) {
    throw new ValidationError(cloudServiceUrlError);
  }
  if (!params.projectId) {
    throw new ValidationError(projectIdError);
  }
  if (!params.recordKey) {
    throw new ValidationError(recordKeyError);
  }
  validateURL(params.cloudServiceUrl);
  const requiredParameters = [
    "testingType",
    "batchSize",
    "projectId"
  ];
  requiredParameters.forEach((key) => {
    if (typeof params[key] === "undefined") {
      error('Missing required parameter "%s"', key);
      throw new Error("Missing required parameter");
    }
  });
  params.tag = parseTags(params.tag);
  params.autoCancelAfterFailures = getAutoCancelValue(
    params.autoCancelAfterFailures
  );
  debug7("validated currents params: %o", params);
  return params;
}
function getAutoCancelValue(value) {
  if (typeof value === "undefined") {
    return void 0;
  }
  if (typeof value === "boolean") {
    return value ? 1 : false;
  }
  if (typeof value === "number" && value > 0) {
    return value;
  }
  throw new ValidationError(
    `autoCancelAfterFailures: should be a positive integer or "false". Got: "${value}"`
  );
}
function isOffline(params) {
  return params.record === false;
}
function parseTags(tagString) {
  if (!tagString) {
    return [];
  }
  if (Array.isArray(tagString)) {
    return tagString.filter(Boolean);
  }
  return tagString.split(",").map((tag) => tag.trim()).filter(Boolean);
}
function validateURL(url) {
  try {
    new URL(url);
  } catch (err) {
    throw new ValidationError(`${cloudServiceInvalidUrlError}: "${url}"`);
  }
}
function getCypressRunAPIParams(params) {
  return {
    ..._6.pickBy(
      _6.omit(params, [
        "autoCancelAfterFailures",
        "cloudServiceUrl",
        "batchSize",
        "projectId",
        "key",
        "recordKey",
        "record",
        "group",
        "parallel",
        "tag",
        "ciBuildId",
        "spec",
        "exit",
        "headed",
        "headless"
      ]),
      Boolean
    ),
    record: false
  };
}
function preprocessParams(params) {
  return {
    ...params,
    spec: processSpecParam(params.spec)
  };
}
function processSpecParam(spec) {
  if (!spec) {
    return void 0;
  }
  if (Array.isArray(spec)) {
    return _6.flatten(spec.map((i) => i.split(",")));
  }
  return spec.split(",");
}

// lib/cypress/cypress.ts
import cypress from "cypress";
import Debug7 from "debug";
import _7 from "lodash";
var debug8 = Debug7("currents:cypress");
function runBareCypress(params = {}) {
  const p = {
    ...params,
    ciBuildId: void 0,
    tag: void 0,
    parallel: void 0,
    record: false,
    group: void 0,
    spec: _7.flatten(params.spec).join(",")
  };
  debug8("Running bare Cypress with params %o", p);
  return cypress.run(p);
}
async function runSpecFile({ spec }, cypressRunOptions) {
  const runAPIOptions = getCypressRunAPIParams(cypressRunOptions);
  const options = {
    ...runAPIOptions,
    config: {
      ...runAPIOptions.config,
      trashAssetsBeforeRuns: false
    },
    env: {
      ...runAPIOptions.env,
      currents_ws: true
    },
    spec
  };
  debug8("running cypress with options %o", options);
  const result = await cypress.run(options);
  debug8("cypress run result %o", result);
  return result;
}
var runSpecFileSafe = async ({ spec }, cypressRunOptions) => {
  try {
    return await runSpecFile({ spec }, cypressRunOptions);
  } catch (error2) {
    debug8("cypress run exception %o", error2);
    return {
      status: "failed",
      failures: 1,
      message: `Cypress process crashed with an error:
${error2.message}
${error2.stack}}`
    };
  }
};

// lib/git.ts
import git from "@cypress/commit-info";
var getGitInfo = async (projectRoot) => {
  const commitInfo = await git.commitInfo(projectRoot);
  return getCommitDefaults({
    branch: commitInfo.branch,
    remoteOrigin: commitInfo.remote,
    authorEmail: commitInfo.email,
    authorName: commitInfo.author,
    message: commitInfo.message,
    sha: commitInfo.sha
  });
};

// lib/platform/browser.ts
import Debug8 from "debug";
var debug9 = Debug8("currents:browser");
function guessBrowser(browser, availableBrowsers = []) {
  debug9(
    "guessing browser from '%s', available browsers: %o",
    browser,
    availableBrowsers
  );
  let result = availableBrowsers.find((b) => b.name === browser);
  if (result) {
    debug9("identified browser by name: %o", result);
    return {
      browserName: result.displayName,
      browserVersion: result.version
    };
  }
  result = availableBrowsers.find((b) => b.path === browser);
  if (result) {
    debug9("identified browser by path: %o", result);
    return {
      browserName: result.displayName ?? result.name,
      browserVersion: result.version
    };
  }
  warn("Unable to identify browser name and version");
  return {
    browserName: "unknown",
    browserVersion: "unknown"
  };
}

// lib/platform/platform.ts
import Debug9 from "debug";
import getos from "getos";
import { cpus, freemem, platform, release, totalmem } from "os";
import { promisify } from "util";
var debug10 = Debug9("currents:platform");
var getOsVersion = async () => {
  if (platform() === "linux") {
    try {
      const linuxOs = await promisify(getos)();
      if ("dist" in linuxOs && "release" in linuxOs) {
        return [linuxOs.dist, linuxOs.release].join(" - ");
      } else {
        return release();
      }
    } catch {
      return release();
    }
  }
  return release();
};
var getPlatformInfo = async () => {
  const osVersion = await getOsVersion();
  const result = {
    osName: platform(),
    osVersion,
    osCpus: cpus(),
    osMemory: {
      free: freemem(),
      total: totalmem()
    }
  };
  debug10("platform info: %o", result);
  return result;
};

// lib/platform/index.ts
async function getPlatform({
  browser,
  config
}) {
  return {
    ...await getPlatformInfo(),
    ...guessBrowser(browser ?? "electron", config.resolved?.browsers)
  };
}

// lib/results/results.ts
import Debug10 from "debug";
import _8 from "lodash";
import { nanoid } from "nanoid";
var debug11 = Debug10("currents:results");
var isSuccessResult = (result) => {
  return result.status === "finished";
};
var getScreenshotsSummary = (tests = []) => {
  return tests.flatMap(
    (test, i) => test.attempts.flatMap(
      (a, ai) => a.screenshots.flatMap((s) => ({
        ...s,
        testId: `r${i}`,
        testAttemptIndex: ai,
        screenshotId: nanoid()
      }))
    )
  );
};
var getStats = (stats) => {
  return {
    ...stats,
    wallClockDuration: stats.duration,
    wallClockStartedAt: stats.startedAt,
    wallClockEndedAt: stats.endedAt
  };
};
var getTestAttempt = (attempt) => {
  return {
    ...attempt,
    state: attempt.state,
    wallClockDuration: attempt.duration,
    wallClockStartedAt: attempt.startedAt
  };
};
var getInstanceResultPayload = (runResult) => {
  const altTests = [];
  if (runResult.error && !runResult.tests?.length) {
    altTests.push(getFakeTestFromException(runResult.error, runResult.stats));
  }
  return {
    stats: getStats(runResult.stats),
    reporterStats: runResult.reporterStats,
    exception: runResult.error ?? null,
    video: !!runResult.video,
    // Did the instance generate a video?
    screenshots: getScreenshotsSummary(runResult.tests ?? []),
    tests: runResult.tests?.map((test, i) => ({
      displayError: test.displayError,
      state: test.state,
      hooks: runResult.hooks,
      attempts: test.attempts?.map(getTestAttempt) ?? [],
      clientId: `r${i}`
    })) ?? altTests
  };
};
function getFakeTestFromException(error2, stats) {
  return {
    title: ["Unknown"],
    body: "",
    displayError: error2.split("\n")[0],
    state: "failed",
    hooks: [],
    attempts: [
      getTestAttempt({
        state: "failed",
        duration: 0,
        error: {
          name: "Error",
          message: error2.split("\n")[0],
          stack: error2
        },
        screenshots: [],
        startedAt: stats.startedAt,
        videoTimestamp: 0
      })
    ],
    clientId: "r0"
  };
}
var getInstanceTestsPayload = (runResult, config) => {
  const altTests = [];
  if (runResult.error && !runResult.tests?.length) {
    altTests.push(getFakeTestFromException(runResult.error, runResult.stats));
  }
  return {
    config,
    tests: runResult.tests?.map((test, i) => ({
      title: test.title,
      config: null,
      body: test.body,
      clientId: `r${i}`,
      hookIds: []
    })) ?? altTests,
    hooks: runResult.hooks
  };
};
var summarizeTestResults = (input, config) => {
  if (!input.length) {
    return getEmptyCypressResults(config);
  }
  const overall = input.reduce(
    (acc, {
      totalDuration,
      totalFailed,
      totalPassed,
      totalPending,
      totalSkipped,
      totalTests,
      totalSuites
    }) => ({
      totalDuration: acc.totalDuration + totalDuration,
      totalSuites: acc.totalSuites + totalSuites,
      totalPending: acc.totalPending + totalPending,
      totalFailed: acc.totalFailed + totalFailed,
      totalSkipped: acc.totalSkipped + totalSkipped,
      totalPassed: acc.totalPassed + totalPassed,
      totalTests: acc.totalTests + totalTests
    }),
    emptyStats
  );
  const firstResult = input[0];
  const startItems = input.map((i) => i.startedTestsAt).sort();
  const endItems = input.map((i) => i.endedTestsAt).sort();
  const runs = input.map((i) => i.runs).flat();
  return {
    ...overall,
    runs,
    startedTestsAt: _8.first(startItems),
    endedTestsAt: _8.last(endItems),
    ..._8.pick(
      firstResult,
      "browserName",
      "browserVersion",
      "browserPath",
      "osName",
      "osVersion",
      "cypressVersion",
      "config"
    ),
    status: "finished"
  };
};
function getEmptyCypressResults(config) {
  return {
    ...emptyStats,
    status: "finished",
    startedTestsAt: (/* @__PURE__ */ new Date()).toISOString(),
    endedTestsAt: (/* @__PURE__ */ new Date()).toISOString(),
    runs: [],
    // @ts-ignore
    config
  };
}
var emptyStats = {
  totalDuration: 0,
  totalSuites: 0,
  totalPending: 0,
  totalFailed: 0,
  totalSkipped: 0,
  totalPassed: 0,
  totalTests: 0
};
function getFailedDummyResult({
  specs,
  error: error2,
  config
}) {
  const start = (/* @__PURE__ */ new Date()).toISOString();
  const end = (/* @__PURE__ */ new Date()).toISOString();
  return {
    config,
    status: "finished",
    startedTestsAt: (/* @__PURE__ */ new Date()).toISOString(),
    endedTestsAt: (/* @__PURE__ */ new Date()).toISOString(),
    totalDuration: 0,
    totalSuites: 1,
    totalFailed: 1,
    totalPassed: 0,
    totalPending: 0,
    totalSkipped: 0,
    totalTests: 1,
    browserName: "unknown",
    browserVersion: "unknown",
    browserPath: "unknown",
    osName: "unknown",
    osVersion: "unknown",
    cypressVersion: "unknown",
    runs: specs.map((s) => ({
      stats: {
        suites: 1,
        tests: 1,
        passes: 0,
        pending: 0,
        skipped: 0,
        failures: 1,
        startedAt: start,
        endedAt: end,
        duration: 0
      },
      reporter: "spec",
      reporterStats: {},
      hooks: [],
      error: error2,
      video: null,
      spec: {
        name: s,
        relative: "",
        absolute: "",
        relativeToCommonRoot: ""
      },
      tests: [
        {
          title: ["Unknown"],
          state: "failed",
          body: "// This test is automatically generated due to execution failure",
          displayError: error2,
          attempts: [
            {
              state: "failed",
              startedAt: start,
              duration: 0,
              videoTimestamp: 0,
              screenshots: [],
              error: {
                name: "CloudExecutionError",
                message: error2,
                stack: ""
              }
            }
          ]
        }
      ],
      shouldUploadVideo: false,
      skippedSpec: false
    }))
  };
}
function normalizeRawResult(rawResult, specs, config) {
  if (!isSuccessResult(rawResult)) {
    return getFailedDummyResult({
      specs,
      error: rawResult.message,
      config
    });
  }
  return rawResult;
}
function getSummaryForSpec(spec, runResult) {
  const run3 = runResult.runs.find((r) => r.spec.relative === spec);
  if (!run3) {
    return;
  }
  const stats = getStats(run3.stats);
  return {
    ...runResult,
    runs: [run3],
    totalSuites: 1,
    totalDuration: stats.wallClockDuration,
    totalTests: stats.tests,
    totalFailed: stats.failures,
    totalPassed: stats.passes,
    totalPending: stats.pending,
    totalSkipped: stats.skipped,
    startedTestsAt: stats.wallClockStartedAt,
    endedTestsAt: stats.wallClockEndedAt
  };
}

// lib/results/table.ts
import _9 from "lodash";
import prettyMS from "pretty-ms";
import { table } from "table";
var failureIcon = red("\u2716");
var successIcon = green("\u2714");
var summaryTable = (r) => {
  const overallSpecCount = r.runs.length;
  const failedSpecsCount = _9.sum(
    r.runs.filter((v) => v.stats.failures + v.stats.skipped > 0).map(() => 1)
  );
  const hasFailed = failedSpecsCount > 0;
  const verdict = hasFailed ? red(`${failedSpecsCount} of ${overallSpecCount} failed`) : overallSpecCount > 0 ? "All specs passed!" : "No specs executed";
  const data = r.runs.map((r2) => [
    r2.stats.failures + r2.stats.skipped > 0 ? failureIcon : successIcon,
    r2.spec.relativeToCommonRoot,
    gray(prettyMS(r2.stats.duration)),
    white(r2.stats.tests ?? 0),
    r2.stats.passes ? green(r2.stats.passes) : gray("-"),
    r2.stats.failures ? red(r2.stats.failures) : gray("-"),
    r2.stats.pending ? cyan(r2.stats.pending) : gray("-"),
    r2.stats.skipped ? red(r2.stats.skipped) : gray("-")
  ]);
  return table(
    [
      [
        "",
        // marker
        gray("Spec"),
        "",
        gray("Tests"),
        gray("Passing"),
        gray("Failing"),
        gray("Pending"),
        gray("Skipped")
      ],
      ...data,
      [
        hasFailed ? failureIcon : successIcon,
        // marker
        verdict,
        gray(prettyMS(r.totalDuration ?? 0)),
        overallSpecCount > 0 ? white(r.totalTests ?? 0) : gray("-"),
        r.totalPassed ? green(r.totalPassed) : gray("-"),
        r.totalFailed ? red(r.totalFailed) : gray("-"),
        r.totalPending ? cyan(r.totalPending) : gray("-"),
        r.totalSkipped ? red(r.totalSkipped) : gray("-")
      ]
    ],
    {
      border,
      columnDefault: {
        width: 8
      },
      columns: [
        { alignment: "left", width: 2 },
        { alignment: "left", width: 30 },
        { alignment: "right" },
        { alignment: "right" },
        { alignment: "right" },
        { alignment: "right" },
        { alignment: "right" },
        { alignment: "right" }
      ],
      // singleLine: true,
      drawHorizontalLine: (lineIndex, rowCount) => {
        return lineIndex === 1 || lineIndex === 0 || lineIndex === rowCount - 1 || lineIndex === rowCount;
      },
      drawVerticalLine: (lineIndex, rowCount) => {
        return lineIndex === 0 || rowCount === lineIndex;
      }
    }
  );
};
var border = _9.mapValues(
  {
    topBody: `\u2500`,
    topJoin: `\u252C`,
    topLeft: `  \u250C`,
    topRight: `\u2510`,
    bottomBody: `\u2500`,
    bottomJoin: `\u2534`,
    bottomLeft: `  \u2514`,
    bottomRight: `\u2518`,
    bodyLeft: `  \u2502`,
    bodyRight: `\u2502`,
    bodyJoin: `\u2502`,
    joinBody: `\u2500`,
    joinLeft: `  \u251C`,
    joinRight: `\u2524`,
    joinJoin: `\u253C`
  },
  (v) => gray(v)
);

// lib/results/uploadResults.ts
import Debug13 from "debug";

// lib/artifacts.ts
import Debug12 from "debug";

// lib/lang.ts
import bluebird from "bluebird";
bluebird.Promise.config({
  cancellation: true
});
var BPromise = bluebird.Promise;
var safe = (fn, ifFaled, ifSucceed) => async (...args) => {
  try {
    const r = await fn(...args);
    ifSucceed();
    return r;
  } catch (e) {
    ifFaled(e);
  }
};

// lib/upload.ts
import Debug11 from "debug";
import fs2 from "fs";
var readFile = fs2.promises.readFile;
var debug12 = Debug11("currents:upload");
function uploadVideo(file2, url) {
  return uploadFile(file2, url, "video/mp4");
}
function uploadImage(file2, url) {
  return uploadFile(file2, url, "image/png");
}
async function uploadFile(file2, url, type) {
  debug12('uploading file "%s" to "%s"', file2, url);
  const f = await readFile(file2);
  await makeRequest({
    url,
    method: "PUT",
    data: f,
    headers: {
      "Content-Type": type
    }
  });
}

// lib/artifacts.ts
var debug13 = Debug12("currents:artifacts");
async function uploadArtifacts({
  videoPath,
  videoUploadUrl,
  screenshots,
  screenshotUploadUrls
}) {
  debug13("uploading artifacts: %o", {
    videoPath,
    videoUploadUrl,
    screenshots,
    screenshotUploadUrls
  });
  const totalUploads = (videoPath ? 1 : 0) + screenshots.length;
  if (totalUploads === 0) {
    return;
  }
  if (videoUploadUrl && videoPath) {
    await safe(
      uploadVideo,
      (e) => debug13("failed uploading video %s. Error: %o", videoPath, e),
      () => debug13("success uploading", videoPath)
    )(videoPath, videoUploadUrl);
  }
  if (screenshotUploadUrls && screenshotUploadUrls.length) {
    await Promise.all(
      screenshots.map((screenshot) => {
        const url = screenshotUploadUrls.find(
          (urls) => urls.screenshotId === screenshot.screenshotId
        )?.uploadUrl;
        if (!url) {
          debug13(
            "No upload url for screenshot %o, screenshotUploadUrls: %o",
            screenshot,
            screenshotUploadUrls
          );
          warn("Cannot find upload url for screenshot: %s", screenshot.path);
          return Promise.resolve();
        }
        return safe(
          uploadImage,
          (e) => debug13(
            "failed uploading screenshot %s. Error: %o",
            screenshot.path,
            e
          ),
          () => debug13("success uploading", screenshot.path)
        )(screenshot.path, url);
      })
    );
  }
}
var uploadStdoutSafe = safe(
  updateInstanceStdout,
  () => {
  },
  () => {
  }
);

// lib/env.ts
var isCurrents = () => !!process.env.CURRENTS_ENFORCE_IS_CURRENTS || getAPIBaseUrl() === "https://cy.currents.dev";

// lib/pubsub.ts
import EventEmitter from "events";
var pubsub = new EventEmitter();

// lib/state.ts
var state = {
  cancellationReason: null
};
var setCancellationReason = (reason) => {
  if (state.cancellationReason) {
    return;
  }
  state.cancellationReason = reason;
  pubsub.emit("runCancelled" /* RUN_CANCELLED */, reason);
};

// lib/results/uploadResults.ts
var debug14 = Debug13("currents:results");
async function getUploadResultsTask({
  instanceId,
  spec,
  runResult,
  output
}) {
  const run3 = runResult.runs.find((r) => r.spec.relative === spec);
  if (!run3) {
    warn('Cannot determine run result for spec "%s"', spec);
    return;
  }
  return processCypressResults(
    instanceId,
    {
      // replace the runs with the run for the specified spec
      ...runResult,
      runs: [run3]
    },
    output
  );
}
async function processCypressResults(instanceId, results, stdout2) {
  const run3 = results.runs[0];
  if (!run3) {
    throw new Error("No run found in Cypress results");
  }
  const instanceResults = getInstanceResultPayload(run3);
  const instanceTests = getInstanceTestsPayload(run3, results.config);
  const { videoUploadUrl, screenshotUploadUrls, cloud } = await reportResults(
    instanceId,
    instanceTests,
    instanceResults
  );
  if (cloud?.shouldCancel) {
    debug14("instance %s should cancel", instanceId);
    setCancellationReason(cloud.shouldCancel);
  }
  debug14("instance %s artifact upload instructions %o", instanceId, {
    videoUploadUrl,
    screenshotUploadUrls
  });
  return Promise.all([
    uploadArtifacts({
      videoUploadUrl,
      videoPath: run3.video,
      screenshotUploadUrls,
      screenshots: instanceResults.screenshots
    }),
    uploadStdoutSafe(instanceId, getInitialOutput() + stdout2)
  ]);
}
async function reportResults(instanceId, instanceTests, instanceResults) {
  debug14("reporting instance %s results...", instanceId);
  if (isCurrents()) {
    return reportInstanceResultsMerged(instanceId, {
      tests: instanceTests,
      results: instanceResults
    });
  }
  await setInstanceTests(instanceId, instanceTests);
  return updateInstanceResults(instanceId, instanceResults);
}

// lib/runner/runner.ts
import Debug14 from "debug";

// lib/runner/state.ts
var summary = {};
var uploadTasks = [];

// lib/runner/runner.ts
var debug15 = Debug14("currents:runner");
async function runTillDone({
  runId,
  groupId,
  machineId,
  platform: platform2,
  config,
  specs: allSpecs
}, params) {
  let hasMore = true;
  while (hasMore) {
    const newTasks = await runBatch({
      runMeta: {
        runId,
        groupId,
        machineId,
        platform: platform2
      },
      allSpecs,
      params,
      config
    });
    if (!newTasks.length) {
      debug15("No more tasks to run. Uploads queue: %d", uploadTasks.length);
      hasMore = false;
      break;
    }
    newTasks.forEach((task) => {
      if (task.summary.specSummary) {
        summary[task.summary.spec] = task.summary.specSummary;
      }
      uploadTasks.push(task.uploadTasks);
    });
  }
}
async function runBatch({
  runMeta,
  config,
  params,
  allSpecs
}) {
  let batch = {
    specs: [],
    claimedInstances: 0,
    totalInstances: 0
  };
  if (isCurrents()) {
    debug15("Getting batched tasks: %d", params.batchSize);
    batch = await createBatchedInstances({
      ...runMeta,
      batchSize: params.batchSize
    });
    debug15("Got batched tasks: %o", batch);
  } else {
    const response = await createInstance(runMeta);
    if (response.spec !== null && response.instanceId !== null) {
      batch.specs.push({
        spec: response.spec,
        instanceId: response.instanceId
      });
    }
    batch.claimedInstances = response.claimedInstances;
    batch.totalInstances = response.totalInstances;
  }
  if (batch.specs.length === 0) {
    return [];
  }
  divider();
  info(
    "Running: %s (%d/%d)",
    batch.specs.map((s) => s.spec).join(", "),
    batch.claimedInstances,
    batch.totalInstances
  );
  const rawResult = await runSpecFileSafe(
    {
      // use absolute paths -  user can run the program from a different directory, e.g. nx or a monorepo workspace
      // cypress still reports the path relative to the project root
      spec: batch.specs.map((bs) => getSpecAbsolutePath(allSpecs, bs.spec)).join(",")
    },
    params
  );
  const normalizedResult = normalizeRawResult(
    rawResult,
    batch.specs.map((s) => s.spec),
    config
  );
  title("blue", "Reporting results and artifacts in background...");
  const output = getCapturedOutput();
  resetCapture();
  const batchResult = batch.specs.map((spec) => {
    const specSummary = getSummaryForSpec(spec.spec, normalizedResult);
    if (!specSummary) {
      warn('Cannot find run result for spec "%s"', spec.spec);
    }
    return {
      summary: {
        spec: spec.spec,
        specSummary
      },
      uploadTasks: getUploadResultsTask({
        ...spec,
        runResult: normalizedResult,
        output
      }).catch(error)
    };
  });
  return batchResult;
}
function getSpecAbsolutePath(allSpecs, relative) {
  const absolutePath = allSpecs.find((i) => i.relative === relative)?.absolute;
  if (!absolutePath) {
    warn(
      'Cannot find absolute path for spec. Spec: "%s", candidates: %o',
      relative,
      allSpecs
    );
    throw new Error(`Cannot find absolute path for spec`);
  }
  return absolutePath;
}

// lib/runner/cancellable.ts
var cancellable = null;
function onRunCancelled(reason) {
  warn(
    `Run cancelled: %s. Waiting for uploads to complete and stopping execution...`,
    reason
  );
  cancellable?.cancel();
}
async function runTillDoneOrCancelled(...args) {
  return new Promise((_resolve, _reject) => {
    cancellable = new BPromise((resolve, reject, onCancel) => {
      if (!onCancel) {
        _reject(new Error("BlueBird is misconfigured: onCancel is undefined"));
        return;
      }
      onCancel(() => _resolve(summary));
      runTillDone(...args).then(
        () => {
          resolve();
          _resolve(summary);
        },
        (error2) => {
          reject();
          _reject(error2);
        }
      );
    });
    pubsub.addListener("runCancelled" /* RUN_CANCELLED */, onRunCancelled);
  }).finally(() => {
    pubsub.removeListener("runCancelled" /* RUN_CANCELLED */, onRunCancelled);
  });
}

// lib/specMatcher/specMatcher.ts
import Debug15 from "debug";
import path3 from "path";
import commonPathPrefix from "common-path-prefix";
import globby from "globby";
import _10 from "lodash";
import os from "os";
var debug16 = Debug15("currents:specs");
async function findSpecs({
  projectRoot,
  testingType,
  specPattern,
  configSpecPattern,
  excludeSpecPattern,
  additionalIgnorePattern
}) {
  configSpecPattern = toArray(configSpecPattern);
  specPattern = toArray(specPattern);
  excludeSpecPattern = toArray(excludeSpecPattern) || [];
  additionalIgnorePattern = toArray(additionalIgnorePattern) || [];
  debug16("exploring spec files for execution %O", {
    testingType,
    projectRoot,
    specPattern,
    configSpecPattern,
    excludeSpecPattern,
    additionalIgnorePattern
  });
  if (!specPattern || !configSpecPattern) {
    throw Error("Could not find glob patterns for exploring specs");
  }
  let specAbsolutePaths = await getFilesByGlob(projectRoot, specPattern, {
    absolute: true,
    ignore: [...excludeSpecPattern, ...additionalIgnorePattern]
  });
  if (!_10.isEqual(specPattern, configSpecPattern)) {
    const defaultSpecAbsolutePaths = await getFilesByGlob(
      projectRoot,
      configSpecPattern,
      {
        absolute: true,
        ignore: [...excludeSpecPattern, ...additionalIgnorePattern]
      }
    );
    specAbsolutePaths = _10.intersection(
      specAbsolutePaths,
      defaultSpecAbsolutePaths
    );
  }
  return matchedSpecs({
    projectRoot,
    testingType,
    specAbsolutePaths,
    specPattern
  });
}
async function getFilesByGlob(projectRoot, glob, globOptions) {
  const workingDirectoryPrefix = path3.join(projectRoot, path3.sep);
  const globs = [].concat(glob).map(
    (globPattern) => globPattern.startsWith("./") ? globPattern.replace("./", "") : globPattern
  ).map((globPattern) => {
    if (globPattern.startsWith(workingDirectoryPrefix)) {
      return globPattern.replace(workingDirectoryPrefix, "");
    }
    return globPattern;
  });
  if (os.platform() === "win32") {
    debug16("updating glob patterns to POSIX");
    for (const i in globs) {
      const cur = globs[i];
      if (!cur)
        throw new Error("undefined glob received");
      globs[i] = toPosix(cur);
    }
  }
  try {
    debug16("globbing pattern(s): %o", globs);
    debug16("within directory: %s", projectRoot);
    return matchGlobs(globs, {
      onlyFiles: true,
      absolute: true,
      cwd: projectRoot,
      ...globOptions,
      ignore: (globOptions?.ignore ?? []).concat("**/node_modules/**")
    });
  } catch (e) {
    debug16("error in getFilesByGlob %o", e);
    return [];
  }
}
var matchGlobs = async (globs, globbyOptions) => {
  return await globby(globs, globbyOptions);
};
function matchedSpecs({
  projectRoot,
  testingType,
  specAbsolutePaths
}) {
  debug16("found specs %o", specAbsolutePaths);
  let commonRoot = "";
  if (specAbsolutePaths.length === 1) {
    commonRoot = path3.dirname(specAbsolutePaths[0]);
  } else {
    commonRoot = commonPathPrefix(specAbsolutePaths);
  }
  return specAbsolutePaths.map(
    (absolute) => transformSpec({
      projectRoot,
      absolute,
      testingType,
      commonRoot,
      platform: os.platform(),
      sep: path3.sep
    })
  );
}
function transformSpec({
  projectRoot,
  absolute,
  testingType,
  commonRoot,
  platform: platform2,
  sep
}) {
  if (platform2 === "win32") {
    absolute = toPosix(absolute, sep);
    projectRoot = toPosix(projectRoot, sep);
  }
  const relative = path3.relative(projectRoot, absolute);
  const parsedFile = path3.parse(absolute);
  const fileExtension = path3.extname(absolute);
  const specFileExtension = [".spec", ".test", "-spec", "-test", ".cy"].map((ext) => ext + fileExtension).find((ext) => absolute.endsWith(ext)) || fileExtension;
  const parts = absolute.split(projectRoot);
  let name = parts[parts.length - 1] || "";
  if (name.startsWith("/")) {
    name = name.slice(1);
  }
  const LEADING_SLASH = /^\/|/g;
  const relativeToCommonRoot = absolute.replace(commonRoot, "").replace(LEADING_SLASH, "");
  return {
    fileExtension,
    baseName: parsedFile.base,
    fileName: parsedFile.base.replace(specFileExtension, ""),
    specFileExtension,
    relativeToCommonRoot,
    specType: testingType === "component" ? "component" : "integration",
    name,
    relative,
    absolute
  };
}

// lib/specMatcher/getSpecFiles.ts
var getSpecFiles = async ({
  config,
  params
}) => {
  const specPattern = getSpecPattern(config.specPattern, params.spec);
  const specs = await findSpecs({
    // https://docs.cypress.io/guides/guides/command-line#cypress-run-spec-lt-spec-gt
    projectRoot: params.project ?? config.projectRoot,
    testingType: params.testingType,
    specPattern,
    configSpecPattern: config.specPattern,
    excludeSpecPattern: config.excludeSpecPattern,
    additionalIgnorePattern: config.additionalIgnorePattern
  });
  if (specs.length === 0) {
    warn(
      "Found no spec files. Was looking for spec files that match both configSpecPattern and specPattern relative to projectRoot. Configuration: %O",
      {
        projectRoot: config.projectRoot,
        specPattern,
        configSpecPattern: config.specPattern,
        excludeSpecPattern: [
          config.excludeSpecPattern,
          config.additionalIgnorePattern
        ].flat(2),
        testingType: params.testingType
      }
    );
  }
  return { specs, specPattern };
};
function getSpecPattern(configPattern, explicit) {
  return explicit || configPattern;
}

// lib/run.ts
var debug17 = Debug16("currents:run");
async function run(params = {}) {
  debug17("run params %o", params);
  params = preprocessParams(params);
  debug17("params after preprocess %o", params);
  if (isOffline(params)) {
    info(`Skipping cloud orchestration because --record is set to false`);
    return runBareCypress(params);
  }
  const validatedParams = validateParams(params);
  setAPIBaseUrl(validatedParams.cloudServiceUrl);
  const {
    recordKey,
    projectId,
    group,
    parallel,
    ciBuildId,
    tag,
    testingType,
    batchSize,
    autoCancelAfterFailures
  } = validatedParams;
  const config = await getMergedConfig(validatedParams);
  const { specs, specPattern } = await getSpecFiles({
    config,
    params: validatedParams
  });
  if (specs.length === 0) {
    return;
  }
  const platform2 = await getPlatform({
    config,
    browser: validatedParams.browser
  });
  divider();
  info("Discovered %d spec files", specs.length);
  info(
    `Tags: ${tag.length > 0 ? tag.join(",") : false}; Group: ${group ?? false}; Parallel: ${parallel ?? false}; Batch Size: ${batchSize}`
  );
  info("Connecting to cloud orchestration service...");
  const run3 = await createRun({
    ci: getCI(ciBuildId),
    specs: specs.map((spec) => spec.relative),
    commit: await getGitInfo(config.projectRoot),
    group,
    platform: platform2,
    parallel: parallel ?? false,
    ciBuildId,
    projectId,
    recordKey,
    specPattern: [specPattern].flat(2),
    tags: tag,
    testingType,
    batchSize,
    autoCancelAfterFailures
  });
  info("\u{1F3A5} Run URL:", bold(run3.runUrl));
  setRunId(run3.runId);
  cutInitialOutput();
  await runTillDoneOrCancelled(
    {
      runId: run3.runId,
      groupId: run3.groupId,
      machineId: run3.machineId,
      platform: platform2,
      config,
      specs
    },
    validatedParams
  );
  divider();
  await Promise.allSettled(uploadTasks);
  const _summary = summarizeTestResults(Object.values(summary), config);
  title("white", "Cloud Run Finished");
  console.log(summaryTable(_summary));
  info("\u{1F3C1} Recorded Run:", bold(run3.runUrl));
  spacer();
  if (_summary.status === "finished") {
    return {
      ..._summary,
      runUrl: run3.runUrl
    };
  }
  return _summary;
}

// index.ts
function run2(params) {
  return run(params);
}
export {
  run2 as run
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vaW5kZXgudHMiLCAiLi4vbGliL3JlcXVpcmUudHMiLCAiLi4vbGliL3N0ZG91dC50cyIsICIuLi9saWIvY2FwdHVyZS50cyIsICIuLi9saWIvaHR0cENsaWVudC9jb25maWcudHMiLCAiLi4vbGliL2h0dHBDbGllbnQvaHR0cENsaWVudC50cyIsICIuLi9saWIvZXJyb3JzLnRzIiwgIi4uL2xpYi9sb2cudHMiLCAiLi4vbGliL2h0dHBDbGllbnQvcHJpbnRFcnJvcnMudHMiLCAiLi4vbGliL2luaXQudHMiLCAiLi4vbGliL3J1bi50cyIsICIuLi9saWIvYXBpL3dhcm5pbmdzLnRzIiwgIi4uL2xpYi9hcGkvYXBpLnRzIiwgIi4uL2xpYi9jaVByb3ZpZGVyLnRzIiwgIi4uL2xpYi9jb25maWcvY29uZmlnLnRzIiwgIi4uL2xpYi9ib290c3RyYXAvYm9vdHN0cmFwLnRzIiwgIi4uL2xpYi9mcy50cyIsICIuLi9saWIvYm9vdHN0cmFwL3NlcmlhbGl6ZXIudHMiLCAiLi4vbGliL3V0aWxzLnRzIiwgIi4uL2xpYi9jb25maWcvcGFyYW1zLnRzIiwgIi4uL2xpYi9jeXByZXNzL2N5cHJlc3MudHMiLCAiLi4vbGliL2dpdC50cyIsICIuLi9saWIvcGxhdGZvcm0vYnJvd3Nlci50cyIsICIuLi9saWIvcGxhdGZvcm0vcGxhdGZvcm0udHMiLCAiLi4vbGliL3BsYXRmb3JtL2luZGV4LnRzIiwgIi4uL2xpYi9yZXN1bHRzL3Jlc3VsdHMudHMiLCAiLi4vbGliL3Jlc3VsdHMvdGFibGUudHMiLCAiLi4vbGliL3Jlc3VsdHMvdXBsb2FkUmVzdWx0cy50cyIsICIuLi9saWIvYXJ0aWZhY3RzLnRzIiwgIi4uL2xpYi9sYW5nLnRzIiwgIi4uL2xpYi91cGxvYWQudHMiLCAiLi4vbGliL2Vudi50cyIsICIuLi9saWIvcHVic3ViLnRzIiwgIi4uL2xpYi9zdGF0ZS50cyIsICIuLi9saWIvcnVubmVyL3J1bm5lci50cyIsICIuLi9saWIvcnVubmVyL3N0YXRlLnRzIiwgIi4uL2xpYi9ydW5uZXIvY2FuY2VsbGFibGUudHMiLCAiLi4vbGliL3NwZWNNYXRjaGVyL3NwZWNNYXRjaGVyLnRzIiwgIi4uL2xpYi9zcGVjTWF0Y2hlci9nZXRTcGVjRmlsZXMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiY3lwcmVzc1wiIC8+XG5pbXBvcnQgXCJzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXIuanNcIjtcblxuaW1wb3J0IHsgcnVuIGFzIGludGVybmFsUnVuIH0gZnJvbSBcIi4vbGliL3J1blwiO1xuaW1wb3J0IHsgQ3VycmVudHNSdW5BUEkgfSBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0IHR5cGUgeyBDdXJyZW50c1J1bkFQSSB9IGZyb20gXCIuL3R5cGVzXCI7XG4vKipcbiAqIFJ1biBDeXByZXNzIHRlc3RzIHdpdGggYSBjbG91ZCBzZXJ2aWNlIG9mIHlvdXIgY2hvaWNlIGFuZCByZXR1cm4gdGhlIHJlc3VsdHNcbiAqXG4gKiBAYXVnbWVudHMgQ3VycmVudHNSdW5BUElcbiAqIEByZXR1cm5zIHtDeXByZXNzQ29tbWFuZExpbmUuQ3lwcmVzc1J1blJlc3VsdCB8IEN5cHJlc3NDb21tYW5kTGluZS5DeXByZXNzRmFpbGVkUnVuUmVzdWx0IHwgdW5kZWZpbmVkfSBUaGUgdGVzdCByZXN1bHRzLCBvciB1bmRlZmluZWQgaWYgbm8gdGVzdHMgd2VyZSBydW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bihwYXJhbXM/OiBDdXJyZW50c1J1bkFQSSkge1xuICByZXR1cm4gaW50ZXJuYWxSdW4ocGFyYW1zKTtcbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVSZXF1aXJlIH0gZnJvbSBcIm1vZHVsZVwiO1xuLy8gcmVxdWlyZXMgc2hpbT10cnVlIGluIHBhY2thZ2UuanNvblxuZXhwb3J0IGNvbnN0IHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybCk7XG4iLCAiaW1wb3J0IGNwIGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5jb25zdCBvcmdpbmFsID0gY3Auc3Bhd247XG5cbi8vIEB0cy1pZ25vcmVcbmNwLnNwYXduID0gZnVuY3Rpb24gKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICBpZiAoY29tbWFuZC5tYXRjaCgvQ3lwcmVzcy8pKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IHByb2Nlc3MgPSBvcmdpbmFsKGNvbW1hbmQsIGFyZ3MsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAvLyB1c2luZyBwaXBlIGVuYWJsZXMgY2FwdHVyaW5nIHN0ZG91dCBhbmQgc3RkZXJyXG4gICAgICBzdGRpbzogW1wicGlwZVwiLCBcInBpcGVcIiwgXCJwaXBlXCJdLFxuICAgIH0pO1xuICAgIHJldHVybiBwcm9jZXNzO1xuICB9XG5cbiAgLy8gQHRzLWlnbm9yZVxuICByZXR1cm4gb3JnaW5hbChjb21tYW5kLCBhcmdzLCBvcHRpb25zKTtcbn07XG4iLCAiaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOmNhcHR1cmVcIik7XG5cbmNvbnN0IF93cml0ZSA9IHByb2Nlc3Muc3Rkb3V0LndyaXRlO1xuY29uc3QgX2xvZyA9IHByb2Nlc3MubG9nO1xuXG5leHBvcnQgY29uc3QgcmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gcmVzdG9yZSB0byB0aGUgb3JpZ2luYWxzXG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlID0gX3dyaXRlO1xuICBwcm9jZXNzLmxvZyA9IF9sb2c7XG59O1xuXG5jb25zdCBsb2dzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4gPSB7fTtcblxuY29uc3Qgc3Rkb3V0ID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZyhcImNhcHR1cmluZyBzdGRvdXRcIik7XG4gIGxldCBsb2dzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIGxhemlseSBiYWNrdXAgd3JpdGUgdG8gZW5hYmxlIGluamVjdGlvblxuICBjb25zdCB7IHdyaXRlIH0gPSBwcm9jZXNzLnN0ZG91dDtcbiAgY29uc3QgeyBsb2cgfSA9IHByb2Nlc3M7XG5cbiAgLy8gZWxlY3Ryb24gYWRkcyBhIG5ldyBwcm9jZXNzLmxvZ1xuICAvLyBtZXRob2QgZm9yIHdpbmRvd3MgaW5zdGVhZCBvZiBwcm9jZXNzLnN0ZG91dC53cml0ZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vY3lwcmVzcy1pby9jeXByZXNzL2lzc3Vlcy85NzdcbiAgaWYgKGxvZykge1xuICAgIHByb2Nlc3MubG9nID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKSB7XG4gICAgICBsb2dzLnB1c2goc3RyKTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIGxvZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBwcm9jZXNzLnN0ZG91dC53cml0ZSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZykge1xuICAgIGxvZ3MucHVzaChzdHIpO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICByZXR1cm4gd3JpdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGxvZ3Muam9pbihcIlwiKTtcbiAgICB9LFxuICAgIGRhdGE6IGxvZ3MsXG4gICAgcmVzdG9yZSxcbiAgICByZXNldDogKCkgPT4ge1xuICAgICAgZGVidWcoXCJyZXNldHRpbmcgY2FwdHVyZWQgc3Rkb3V0XCIpO1xuICAgICAgbG9ncyA9IFtdO1xuICAgIH0sXG4gIH07XG59O1xuXG5sZXQgaW5pdGlhbE91dHB1dDogc3RyaW5nID0gXCJcIjtcbmxldCBjYXB0dXJlZE91dHB1dDogbnVsbCB8IFJldHVyblR5cGU8dHlwZW9mIHN0ZG91dD4gPSBudWxsO1xuXG5leHBvcnQgY29uc3QgaW5pdENhcHR1cmUgPSAoKSA9PiAoY2FwdHVyZWRPdXRwdXQgPSBzdGRvdXQoKSk7XG5cbmV4cG9ydCBjb25zdCBjdXRJbml0aWFsT3V0cHV0ID0gKCkgPT4ge1xuICBpZiAoIWNhcHR1cmVkT3V0cHV0KSB0aHJvdyBuZXcgRXJyb3IoXCJjYXB0dXJlZE91dHB1dCBpcyBudWxsXCIpO1xuICBpbml0aWFsT3V0cHV0ID0gY2FwdHVyZWRPdXRwdXQudG9TdHJpbmcoKTtcbiAgY2FwdHVyZWRPdXRwdXQucmVzZXQoKTtcbn07XG5leHBvcnQgY29uc3QgcmVzZXRDYXB0dXJlID0gKCkgPT4ge1xuICBpZiAoIWNhcHR1cmVkT3V0cHV0KSB0aHJvdyBuZXcgRXJyb3IoXCJjYXB0dXJlZE91dHB1dCBpcyBudWxsXCIpO1xuICBjYXB0dXJlZE91dHB1dC5yZXNldCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcHR1cmVkT3V0cHV0ID0gKCkgPT4ge1xuICBpZiAoIWNhcHR1cmVkT3V0cHV0KSB0aHJvdyBuZXcgRXJyb3IoXCJjYXB0dXJlZE91dHB1dCBpcyBudWxsXCIpO1xuICByZXR1cm4gY2FwdHVyZWRPdXRwdXQudG9TdHJpbmcoKTtcbn07XG5leHBvcnQgY29uc3QgZ2V0SW5pdGlhbE91dHB1dCA9ICgpID0+IGluaXRpYWxPdXRwdXQ7XG4iLCAiaW1wb3J0IHsgQXhpb3NFcnJvciwgaXNBeGlvc0Vycm9yIH0gZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBjb25zdCBpc1JldHJpYWJsZUVycm9yID0gKGVycjogQXhpb3NFcnJvcik6IGJvb2xlYW4gPT4ge1xuICBpZiAoIWlzQXhpb3NFcnJvcihlcnIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChlcnIuY29kZSA9PT0gXCJFQ09OTlJFRlVTRURcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiAhIShcbiAgICBlcnI/LnJlc3BvbnNlPy5zdGF0dXMgJiZcbiAgICA1MDAgPD0gZXJyLnJlc3BvbnNlLnN0YXR1cyAmJlxuICAgIGVyci5yZXNwb25zZS5zdGF0dXMgPCA2MDBcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWxheSA9IChpOiBudW1iZXIpID0+IFsxNSAqIDEwMDAsIDMwICogMTAwMCwgNjAgKiAxMDAwXVtpIC0gMV07XG5cbmxldCBiYXNlVVJMID0gXCJodHRwczovL2N5LmN1cnJlbnRzLmRldlwiO1xuZXhwb3J0IGNvbnN0IGdldEFQSUJhc2VVcmwgPSAoKSA9PiBiYXNlVVJMID8/IFwiaHR0cHM6Ly9jeS5jdXJyZW50cy5kZXZcIjtcbmV4cG9ydCBjb25zdCBzZXRBUElCYXNlVXJsID0gKHVybD86IHN0cmluZykgPT5cbiAgKGJhc2VVUkwgPSB1cmwgPz8gXCJodHRwczovL2N5LmN1cnJlbnRzLmRldlwiKTtcbiIsICJpbXBvcnQgYXhpb3MsIHtcbiAgQXhpb3NFcnJvcixcbiAgQXhpb3NJbnN0YW5jZSxcbiAgQXhpb3NSZXF1ZXN0Q29uZmlnLFxuICBBeGlvc1Jlc3BvbnNlLFxuICBSYXdBeGlvc1JlcXVlc3RIZWFkZXJzLFxufSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBheGlvc1JldHJ5IGZyb20gXCJheGlvcy1yZXRyeVwiO1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHByZXR0eU1pbGxpc2Vjb25kcyBmcm9tIFwicHJldHR5LW1zXCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IHsgZ2V0QVBJQmFzZVVybCwgZ2V0RGVsYXksIGlzUmV0cmlhYmxlRXJyb3IgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IG1heWJlUHJpbnRFcnJvcnMgfSBmcm9tIFwiLi9wcmludEVycm9yc1wiO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKFwiY3VycmVudHM6YXBpXCIpO1xuXG5jb25zdCBNQVhfUkVUUklFUyA9IDM7XG5cbmxldCBfY2xpZW50OiBBeGlvc0luc3RhbmNlIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnQoKSB7XG4gIGlmIChfY2xpZW50KSB7XG4gICAgcmV0dXJuIF9jbGllbnQ7XG4gIH1cbiAgX2NsaWVudCA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgYmFzZVVSTDogZ2V0QVBJQmFzZVVybCgpLFxuICB9KTtcblxuICBfY2xpZW50LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZSgoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgaGVhZGVyczogUmF3QXhpb3NSZXF1ZXN0SGVhZGVycyA9IHtcbiAgICAgIC4uLmNvbmZpZy5oZWFkZXJzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgXCJ4LWN5cHJlc3MtcmVxdWVzdC1hdHRlbXB0XCI6IGNvbmZpZ1tcImF4aW9zLXJldHJ5XCJdPy5yZXRyeUNvdW50ID8/IDAsXG4gICAgICBcIngtY3lwcmVzcy12ZXJzaW9uXCI6IF9jeXByZXNzVmVyc2lvbiA/PyBcIjAuMC4wXCIsXG4gICAgICBcIngtY2N5LXZlcnNpb25cIjogX2N1cnJlbnRzVmVyc2lvbiA/PyBcIjAuMC4wXCIsXG4gICAgfTtcbiAgICBpZiAoX3J1bklkKSB7XG4gICAgICBoZWFkZXJzW1wieC1jeXByZXNzLXJ1bi1pZFwiXSA9IF9ydW5JZDtcbiAgICB9XG4gICAgaWYgKCFoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdKSB7XG4gICAgICBoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIGhlYWRlcnMsXG4gICAgfTtcblxuICAgIGRlYnVnKFwibmV0d29yayByZXF1ZXN0OiAlb1wiLCB7XG4gICAgICAuLi5fLnBpY2socmVxLCBcIm1ldGhvZFwiLCBcInVybFwiLCBcImhlYWRlcnNcIiksXG4gICAgICBkYXRhOiBCdWZmZXIuaXNCdWZmZXIocmVxLmRhdGEpID8gXCJidWZmZXJcIiA6IHJlcS5kYXRhLFxuICAgIH0pO1xuICAgIHJldHVybiByZXE7XG4gIH0pO1xuXG4gIGF4aW9zUmV0cnkoX2NsaWVudCwge1xuICAgIHJldHJpZXM6IE1BWF9SRVRSSUVTLFxuICAgIHJldHJ5Q29uZGl0aW9uOiBpc1JldHJpYWJsZUVycm9yLFxuICAgIHJldHJ5RGVsYXk6IGdldERlbGF5LFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBvblJldHJ5LFxuICB9KTtcbiAgcmV0dXJuIF9jbGllbnQ7XG59XG5cbmxldCBfcnVuSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBzZXRSdW5JZCA9IChydW5JZDogc3RyaW5nKSA9PiB7XG4gIF9ydW5JZCA9IHJ1bklkO1xufTtcblxubGV0IF9jeXByZXNzVmVyc2lvbjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IHNldEN5cHJlc3NWZXJzaW9uID0gKGN5cHJlc3NWZXJzaW9uOiBzdHJpbmcpID0+IHtcbiAgX2N5cHJlc3NWZXJzaW9uID0gY3lwcmVzc1ZlcnNpb247XG59O1xuXG5sZXQgX2N1cnJlbnRzVmVyc2lvbjogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IHNldEN1cnJlbnRzVmVyc2lvbiA9ICh2OiBzdHJpbmcpID0+IHtcbiAgX2N1cnJlbnRzVmVyc2lvbiA9IHY7XG59O1xuXG5mdW5jdGlvbiBvblJldHJ5KFxuICByZXRyeUNvdW50OiBudW1iZXIsXG4gIGVycjogQXhpb3NFcnJvcjx7IG1lc3NhZ2U6IHN0cmluZzsgZXJyb3JzPzogc3RyaW5nW10gfT4sXG4gIF9jb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZ1xuKSB7XG4gIHdhcm4oXG4gICAgXCJOZXR3b3JrIHJlcXVlc3QgZmFpbGVkOiAnJXMnLiBOZXh0IGF0dGVtcHQgaXMgaW4gJXMgKCVkLyVkKS5cIixcbiAgICBlcnIubWVzc2FnZSxcbiAgICBwcmV0dHlNaWxsaXNlY29uZHMoZ2V0RGVsYXkocmV0cnlDb3VudCkpLFxuICAgIHJldHJ5Q291bnQsXG4gICAgTUFYX1JFVFJJRVNcbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VSZXF1ZXN0ID0gPFQgPSBhbnksIEQgPSBhbnk+KFxuICBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZzxEPlxuKSA9PiB7XG4gIHJldHVybiBnZXRDbGllbnQoKTxELCBBeGlvc1Jlc3BvbnNlPFQ+Pihjb25maWcpXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgZGVidWcoXCJuZXR3b3JrIHJlc3BvbnNlOiAlb1wiLCBfLm9taXQocmVzLCBcInJlcXVlc3RcIiwgXCJjb25maWdcIikpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIG1heWJlUHJpbnRFcnJvcnMoZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9KTtcbn07XG4iLCAiZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgfVxufVxuIiwgImltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcbmltcG9ydCB1dGlsIGZyb20gXCJ1dGlsXCI7XG5cbmNvbnN0IGxvZyA9ICguLi5hcmdzOiB1bmtub3duW10pID0+IGNvbnNvbGUubG9nKHV0aWwuZm9ybWF0KC4uLmFyZ3MpKTtcblxuZXhwb3J0IGNvbnN0IGluZm8gPSBsb2c7XG5cbmV4cG9ydCBjb25zdCB3aXRoRXJyb3IgPSAobXNnOiBzdHJpbmcpID0+XG4gIGNoYWxrLmJnUmVkLndoaXRlKFwiIEVSUk9SIFwiKSArIFwiIFwiICsgbXNnO1xuZXhwb3J0IGNvbnN0IHdpdGhXYXJuaW5nID0gKG1zZzogc3RyaW5nKSA9PlxuICBjaGFsay5iZ1llbGxvdy5ibGFjayhcIiBXQVJOSU5HIFwiKSArIFwiIFwiICsgbXNnO1xuXG5leHBvcnQgY29uc3Qgd2FybiA9ICguLi5hcmdzOiB1bmtub3duW10pID0+XG4gIGxvZyh3aXRoV2FybmluZyh1dGlsLmZvcm1hdCguLi5hcmdzKSkpO1xuXG5leHBvcnQgY29uc3Qgc3VjY2VzcyA9ICguLi5hcmdzOiB1bmtub3duW10pID0+XG4gIGxvZyhjaGFsay5ncmVlbih1dGlsLmZvcm1hdCguLi5hcmdzKSkpO1xuXG5leHBvcnQgY29uc3QgZXJyb3IgPSAoLi4uYXJnczogdW5rbm93bltdKSA9PlxuICBsb2cod2l0aEVycm9yKHV0aWwuZm9ybWF0KC4uLmFyZ3MpKSArIFwiXFxuXCIpO1xuXG50eXBlIENvbG9yID0gXCJyZWRcIiB8IFwiZ3JlZW5cIiB8IFwieWVsbG93XCIgfCBcImJsdWVcIiB8IFwibWFnZW50YVwiIHwgXCJjeWFuXCIgfCBcIndoaXRlXCI7XG5leHBvcnQgY29uc3QgdGl0bGUgPSAoY29sb3I6IENvbG9yLCAuLi5hcmdzOiB1bmtub3duW10pID0+XG4gIGluZm8oXCJcXG5cIiArIFwiICBcIiArIGNoYWxrW2NvbG9yXS5ib2xkKHV0aWwuZm9ybWF0KC4uLmFyZ3MpKSArIFwiICBcIiArIFwiXFxuXCIpO1xuXG5leHBvcnQgY29uc3QgZGl2aWRlciA9ICgpID0+XG4gIGNvbnNvbGUubG9nKFwiXFxuXCIgKyBjaGFsay5ncmF5KEFycmF5KDEwMCkuZmlsbChcIj1cIikuam9pbihcIlwiKSkgKyBcIlxcblwiKTtcblxuZXhwb3J0IGNvbnN0IHNwYWNlciA9IChuOiBudW1iZXIgPSAwKSA9PlxuICBjb25zb2xlLmxvZyhBcnJheShuKS5maWxsKFwiXCIpLmpvaW4oXCJcXG5cIikpO1xuXG5leHBvcnQgY29uc3QgY3lhbiA9IGNoYWxrLmN5YW47XG5leHBvcnQgY29uc3QgYmx1ZSA9IGNoYWxrLmJsdWVCcmlnaHQ7XG5leHBvcnQgY29uc3QgcmVkID0gY2hhbGsucmVkO1xuZXhwb3J0IGNvbnN0IGdyZWVuID0gY2hhbGsuZ3JlZW5CcmlnaHQ7XG5leHBvcnQgY29uc3QgZ3JheSA9IGNoYWxrLmdyYXk7XG5leHBvcnQgY29uc3Qgd2hpdGUgPSBjaGFsay53aGl0ZTtcbmV4cG9ydCBjb25zdCBtYWdlbnRhID0gY2hhbGsubWFnZW50YTtcbmV4cG9ydCBjb25zdCBib2xkID0gY2hhbGsuYm9sZDtcbiIsICJpbXBvcnQgeyBBeGlvc0Vycm9yIH0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBzcGFjZXIsIHdhcm4gfSBmcm9tIFwiLi4vbG9nXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXliZVByaW50RXJyb3JzKFxuICBlcnI6IEF4aW9zRXJyb3I8eyBtZXNzYWdlOiBzdHJpbmc7IGVycm9ycz86IHN0cmluZ1tdIH0+XG4pIHtcbiAgaWYgKCFlcnIucmVzcG9uc2U/LmRhdGEgfHwgIWVyci5yZXNwb25zZT8uc3RhdHVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBtZXNzYWdlLCBlcnJvcnMgfSA9IGVyci5yZXNwb25zZS5kYXRhO1xuXG4gIHN3aXRjaCAoZXJyLnJlc3BvbnNlLnN0YXR1cykge1xuICAgIGNhc2UgNDAxOlxuICAgICAgd2FybihcIlJlY2VpdmVkIDQwMSBVbmF1dGhvcml6ZWRcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQyMjpcbiAgICAgIHNwYWNlcigxKTtcbiAgICAgIHdhcm4oLi4uZm9ybWF0R2VuZXJpY0Vycm9yKG1lc3NhZ2UsIGVycm9ycykpO1xuICAgICAgc3BhY2VyKDEpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRHZW5lcmljRXJyb3IoXG4gIG1lc3NhZ2U/OiBzdHJpbmcsXG4gIGVycm9ycz86IHN0cmluZ1tdXG4pOiBzdHJpbmdbXSB7XG4gIGlmICghXy5pc1N0cmluZyhtZXNzYWdlKSkge1xuICAgIHJldHVybiBbXCJVbmV4cGVjdGVkIGVycm9yIGZyb20gdGhlIGNsb3VkIHNlcnZpY2VcIl07XG4gIH1cblxuICBpZiAoZXJyb3JzPy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW21lc3NhZ2UgYXMgc3RyaW5nXTtcbiAgfVxuICByZXR1cm4gW1xuICAgIG1lc3NhZ2UgYXMgc3RyaW5nLFxuICAgIGBcbiR7KGVycm9ycyA/PyBbXSkubWFwKChlKSA9PiBgICAtICR7ZX1gKS5qb2luKFwiXFxuXCIpfVxuYCxcbiAgXTtcbn1cbiIsICJpbXBvcnQgeyByZXF1aXJlIH0gZnJvbSBcIi4uL2xpYi9yZXF1aXJlXCI7XG5pbXBvcnQgXCIuL3N0ZG91dFwiO1xuaW1wb3J0IFwiLi93c1wiO1xuXG5jb25zdCBjeXByZXNzUGtnID0gcmVxdWlyZShcImN5cHJlc3MvcGFja2FnZS5qc29uXCIpO1xuY29uc3QgcGtnID0gcmVxdWlyZShcImN5cHJlc3MtY2xvdWQvcGFja2FnZS5qc29uXCIpO1xuXG5pbXBvcnQgeyBpbml0Q2FwdHVyZSB9IGZyb20gXCIuL2NhcHR1cmVcIjtcbmltcG9ydCB7IHNldEN1cnJlbnRzVmVyc2lvbiwgc2V0Q3lwcmVzc1ZlcnNpb24gfSBmcm9tIFwiLi9odHRwQ2xpZW50XCI7XG5cbmluaXRDYXB0dXJlKCk7XG5zZXRDeXByZXNzVmVyc2lvbihjeXByZXNzUGtnLnZlcnNpb24pO1xuc2V0Q3VycmVudHNWZXJzaW9uKHBrZy52ZXJzaW9uKTtcbiIsICJpbXBvcnQgXCIuL2luaXRcIjtcblxuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IHsgQ3VycmVudHNSdW5QYXJhbWV0ZXJzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVSdW4gfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCB7IGN1dEluaXRpYWxPdXRwdXQgfSBmcm9tIFwiLi9jYXB0dXJlXCI7XG5pbXBvcnQgeyBnZXRDSSB9IGZyb20gXCIuL2NpUHJvdmlkZXJcIjtcbmltcG9ydCB7XG4gIGdldE1lcmdlZENvbmZpZyxcbiAgaXNPZmZsaW5lLFxuICBwcmVwcm9jZXNzUGFyYW1zLFxuICB2YWxpZGF0ZVBhcmFtcyxcbn0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBydW5CYXJlQ3lwcmVzcyB9IGZyb20gXCIuL2N5cHJlc3NcIjtcbmltcG9ydCB7IGdldEdpdEluZm8gfSBmcm9tIFwiLi9naXRcIjtcbmltcG9ydCB7IHNldEFQSUJhc2VVcmwsIHNldFJ1bklkIH0gZnJvbSBcIi4vaHR0cENsaWVudFwiO1xuaW1wb3J0IHsgYm9sZCwgZGl2aWRlciwgaW5mbywgc3BhY2VyLCB0aXRsZSB9IGZyb20gXCIuL2xvZ1wiO1xuaW1wb3J0IHsgZ2V0UGxhdGZvcm0gfSBmcm9tIFwiLi9wbGF0Zm9ybVwiO1xuaW1wb3J0IHsgc3VtbWFyaXplVGVzdFJlc3VsdHMsIHN1bW1hcnlUYWJsZSB9IGZyb20gXCIuL3Jlc3VsdHNcIjtcbmltcG9ydCB7IHJ1blRpbGxEb25lT3JDYW5jZWxsZWQsIHN1bW1hcnksIHVwbG9hZFRhc2tzIH0gZnJvbSBcIi4vcnVubmVyXCI7XG5pbXBvcnQgeyBnZXRTcGVjRmlsZXMgfSBmcm9tIFwiLi9zcGVjTWF0Y2hlclwiO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKFwiY3VycmVudHM6cnVuXCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuKHBhcmFtczogQ3VycmVudHNSdW5QYXJhbWV0ZXJzID0ge30pIHtcbiAgZGVidWcoXCJydW4gcGFyYW1zICVvXCIsIHBhcmFtcyk7XG4gIHBhcmFtcyA9IHByZXByb2Nlc3NQYXJhbXMocGFyYW1zKTtcbiAgZGVidWcoXCJwYXJhbXMgYWZ0ZXIgcHJlcHJvY2VzcyAlb1wiLCBwYXJhbXMpO1xuXG4gIGlmIChpc09mZmxpbmUocGFyYW1zKSkge1xuICAgIGluZm8oYFNraXBwaW5nIGNsb3VkIG9yY2hlc3RyYXRpb24gYmVjYXVzZSAtLXJlY29yZCBpcyBzZXQgdG8gZmFsc2VgKTtcbiAgICByZXR1cm4gcnVuQmFyZUN5cHJlc3MocGFyYW1zKTtcbiAgfVxuICBjb25zdCB2YWxpZGF0ZWRQYXJhbXMgPSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpO1xuICBzZXRBUElCYXNlVXJsKHZhbGlkYXRlZFBhcmFtcy5jbG91ZFNlcnZpY2VVcmwpO1xuXG4gIGNvbnN0IHtcbiAgICByZWNvcmRLZXksXG4gICAgcHJvamVjdElkLFxuICAgIGdyb3VwLFxuICAgIHBhcmFsbGVsLFxuICAgIGNpQnVpbGRJZCxcbiAgICB0YWcsXG4gICAgdGVzdGluZ1R5cGUsXG4gICAgYmF0Y2hTaXplLFxuICAgIGF1dG9DYW5jZWxBZnRlckZhaWx1cmVzLFxuICB9ID0gdmFsaWRhdGVkUGFyYW1zO1xuXG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldE1lcmdlZENvbmZpZyh2YWxpZGF0ZWRQYXJhbXMpO1xuICBjb25zdCB7IHNwZWNzLCBzcGVjUGF0dGVybiB9ID0gYXdhaXQgZ2V0U3BlY0ZpbGVzKHtcbiAgICBjb25maWcsXG4gICAgcGFyYW1zOiB2YWxpZGF0ZWRQYXJhbXMsXG4gIH0pO1xuXG4gIGlmIChzcGVjcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwbGF0Zm9ybSA9IGF3YWl0IGdldFBsYXRmb3JtKHtcbiAgICBjb25maWcsXG4gICAgYnJvd3NlcjogdmFsaWRhdGVkUGFyYW1zLmJyb3dzZXIsXG4gIH0pO1xuXG4gIGRpdmlkZXIoKTtcblxuICBpbmZvKFwiRGlzY292ZXJlZCAlZCBzcGVjIGZpbGVzXCIsIHNwZWNzLmxlbmd0aCk7XG4gIGluZm8oXG4gICAgYFRhZ3M6ICR7dGFnLmxlbmd0aCA+IDAgPyB0YWcuam9pbihcIixcIikgOiBmYWxzZX07IEdyb3VwOiAke1xuICAgICAgZ3JvdXAgPz8gZmFsc2VcbiAgICB9OyBQYXJhbGxlbDogJHtwYXJhbGxlbCA/PyBmYWxzZX07IEJhdGNoIFNpemU6ICR7YmF0Y2hTaXplfWBcbiAgKTtcbiAgaW5mbyhcIkNvbm5lY3RpbmcgdG8gY2xvdWQgb3JjaGVzdHJhdGlvbiBzZXJ2aWNlLi4uXCIpO1xuXG4gIGNvbnN0IHJ1biA9IGF3YWl0IGNyZWF0ZVJ1bih7XG4gICAgY2k6IGdldENJKGNpQnVpbGRJZCksXG4gICAgc3BlY3M6IHNwZWNzLm1hcCgoc3BlYykgPT4gc3BlYy5yZWxhdGl2ZSksXG4gICAgY29tbWl0OiBhd2FpdCBnZXRHaXRJbmZvKGNvbmZpZy5wcm9qZWN0Um9vdCksXG4gICAgZ3JvdXAsXG4gICAgcGxhdGZvcm0sXG4gICAgcGFyYWxsZWw6IHBhcmFsbGVsID8/IGZhbHNlLFxuICAgIGNpQnVpbGRJZCxcbiAgICBwcm9qZWN0SWQsXG4gICAgcmVjb3JkS2V5LFxuICAgIHNwZWNQYXR0ZXJuOiBbc3BlY1BhdHRlcm5dLmZsYXQoMiksXG4gICAgdGFnczogdGFnLFxuICAgIHRlc3RpbmdUeXBlLFxuICAgIGJhdGNoU2l6ZSxcbiAgICBhdXRvQ2FuY2VsQWZ0ZXJGYWlsdXJlcyxcbiAgfSk7XG5cbiAgaW5mbyhcIlx1RDgzQ1x1REZBNSBSdW4gVVJMOlwiLCBib2xkKHJ1bi5ydW5VcmwpKTtcblxuICBzZXRSdW5JZChydW4ucnVuSWQpO1xuXG4gIGN1dEluaXRpYWxPdXRwdXQoKTtcblxuICBhd2FpdCBydW5UaWxsRG9uZU9yQ2FuY2VsbGVkKFxuICAgIHtcbiAgICAgIHJ1bklkOiBydW4ucnVuSWQsXG4gICAgICBncm91cElkOiBydW4uZ3JvdXBJZCxcbiAgICAgIG1hY2hpbmVJZDogcnVuLm1hY2hpbmVJZCxcbiAgICAgIHBsYXRmb3JtLFxuICAgICAgY29uZmlnLFxuICAgICAgc3BlY3MsXG4gICAgfSxcbiAgICB2YWxpZGF0ZWRQYXJhbXNcbiAgKTtcblxuICBkaXZpZGVyKCk7XG5cbiAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKHVwbG9hZFRhc2tzKTtcbiAgY29uc3QgX3N1bW1hcnkgPSBzdW1tYXJpemVUZXN0UmVzdWx0cyhPYmplY3QudmFsdWVzKHN1bW1hcnkpLCBjb25maWcpO1xuXG4gIHRpdGxlKFwid2hpdGVcIiwgXCJDbG91ZCBSdW4gRmluaXNoZWRcIik7XG4gIGNvbnNvbGUubG9nKHN1bW1hcnlUYWJsZShfc3VtbWFyeSkpO1xuICBpbmZvKFwiXHVEODNDXHVERkMxIFJlY29yZGVkIFJ1bjpcIiwgYm9sZChydW4ucnVuVXJsKSk7XG5cbiAgc3BhY2VyKCk7XG4gIGlmIChfc3VtbWFyeS5zdGF0dXMgPT09IFwiZmluaXNoZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5fc3VtbWFyeSxcbiAgICAgIHJ1blVybDogcnVuLnJ1blVybCxcbiAgICB9O1xuICB9XG4gIHJldHVybiBfc3VtbWFyeTtcbn1cbiIsICJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBtYWdlbnRhIH0gZnJvbSBcIi4uL2xvZ1wiO1xuXG5pbXBvcnQgeyBpbmZvLCBzcGFjZXIsIHdhcm4gfSBmcm9tIFwiLi4vbG9nXCI7XG5pbXBvcnQgeyBDbG91ZFdhcm5pbmcgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRXYXJuaW5ncyh3YXJuaW5nczogQ2xvdWRXYXJuaW5nW10pIHtcbiAgd2FybihcIk5vdGljZSBmcm9tIGNsb3VkIHNlcnZpY2U6XCIpO1xuICB3YXJuaW5ncy5tYXAoKHcpID0+IHtcbiAgICBzcGFjZXIoMSk7XG4gICAgaW5mbyhtYWdlbnRhLmJvbGQody5tZXNzYWdlKSk7XG4gICAgT2JqZWN0LmVudHJpZXMoXy5vbWl0KHcsIFwibWVzc2FnZVwiKSkubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGluZm8oXCItICVzOiAlc1wiLCBrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICBzcGFjZXIoMSk7XG4gIH0pO1xufVxuIiwgImltcG9ydCB7IG1ha2VSZXF1ZXN0IH0gZnJvbSBcIi4uL2h0dHBDbGllbnRcIjtcbmltcG9ydCB7XG4gIENyZWF0ZUluc3RhbmNlQ3lQYXlsb2FkLFxuICBDcmVhdGVJbnN0YW5jZVBheWxvYWQsXG4gIENyZWF0ZUluc3RhbmNlUmVzcG9uc2UsXG4gIENyZWF0ZUluc3RhbmNlc1Jlc3BvbnNlLFxuICBDcmVhdGVSdW5QYXlsb2FkLFxuICBDcmVhdGVSdW5SZXNwb25zZSxcbiAgU2V0SW5zdGFuY2VUZXN0c1BheWxvYWQsXG4gIFVwZGF0ZUluc3RhbmNlUmVzdWx0c01lcmdlZFBheWxvYWQsXG4gIFVwZGF0ZUluc3RhbmNlUmVzdWx0c1BheWxvYWQsXG4gIFVwZGF0ZUluc3RhbmNlUmVzdWx0c1Jlc3BvbnNlLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgcHJpbnRXYXJuaW5ncyB9IGZyb20gXCIuL3dhcm5pbmdzXCI7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSdW4gPSBhc3luYyAocGF5bG9hZDogQ3JlYXRlUnVuUGF5bG9hZCkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1ha2VSZXF1ZXN0PENyZWF0ZVJ1blJlc3BvbnNlLCBDcmVhdGVSdW5QYXlsb2FkPih7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICB1cmw6IFwiL3J1bnNcIixcbiAgICBkYXRhOiBwYXlsb2FkLFxuICB9KTtcblxuICBpZiAoKHJlc3BvbnNlLmRhdGEud2FybmluZ3M/Lmxlbmd0aCA/PyAwKSA+IDApIHtcbiAgICBwcmludFdhcm5pbmdzKHJlc3BvbnNlLmRhdGEud2FybmluZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlSW5zdGFuY2UgPSBhc3luYyAoe1xuICBydW5JZCxcbiAgZ3JvdXBJZCxcbiAgbWFjaGluZUlkLFxuICBwbGF0Zm9ybSxcbn06IENyZWF0ZUluc3RhbmNlUGF5bG9hZCkgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1ha2VSZXF1ZXN0PFxuICAgIENyZWF0ZUluc3RhbmNlUmVzcG9uc2UsXG4gICAgQ3JlYXRlSW5zdGFuY2VQYXlsb2FkXG4gID4oe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgcnVucy8ke3J1bklkfS9pbnN0YW5jZXNgLFxuICAgIGRhdGE6IHtcbiAgICAgIHJ1bklkLFxuICAgICAgZ3JvdXBJZCxcbiAgICAgIG1hY2hpbmVJZCxcbiAgICAgIHBsYXRmb3JtLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiByZXNwb25zZS5kYXRhO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUJhdGNoZWRJbnN0YW5jZXMgPSBhc3luYyAoZGF0YTogQ3JlYXRlSW5zdGFuY2VDeVBheWxvYWQpID0+IHtcbiAgY29uc3QgcmVzcG9uZSA9IGF3YWl0IG1ha2VSZXF1ZXN0PFxuICAgIENyZWF0ZUluc3RhbmNlc1Jlc3BvbnNlLFxuICAgIENyZWF0ZUluc3RhbmNlQ3lQYXlsb2FkXG4gID4oe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgcnVucy8ke2RhdGEucnVuSWR9L2N5L2luc3RhbmNlc2AsXG4gICAgZGF0YSxcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3BvbmUuZGF0YTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRJbnN0YW5jZVRlc3RzID0gKFxuICBpbnN0YW5jZUlkOiBzdHJpbmcsXG4gIHBheWxvYWQ6IFNldEluc3RhbmNlVGVzdHNQYXlsb2FkXG4pID0+XG4gIG1ha2VSZXF1ZXN0PHt9LCBTZXRJbnN0YW5jZVRlc3RzUGF5bG9hZD4oe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgaW5zdGFuY2VzLyR7aW5zdGFuY2VJZH0vdGVzdHNgLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pLnRoZW4oKHJlc3VsdCkgPT4gcmVzdWx0LmRhdGEpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlSW5zdGFuY2VSZXN1bHRzID0gKFxuICBpbnN0YW5jZUlkOiBzdHJpbmcsXG4gIHBheWxvYWQ6IFVwZGF0ZUluc3RhbmNlUmVzdWx0c1BheWxvYWRcbikgPT5cbiAgbWFrZVJlcXVlc3Q8VXBkYXRlSW5zdGFuY2VSZXN1bHRzUmVzcG9uc2UsIFVwZGF0ZUluc3RhbmNlUmVzdWx0c1BheWxvYWQ+KHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIHVybDogYGluc3RhbmNlcy8ke2luc3RhbmNlSWR9L3Jlc3VsdHNgLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pLnRoZW4oKHJlc3VsdCkgPT4gcmVzdWx0LmRhdGEpO1xuXG5leHBvcnQgY29uc3QgcmVwb3J0SW5zdGFuY2VSZXN1bHRzTWVyZ2VkID0gKFxuICBpbnN0YW5jZUlkOiBzdHJpbmcsXG4gIHBheWxvYWQ6IFVwZGF0ZUluc3RhbmNlUmVzdWx0c01lcmdlZFBheWxvYWRcbikgPT5cbiAgbWFrZVJlcXVlc3Q8XG4gICAgVXBkYXRlSW5zdGFuY2VSZXN1bHRzUmVzcG9uc2UsXG4gICAgVXBkYXRlSW5zdGFuY2VSZXN1bHRzTWVyZ2VkUGF5bG9hZFxuICA+KHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIHVybDogYGluc3RhbmNlcy8ke2luc3RhbmNlSWR9L2N5L3Jlc3VsdHNgLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pLnRoZW4oKHJlc3VsdCkgPT4gcmVzdWx0LmRhdGEpO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlSW5zdGFuY2VTdGRvdXQgPSAoaW5zdGFuY2VJZDogc3RyaW5nLCBzdGRvdXQ6IHN0cmluZykgPT5cbiAgbWFrZVJlcXVlc3Q8YW55LCB7IHN0ZG91dDogc3RyaW5nIH0+KHtcbiAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgdXJsOiBgaW5zdGFuY2VzLyR7aW5zdGFuY2VJZH0vc3Rkb3V0YCxcbiAgICBkYXRhOiB7XG4gICAgICBzdGRvdXQsXG4gICAgfSxcbiAgfSk7XG4iLCAiaW1wb3J0IGRlYnVnRm4gZnJvbSBcImRlYnVnXCI7XG5cbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiO1xuXG5jb25zdCBkZWJ1ZyA9IGRlYnVnRm4oXCJjdXJyZW50czpjaVwiKTtcblxuY29uc3Qgam9pbiA9IChjaGFyOiBzdHJpbmcsIC4uLnBpZWNlczogKHN0cmluZyB8IHVuZGVmaW5lZClbXSkgPT4ge1xuICByZXR1cm4gXy5jaGFpbihwaWVjZXMpLmNvbXBhY3QoKS5qb2luKGNoYXIpLnZhbHVlKCk7XG59O1xuXG5jb25zdCB0b0NhbWVsT2JqZWN0ID0gKG9iajogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICByZXR1cm4gXy5zZXQob2JqLCBfLmNhbWVsQ2FzZShrZXkpLCBwcm9jZXNzLmVudltrZXldKTtcbn07XG5cbmNvbnN0IGV4dHJhY3QgPSAoZW52S2V5czogc3RyaW5nW10pID0+IHtcbiAgcmV0dXJuIF8udHJhbnNmb3JtKGVudktleXMsIHRvQ2FtZWxPYmplY3QsIHt9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHJ1bm5pbmcgb24gVGVhbUZvdW5kYXRpb24gc2VydmVyLlxuICogQHNlZSBodHRwczovL3RlY2huZXQubWljcm9zb2Z0LmNvbS9lbi11cy9oaDg1MDQ0OCh2PXZzLjkyKVxuICovXG5jb25zdCBpc1RlYW1Gb3VuZGF0aW9uID0gKCkgPT4ge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuVEZfQlVJTEQgJiYgcHJvY2Vzcy5lbnYuVEZfQlVJTERfQlVJTEROVU1CRVI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBydW5uaW5nIG9uIEF6dXJlIENJIHBpcGVsaW5lLlxuICogU2VlIGVudmlyb25tZW50IHZhcmlhYmxlcyBpbiB0aGUgaXNzdWUgIzM2NTdcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2N5cHJlc3MtaW8vY3lwcmVzcy9pc3N1ZXMvMzY1N1xuICovXG5jb25zdCBpc0F6dXJlQ2kgPSAoKSA9PiB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5URl9CVUlMRCAmJiBwcm9jZXNzLmVudi5BWlVSRV9IVFRQX1VTRVJfQUdFTlQ7XG59O1xuXG5jb25zdCBpc0FXU0NvZGVCdWlsZCA9ICgpID0+IHtcbiAgcmV0dXJuIF8uc29tZShwcm9jZXNzLmVudiwgKHZhbCwga2V5KSA9PiB7XG4gICAgcmV0dXJuIC9eQ09ERUJVSUxEXy8udGVzdChrZXkpO1xuICB9KTtcbn07XG5cbmNvbnN0IGlzQmFtYm9vID0gKCkgPT4ge1xuICByZXR1cm4gcHJvY2Vzcy5lbnYuYmFtYm9vX2J1aWxkTnVtYmVyO1xufTtcblxuY29uc3QgaXNDb2Rlc2hpcEJhc2ljID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHByb2Nlc3MuZW52LkNJX05BTUUgJiZcbiAgICBwcm9jZXNzLmVudi5DSV9OQU1FID09PSBcImNvZGVzaGlwXCIgJiZcbiAgICBwcm9jZXNzLmVudi5DT0RFU0hJUFxuICApO1xufTtcblxuY29uc3QgaXNDb2Rlc2hpcFBybyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICBwcm9jZXNzLmVudi5DSV9OQU1FICYmXG4gICAgcHJvY2Vzcy5lbnYuQ0lfTkFNRSA9PT0gXCJjb2Rlc2hpcFwiICYmXG4gICAgIXByb2Nlc3MuZW52LkNPREVTSElQXG4gICk7XG59O1xuXG5jb25zdCBpc0NvbmNvdXJzZSA9ICgpID0+IHtcbiAgcmV0dXJuIF8uc29tZShwcm9jZXNzLmVudiwgKHZhbCwga2V5KSA9PiB7XG4gICAgcmV0dXJuIC9eQ09OQ09VUlNFXy8udGVzdChrZXkpO1xuICB9KTtcbn07XG5cbmNvbnN0IGlzR2l0bGFiID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHByb2Nlc3MuZW52LkdJVExBQl9DSSB8fFxuICAgIChwcm9jZXNzLmVudi5DSV9TRVJWRVJfTkFNRSAmJiAvXkdpdExhYi8udGVzdChwcm9jZXNzLmVudi5DSV9TRVJWRVJfTkFNRSkpXG4gICk7XG59O1xuXG5jb25zdCBpc0dvb2dsZUNsb3VkID0gKCkgPT4ge1xuICAvLyBzZXQgYXV0b21hdGljYWxseSBmb3IgdGhlIE5vZGUuanMgNiwgTm9kZS5qcyA4IHJ1bnRpbWVzIChub3QgaW4gTm9kZSAxMClcbiAgLy8gVE9ETzogbWF5IGFsc28gcG90ZW50aWFsbHkgaGF2ZSBYX0dPT0dMRV8qIGVudiB2YXIgc2V0XG4gIC8vIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9mdW5jdGlvbnMvZG9jcy9lbnYtdmFyI2Vudmlyb25tZW50X3ZhcmlhYmxlc19zZXRfYXV0b21hdGljYWxseVxuICByZXR1cm4gKFxuICAgIHByb2Nlc3MuZW52LkdDUF9QUk9KRUNUIHx8XG4gICAgcHJvY2Vzcy5lbnYuR0NMT1VEX1BST0pFQ1QgfHxcbiAgICBwcm9jZXNzLmVudi5HT09HTEVfQ0xPVURfUFJPSkVDVFxuICApO1xufTtcblxuY29uc3QgaXNKZW5raW5zID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHByb2Nlc3MuZW52LkpFTktJTlNfVVJMIHx8XG4gICAgcHJvY2Vzcy5lbnYuSkVOS0lOU19IT01FIHx8XG4gICAgcHJvY2Vzcy5lbnYuSkVOS0lOU19WRVJTSU9OIHx8XG4gICAgcHJvY2Vzcy5lbnYuSFVEU09OX1VSTCB8fFxuICAgIHByb2Nlc3MuZW52LkhVRFNPTl9IT01FXG4gICk7XG59O1xuXG5jb25zdCBpc1dlcmNrZXIgPSAoKSA9PiB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5XRVJDS0VSIHx8IHByb2Nlc3MuZW52LldFUkNLRVJfTUFJTl9QSVBFTElORV9TVEFSVEVEO1xufTtcblxuLyoqXG4gKiBXZSBkZXRlY3QgQ0kgcHJvdmlkZXJzIGJ5IGRldGVjdGluZyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICogdW5pcXVlIHRvIHRoZSBwcm92aWRlciwgb3IgYnkgY2FsbGluZyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0cnVlXG4gKiBmb3IgdGhhdCBwcm92aWRlci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgQXBwVmV5b3IgQ0kgaGFzIGVudmlyb25tZW50IHRoZVxuICogdmFyaWFibGUgXCJBUFBWRVlPUlwiIHNldCBkdXJpbmcgcnVuXG4gKi9cbmNvbnN0IENJX1BST1ZJREVSUyA9IHtcbiAgYXBwdmV5b3I6IFwiQVBQVkVZT1JcIixcbiAgYXp1cmU6IGlzQXp1cmVDaSxcbiAgYXdzQ29kZUJ1aWxkOiBpc0FXU0NvZGVCdWlsZCxcbiAgYmFtYm9vOiBpc0JhbWJvbyxcbiAgYml0YnVja2V0OiBcIkJJVEJVQ0tFVF9CVUlMRF9OVU1CRVJcIixcbiAgYnVpbGRraXRlOiBcIkJVSUxES0lURVwiLFxuICBjaXJjbGU6IFwiQ0lSQ0xFQ0lcIixcbiAgY29kZXNoaXBCYXNpYzogaXNDb2Rlc2hpcEJhc2ljLFxuICBjb2Rlc2hpcFBybzogaXNDb2Rlc2hpcFBybyxcbiAgY29uY291cnNlOiBpc0NvbmNvdXJzZSxcbiAgY29kZUZyZXNoOiBcIkNGX0JVSUxEX0lEXCIsXG4gIGRyb25lOiBcIkRST05FXCIsXG4gIGdpdGh1YkFjdGlvbnM6IFwiR0lUSFVCX0FDVElPTlNcIixcbiAgZ2l0bGFiOiBpc0dpdGxhYixcbiAgZ29DRDogXCJHT19KT0JfTkFNRVwiLFxuICBnb29nbGVDbG91ZDogaXNHb29nbGVDbG91ZCxcbiAgamVua2luczogaXNKZW5raW5zLFxuICBzZW1hcGhvcmU6IFwiU0VNQVBIT1JFXCIsXG4gIHNoaXBwYWJsZTogXCJTSElQUEFCTEVcIixcbiAgdGVhbWNpdHk6IFwiVEVBTUNJVFlfVkVSU0lPTlwiLFxuICB0ZWFtZm91bmRhdGlvbjogaXNUZWFtRm91bmRhdGlvbixcbiAgdHJhdmlzOiBcIlRSQVZJU1wiLFxuICB3ZXJja2VyOiBpc1dlcmNrZXIsXG4gIG5ldGxpZnk6IFwiTkVUTElGWVwiLFxuICBsYXllcmNpOiBcIkxBWUVSQ0lcIixcbn07XG5cbmZ1bmN0aW9uIF9kZXRlY3RQcm92aWRlck5hbWUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgeyBlbnYgfSA9IHByb2Nlc3M7XG4gIC8vIHJldHVybiB0aGUga2V5IG9mIHRoZSBmaXJzdCBwcm92aWRlclxuICAvLyB3aGljaCBpcyB0cnV0aHlcblxuICByZXR1cm4gXy5maW5kS2V5KENJX1BST1ZJREVSUywgKHZhbHVlKSA9PiB7XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZW52W3ZhbHVlXTtcbiAgICB9XG5cbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gVE9ETzogZG9uJ3QgZm9yIGFib3V0IGJ1aWxkTnVtYmVyIVxuLy8gbG9vayBhdCB0aGUgb2xkIGNvbW1pdCB0aGF0IHdhcyByZW1vdmVkIHRvIHNlZSBob3cgd2UgZGlkIGl0XG5jb25zdCBfcHJvdmlkZXJDaVBhcmFtcyA9ICgpOiBQcm92aWRlckNpUGFyYW1zUmVzID0+IHtcbiAgcmV0dXJuIHtcbiAgICBhcHB2ZXlvcjogZXh0cmFjdChbXG4gICAgICBcIkFQUFZFWU9SX0pPQl9JRFwiLFxuICAgICAgXCJBUFBWRVlPUl9BQ0NPVU5UX05BTUVcIixcbiAgICAgIFwiQVBQVkVZT1JfUFJPSkVDVF9TTFVHXCIsXG4gICAgICBcIkFQUFZFWU9SX0JVSUxEX05VTUJFUlwiLFxuICAgICAgXCJBUFBWRVlPUl9CVUlMRF9WRVJTSU9OXCIsXG4gICAgICBcIkFQUFZFWU9SX1BVTExfUkVRVUVTVF9OVU1CRVJcIixcbiAgICAgIFwiQVBQVkVZT1JfUFVMTF9SRVFVRVNUX0hFQURfUkVQT19CUkFOQ0hcIixcbiAgICBdKSxcbiAgICBhenVyZTogZXh0cmFjdChbXG4gICAgICBcIkJVSUxEX0JVSUxESURcIixcbiAgICAgIFwiQlVJTERfQlVJTEROVU1CRVJcIixcbiAgICAgIFwiQlVJTERfQ09OVEFJTkVSSURcIixcbiAgICAgIFwiQlVJTERfUkVQT1NJVE9SWV9VUklcIixcbiAgICBdKSxcbiAgICBhd3NDb2RlQnVpbGQ6IGV4dHJhY3QoW1xuICAgICAgXCJDT0RFQlVJTERfQlVJTERfSURcIixcbiAgICAgIFwiQ09ERUJVSUxEX0JVSUxEX05VTUJFUlwiLFxuICAgICAgXCJDT0RFQlVJTERfUkVTT0xWRURfU09VUkNFX1ZFUlNJT05cIixcbiAgICAgIFwiQ09ERUJVSUxEX1NPVVJDRV9SRVBPX1VSTFwiLFxuICAgICAgXCJDT0RFQlVJTERfU09VUkNFX1ZFUlNJT05cIixcbiAgICBdKSxcbiAgICBiYW1ib286IGV4dHJhY3QoW1xuICAgICAgXCJiYW1ib29fYnVpbGROdW1iZXJcIixcbiAgICAgIFwiYmFtYm9vX2J1aWxkUmVzdWx0c1VybFwiLFxuICAgICAgXCJiYW1ib29fcGxhblJlcG9zaXRvcnlfcmVwb3NpdG9yeVVybFwiLFxuICAgICAgXCJiYW1ib29fYnVpbGRLZXlcIixcbiAgICBdKSxcbiAgICBiaXRidWNrZXQ6IGV4dHJhY3QoW1xuICAgICAgXCJCSVRCVUNLRVRfUkVQT19TTFVHXCIsXG4gICAgICBcIkJJVEJVQ0tFVF9SRVBPX09XTkVSXCIsXG4gICAgICBcIkJJVEJVQ0tFVF9CVUlMRF9OVU1CRVJcIixcbiAgICAgIFwiQklUQlVDS0VUX1BBUkFMTEVMX1NURVBcIixcbiAgICAgIFwiQklUQlVDS0VUX1NURVBfUlVOX05VTUJFUlwiLFxuICAgICAgLy8gdGhlIFBSIHZhcmlhYmxlcyBhcmUgb25seSBzZXQgb24gcHVsbCByZXF1ZXN0IGJ1aWxkc1xuICAgICAgXCJCSVRCVUNLRVRfUFJfSURcIixcbiAgICAgIFwiQklUQlVDS0VUX1BSX0RFU1RJTkFUSU9OX0JSQU5DSFwiLFxuICAgICAgXCJCSVRCVUNLRVRfUFJfREVTVElOQVRJT05fQ09NTUlUXCIsXG4gICAgXSksXG4gICAgYnVpbGRraXRlOiBleHRyYWN0KFtcbiAgICAgIFwiQlVJTERLSVRFX1JFUE9cIixcbiAgICAgIFwiQlVJTERLSVRFX1NPVVJDRVwiLFxuICAgICAgXCJCVUlMREtJVEVfSk9CX0lEXCIsXG4gICAgICBcIkJVSUxES0lURV9CVUlMRF9JRFwiLFxuICAgICAgXCJCVUlMREtJVEVfQlVJTERfVVJMXCIsXG4gICAgICBcIkJVSUxES0lURV9CVUlMRF9OVU1CRVJcIixcbiAgICAgIFwiQlVJTERLSVRFX1BVTExfUkVRVUVTVFwiLFxuICAgICAgXCJCVUlMREtJVEVfUFVMTF9SRVFVRVNUX1JFUE9cIixcbiAgICAgIFwiQlVJTERLSVRFX1BVTExfUkVRVUVTVF9CQVNFX0JSQU5DSFwiLFxuICAgIF0pLFxuICAgIGNpcmNsZTogZXh0cmFjdChbXG4gICAgICBcIkNJUkNMRV9KT0JcIixcbiAgICAgIFwiQ0lSQ0xFX0JVSUxEX05VTVwiLFxuICAgICAgXCJDSVJDTEVfQlVJTERfVVJMXCIsXG4gICAgICBcIkNJUkNMRV9QUl9OVU1CRVJcIixcbiAgICAgIFwiQ0lSQ0xFX1BSX1JFUE9OQU1FXCIsXG4gICAgICBcIkNJUkNMRV9QUl9VU0VSTkFNRVwiLFxuICAgICAgXCJDSVJDTEVfQ09NUEFSRV9VUkxcIixcbiAgICAgIFwiQ0lSQ0xFX1dPUktGTE9XX0lEXCIsXG4gICAgICBcIkNJUkNMRV9QVUxMX1JFUVVFU1RcIixcbiAgICAgIFwiQ0lSQ0xFX1JFUE9TSVRPUllfVVJMXCIsXG4gICAgICBcIkNJX1BVTExfUkVRVUVTVFwiLFxuICAgIF0pLFxuICAgIGNvZGVzaGlwQmFzaWM6IGV4dHJhY3QoW1xuICAgICAgXCJDSV9CVUlMRF9JRFwiLFxuICAgICAgXCJDSV9SRVBPX05BTUVcIixcbiAgICAgIFwiQ0lfQlVJTERfVVJMXCIsXG4gICAgICBcIkNJX1BST0pFQ1RfSURcIixcbiAgICAgIFwiQ0lfQlVJTERfTlVNQkVSXCIsXG4gICAgICBcIkNJX1BVTExfUkVRVUVTVFwiLFxuICAgIF0pLFxuICAgIC8vIENvZGVzaGlwUHJvIHByb3ZpZGVzIHZlcnkgZmV3IENJIHZhcmlhYmxlc1xuICAgIC8vIGh0dHBzOi8vZG9jdW1lbnRhdGlvbi5jb2Rlc2hpcC5jb20vcHJvL2J1aWxkcy1hbmQtY29uZmlndXJhdGlvbi9lbnZpcm9ubWVudC12YXJpYWJsZXMvXG4gICAgY29kZXNoaXBQcm86IGV4dHJhY3QoW1wiQ0lfQlVJTERfSURcIiwgXCJDSV9SRVBPX05BTUVcIiwgXCJDSV9QUk9KRUNUX0lEXCJdKSxcbiAgICAvLyBodHRwczovL2NvbmNvdXJzZS1jaS5vcmcvaW1wbGVtZW50aW5nLXJlc291cmNlLXR5cGVzLmh0bWwjcmVzb3VyY2UtbWV0YWRhdGFcbiAgICBjb25jb3Vyc2U6IGV4dHJhY3QoW1xuICAgICAgXCJCVUlMRF9JRFwiLFxuICAgICAgXCJCVUlMRF9OQU1FXCIsXG4gICAgICBcIkJVSUxEX0pPQl9OQU1FXCIsXG4gICAgICBcIkJVSUxEX1BJUEVMSU5FX05BTUVcIixcbiAgICAgIFwiQlVJTERfVEVBTV9OQU1FXCIsXG4gICAgICBcIkFUQ19FWFRFUk5BTF9VUkxcIixcbiAgICBdKSxcbiAgICAvLyBodHRwczovL2NvZGVmcmVzaC5pby9kb2NzL2RvY3MvY29kZWZyZXNoLXlhbWwvdmFyaWFibGVzL1xuICAgIGNvZGVGcmVzaDogZXh0cmFjdChbXG4gICAgICBcIkNGX0JVSUxEX0lEXCIsXG4gICAgICBcIkNGX0JVSUxEX1VSTFwiLFxuICAgICAgXCJDRl9DVVJSRU5UX0FUVEVNUFRcIixcbiAgICAgIFwiQ0ZfU1RFUF9OQU1FXCIsXG4gICAgICBcIkNGX1BJUEVMSU5FX05BTUVcIixcbiAgICAgIFwiQ0ZfUElQRUxJTkVfVFJJR0dFUl9JRFwiLFxuICAgICAgLy8gdmFyaWFibGVzIGFkZGVkIGZvciBwdWxsIHJlcXVlc3RzXG4gICAgICBcIkNGX1BVTExfUkVRVUVTVF9JRFwiLFxuICAgICAgXCJDRl9QVUxMX1JFUVVFU1RfSVNfRk9SS1wiLFxuICAgICAgXCJDRl9QVUxMX1JFUVVFU1RfTlVNQkVSXCIsXG4gICAgICBcIkNGX1BVTExfUkVRVUVTVF9UQVJHRVRcIixcbiAgICBdKSxcbiAgICBkcm9uZTogZXh0cmFjdChbXG4gICAgICBcIkRST05FX0pPQl9OVU1CRVJcIixcbiAgICAgIFwiRFJPTkVfQlVJTERfTElOS1wiLFxuICAgICAgXCJEUk9ORV9CVUlMRF9OVU1CRVJcIixcbiAgICAgIFwiRFJPTkVfUFVMTF9SRVFVRVNUXCIsXG4gICAgXSksXG4gICAgLy8gaHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9hdXRvbWF0aW5nLXlvdXItd29ya2Zsb3ctd2l0aC1naXRodWItYWN0aW9ucy91c2luZy1lbnZpcm9ubWVudC12YXJpYWJsZXMjZGVmYXVsdC1lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICBnaXRodWJBY3Rpb25zOiBleHRyYWN0KFtcbiAgICAgIFwiR0lUSFVCX1dPUktGTE9XXCIsXG4gICAgICBcIkdJVEhVQl9BQ1RJT05cIixcbiAgICAgIFwiR0lUSFVCX0VWRU5UX05BTUVcIixcbiAgICAgIFwiR0lUSFVCX1JVTl9JRFwiLFxuICAgICAgXCJHSVRIVUJfUlVOX0FUVEVNUFRcIixcbiAgICAgIFwiR0lUSFVCX1JFUE9TSVRPUllcIixcbiAgICBdKSxcbiAgICAvLyBzZWUgaHR0cHM6Ly9kb2NzLmdpdGxhYi5jb20vZWUvY2kvdmFyaWFibGVzL1xuICAgIGdpdGxhYjogZXh0cmFjdChbXG4gICAgICAvLyBwaXBlbGluZSBpcyBjb21tb24gYW1vbmcgYWxsIGpvYnNcbiAgICAgIFwiQ0lfUElQRUxJTkVfSURcIixcbiAgICAgIFwiQ0lfUElQRUxJTkVfVVJMXCIsXG4gICAgICAvLyBpbmRpdmlkdWFsIGpvYnNcbiAgICAgIFwiQ0lfQlVJTERfSURcIiwgLy8gYnVpbGQgaWQgYW5kIGpvYiBpZCBhcmUgYWxpYXNlc1xuICAgICAgXCJDSV9KT0JfSURcIixcbiAgICAgIFwiQ0lfSk9CX1VSTFwiLFxuICAgICAgXCJDSV9KT0JfTkFNRVwiLFxuICAgICAgLy8gb3RoZXIgaW5mb3JtYXRpb25cbiAgICAgIFwiR0lUTEFCX0hPU1RcIixcbiAgICAgIFwiQ0lfUFJPSkVDVF9JRFwiLFxuICAgICAgXCJDSV9QUk9KRUNUX1VSTFwiLFxuICAgICAgXCJDSV9SRVBPU0lUT1JZX1VSTFwiLFxuICAgICAgXCJDSV9FTlZJUk9OTUVOVF9VUkxcIixcbiAgICAgIFwiQ0lfREVGQVVMVF9CUkFOQ0hcIixcbiAgICAgIC8vIGZvciBQUnM6IGh0dHBzOi8vZ2l0bGFiLmNvbS9naXRsYWItb3JnL2dpdGxhYi1jZS9pc3N1ZXMvMjM5MDJcbiAgICBdKSxcbiAgICAvLyBodHRwczovL2RvY3MuZ29jZC5vcmcvY3VycmVudC9mYXEvZGV2X3VzZV9jdXJyZW50X3JldmlzaW9uX2luX2J1aWxkLmh0bWwjc3RhbmRhcmQtZ29jZC1lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICBnb0NEOiBleHRyYWN0KFtcbiAgICAgIFwiR09fU0VSVkVSX1VSTFwiLFxuICAgICAgXCJHT19FTlZJUk9OTUVOVF9OQU1FXCIsXG4gICAgICBcIkdPX1BJUEVMSU5FX05BTUVcIixcbiAgICAgIFwiR09fUElQRUxJTkVfQ09VTlRFUlwiLFxuICAgICAgXCJHT19QSVBFTElORV9MQUJFTFwiLFxuICAgICAgXCJHT19TVEFHRV9OQU1FXCIsXG4gICAgICBcIkdPX1NUQUdFX0NPVU5URVJcIixcbiAgICAgIFwiR09fSk9CX05BTUVcIixcbiAgICAgIFwiR09fVFJJR0dFUl9VU0VSXCIsXG4gICAgICBcIkdPX1JFVklTSU9OXCIsXG4gICAgICBcIkdPX1RPX1JFVklTSU9OXCIsXG4gICAgICBcIkdPX0ZST01fUkVWSVNJT05cIixcbiAgICAgIFwiR09fTUFURVJJQUxfSEFTX0NIQU5HRURcIixcbiAgICBdKSxcbiAgICBnb29nbGVDbG91ZDogZXh0cmFjdChbXG4gICAgICAvLyBpbmRpdmlkdWFsIGpvYnNcbiAgICAgIFwiQlVJTERfSURcIixcbiAgICAgIFwiUFJPSkVDVF9JRFwiLFxuICAgICAgLy8gb3RoZXIgaW5mb3JtYXRpb25cbiAgICAgIFwiUkVQT19OQU1FXCIsXG4gICAgICBcIkJSQU5DSF9OQU1FXCIsXG4gICAgICBcIlRBR19OQU1FXCIsXG4gICAgICBcIkNPTU1JVF9TSEFcIixcbiAgICAgIFwiU0hPUlRfU0hBXCIsXG4gICAgICAvLyBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vY2xvdWQtYnVpbGQvZG9jcy9hcGkvcmVmZXJlbmNlL3Jlc3QvU2hhcmVkLlR5cGVzL0J1aWxkXG4gICAgXSksXG4gICAgamVua2luczogZXh0cmFjdChbXCJCVUlMRF9JRFwiLCBcIkJVSUxEX1VSTFwiLCBcIkJVSUxEX05VTUJFUlwiLCBcImdocHJiUHVsbElkXCJdKSxcbiAgICAvLyBodHRwczovL3NlbWFwaG9yZWNpLmNvbS9kb2NzL2F2YWlsYWJsZS1lbnZpcm9ubWVudC12YXJpYWJsZXMuaHRtbFxuICAgIC8vIHNvbWUgY29tZSBmcm9tIHYxLCBzb21lIGZyb20gdjIgb2Ygc2VtYXBob3JlXG4gICAgc2VtYXBob3JlOiBleHRyYWN0KFtcbiAgICAgIFwiU0VNQVBIT1JFX0JSQU5DSF9JRFwiLFxuICAgICAgXCJTRU1BUEhPUkVfQlVJTERfTlVNQkVSXCIsXG4gICAgICBcIlNFTUFQSE9SRV9DVVJSRU5UX0pPQlwiLFxuICAgICAgXCJTRU1BUEhPUkVfQ1VSUkVOVF9USFJFQURcIixcbiAgICAgIFwiU0VNQVBIT1JFX0VYRUNVVEFCTEVfVVVJRFwiLFxuICAgICAgXCJTRU1BUEhPUkVfR0lUX0JSQU5DSFwiLFxuICAgICAgXCJTRU1BUEhPUkVfR0lUX0RJUlwiLFxuICAgICAgXCJTRU1BUEhPUkVfR0lUX1JFRlwiLFxuICAgICAgXCJTRU1BUEhPUkVfR0lUX1JFRl9UWVBFXCIsXG4gICAgICBcIlNFTUFQSE9SRV9HSVRfUkVQT19TTFVHXCIsXG4gICAgICBcIlNFTUFQSE9SRV9HSVRfU0hBXCIsXG4gICAgICBcIlNFTUFQSE9SRV9HSVRfVVJMXCIsXG4gICAgICBcIlNFTUFQSE9SRV9KT0JfQ09VTlRcIixcbiAgICAgIFwiU0VNQVBIT1JFX0pPQl9JRFwiLCAvLyB2MlxuICAgICAgXCJTRU1BUEhPUkVfSk9CX05BTUVcIixcbiAgICAgIFwiU0VNQVBIT1JFX0pPQl9VVUlEXCIsIC8vIHYxXG4gICAgICBcIlNFTUFQSE9SRV9QSVBFTElORV9JRFwiLFxuICAgICAgXCJTRU1BUEhPUkVfUExBVEZPUk1cIixcbiAgICAgIFwiU0VNQVBIT1JFX1BST0pFQ1RfRElSXCIsXG4gICAgICBcIlNFTUFQSE9SRV9QUk9KRUNUX0hBU0hfSURcIixcbiAgICAgIFwiU0VNQVBIT1JFX1BST0pFQ1RfSURcIiwgLy8gdjJcbiAgICAgIFwiU0VNQVBIT1JFX1BST0pFQ1RfTkFNRVwiLFxuICAgICAgXCJTRU1BUEhPUkVfUFJPSkVDVF9VVUlEXCIsIC8vIHYxXG4gICAgICBcIlNFTUFQSE9SRV9SRVBPX1NMVUdcIixcbiAgICAgIFwiU0VNQVBIT1JFX1RSSUdHRVJfU09VUkNFXCIsXG4gICAgICBcIlNFTUFQSE9SRV9XT1JLRkxPV19JRFwiLFxuICAgICAgXCJQVUxMX1JFUVVFU1RfTlVNQkVSXCIsIC8vIHB1bGwgcmVxdWVzdHMgZnJvbSBmb3JrcyBPTkxZXG4gICAgXSksXG4gICAgLy8gc2VlIGh0dHA6Ly9kb2NzLnNoaXBwYWJsZS5jb20vY2kvZW52LXZhcnMvXG4gICAgc2hpcHBhYmxlOiBleHRyYWN0KFtcbiAgICAgIC8vIGJ1aWxkIHZhcmlhYmxlc1xuICAgICAgXCJTSElQUEFCTEVfQlVJTERfSURcIiwgLy8gXCI1YjkzMzU0Y2FiZmFiYjA3MDA3ZjAxZmRcIlxuICAgICAgXCJTSElQUEFCTEVfQlVJTERfTlVNQkVSXCIsIC8vIFwiNFwiXG4gICAgICBcIlNISVBQQUJMRV9DT01NSVRfUkFOR0VcIiwgLy8gXCJzaGExLi4uc2hhMlwiXG4gICAgICBcIlNISVBQQUJMRV9DT05UQUlORVJfTkFNRVwiLCAvLyBcImMuZXhlYy5jeXByZXNzLWV4YW1wbGUta2l0Y2hlbnNpbmsuNC4xXCJcbiAgICAgIFwiU0hJUFBBQkxFX0pPQl9JRFwiLCAvLyBcIjFcIlxuICAgICAgXCJTSElQUEFCTEVfSk9CX05VTUJFUlwiLCAvLyBcIjFcIlxuICAgICAgXCJTSElQUEFCTEVfUkVQT19TTFVHXCIsIC8vIFwiPHVzZXJuYW1lPi88cmVwbz5cIlxuICAgICAgLy8gYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0aGF0IFNoaXBwYWJsZSBwcm92aWRlc1xuICAgICAgXCJJU19GT1JLXCIsIC8vIFwidHJ1ZVwiXG4gICAgICBcIklTX0dJVF9UQUdcIiwgLy8gXCJmYWxzZVwiXG4gICAgICBcIklTX1BSRVJFTEVBU0VcIiwgLy8gXCJmYWxzZVwiXG4gICAgICBcIklTX1JFTEVBU0VcIiwgLy8gXCJmYWxzZVwiXG4gICAgICBcIlJFUE9TSVRPUllfVVJMXCIsIC8vIFwiaHR0cHM6Ly9naXRodWIuY29tLy4uLi5naXRcIlxuICAgICAgXCJSRVBPX0ZVTExfTkFNRVwiLCAvLyBcIjx1c2VybmFtZT4vPHJlcG8+XCJcbiAgICAgIFwiUkVQT19OQU1FXCIsIC8vIFwiY3lwcmVzcy1leGFtcGxlLWtpdGNoZW5zaW5rXCJcbiAgICAgIFwiQlVJTERfVVJMXCIsIC8vIFwiaHR0cHM6Ly9hcHAuc2hpcHBhYmxlLmNvbS9naXRodWIvPHVzZXJuYW1lPi88cmVwbz4vcnVucy8xXCJcbiAgICAgIC8vIFB1bGwgcmVxdWVzdCBpbmZvcm1hdGlvblxuICAgICAgXCJCQVNFX0JSQU5DSFwiLCAvLyBOYW1lIG9mIHRoZSB0YXJnZXQgYnJhbmNoIGludG8gd2hpY2ggdGhlIHB1bGwgcmVxdWVzdCBjaGFuZ2VzIHdpbGwgYmUgbWVyZ2VkLlxuICAgICAgXCJIRUFEX0JSQU5DSFwiLCAvLyBUaGlzIGlzIG9ubHkgc2V0IGZvciBwdWxsIHJlcXVlc3RzIGFuZCBpcyB0aGUgbmFtZSBvZiB0aGUgYnJhbmNoIHRoZSBwdWxsIHJlcXVlc3Qgd2FzIG9wZW5lZCBmcm9tLlxuICAgICAgXCJJU19QVUxMX1JFUVVFU1RcIiwgLy8gXCJmYWxzZVwiIG9yIFwidHJ1ZVwiXG4gICAgICBcIlBVTExfUkVRVUVTVFwiLCAvLyBQdWxsIHJlcXVlc3QgbnVtYmVyIGlmIHRoZSBqb2IgaXMgYSBwdWxsIHJlcXVlc3QuIElmIG5vdCwgdGhpcyB3aWxsIGJlIHNldCB0byBmYWxzZS5cbiAgICAgIFwiUFVMTF9SRVFVRVNUX0JBU0VfQlJBTkNIXCIsIC8vIE5hbWUgb2YgdGhlIGJyYW5jaCB0aGF0IHRoZSBwdWxsIHJlcXVlc3Qgd2lsbCBiZSBtZXJnZWQgaW50by4gSXQgc2hvdWxkIGJlIHRoZSBzYW1lIGFzIEJBU0VfQlJBTkNILlxuICAgICAgXCJQVUxMX1JFUVVFU1RfUkVQT19GVUxMX05BTUVcIiwgLy8gRnVsbCBuYW1lIG9mIHRoZSByZXBvc2l0b3J5IGZyb20gd2hlcmUgdGhlIHB1bGwgcmVxdWVzdCBvcmlnaW5hdGVkLlxuICAgIF0pLFxuICAgIHRlYW1jaXR5OiBudWxsLFxuICAgIHRlYW1mb3VuZGF0aW9uOiBleHRyYWN0KFtcbiAgICAgIFwiQlVJTERfQlVJTERJRFwiLFxuICAgICAgXCJCVUlMRF9CVUlMRE5VTUJFUlwiLFxuICAgICAgXCJCVUlMRF9DT05UQUlORVJJRFwiLFxuICAgIF0pLFxuICAgIHRyYXZpczogZXh0cmFjdChbXG4gICAgICBcIlRSQVZJU19KT0JfSURcIixcbiAgICAgIFwiVFJBVklTX0JVSUxEX0lEXCIsXG4gICAgICBcIlRSQVZJU19CVUlMRF9XRUJfVVJMXCIsXG4gICAgICBcIlRSQVZJU19SRVBPX1NMVUdcIixcbiAgICAgIFwiVFJBVklTX0pPQl9OVU1CRVJcIixcbiAgICAgIFwiVFJBVklTX0VWRU5UX1RZUEVcIixcbiAgICAgIFwiVFJBVklTX0NPTU1JVF9SQU5HRVwiLFxuICAgICAgXCJUUkFWSVNfQlVJTERfTlVNQkVSXCIsXG4gICAgICBcIlRSQVZJU19QVUxMX1JFUVVFU1RcIixcbiAgICAgIFwiVFJBVklTX1BVTExfUkVRVUVTVF9CUkFOQ0hcIixcbiAgICAgIFwiVFJBVklTX1BVTExfUkVRVUVTVF9TSEFcIixcbiAgICBdKSxcbiAgICB3ZXJja2VyOiBudWxsLFxuICAgIC8vIGh0dHBzOi8vZG9jcy5uZXRsaWZ5LmNvbS9jb25maWd1cmUtYnVpbGRzL2Vudmlyb25tZW50LXZhcmlhYmxlcy8jZGVwbG95LXVybHMtYW5kLW1ldGFkYXRhXG4gICAgbmV0bGlmeTogZXh0cmFjdChbXG4gICAgICBcIkJVSUxEX0lEXCIsXG4gICAgICBcIkNPTlRFWFRcIixcbiAgICAgIFwiVVJMXCIsXG4gICAgICBcIkRFUExPWV9VUkxcIixcbiAgICAgIFwiREVQTE9ZX1BSSU1FX1VSTFwiLFxuICAgICAgXCJERVBMT1lfSURcIixcbiAgICBdKSxcbiAgICAvLyBodHRwczovL2xheWVyY2kuY29tL2RvY3MvbGF5ZXJmaWxlLXJlZmVyZW5jZS9idWlsZC1lbnZcbiAgICBsYXllcmNpOiBleHRyYWN0KFtcbiAgICAgIFwiTEFZRVJDSV9KT0JfSURcIixcbiAgICAgIFwiTEFZRVJDSV9SVU5ORVJfSURcIixcbiAgICAgIFwiUkVUUllfSU5ERVhcIixcbiAgICAgIFwiTEFZRVJDSV9QVUxMX1JFUVVFU1RcIixcbiAgICAgIFwiTEFZRVJDSV9SRVBPX05BTUVcIixcbiAgICAgIFwiTEFZRVJDSV9SRVBPX09XTkVSXCIsXG4gICAgICBcIkxBWUVSQ0lfQlJBTkNIXCIsXG4gICAgICBcIkdJVF9UQUdcIiwgLy8gc2hvcnQgaGV4IGZvciBjb21taXRzXG4gICAgXSksXG4gIH07XG59O1xuXG4vLyB0cmllcyB0byBncmFiIGNvbW1pdCBpbmZvcm1hdGlvbiBmcm9tIENJIGVudmlyb25tZW50IHZhcmlhYmxlc1xuLy8gdmVyeSB1c2VmdWwgdG8gZmlsbCBtaXNzaW5nIGluZm9ybWF0aW9uIHdoZW4gR2l0IGNhbm5vdCBncmFiIGNvcnJlY3QgdmFsdWVzXG5jb25zdCBfcHJvdmlkZXJDb21taXRQYXJhbXMgPSAoKTogUHJvdmlkZXJDb21taXRQYXJhbXNSZXMgPT4ge1xuICBjb25zdCB7IGVudiB9ID0gcHJvY2VzcztcblxuICByZXR1cm4ge1xuICAgIGFwcHZleW9yOiB7XG4gICAgICBzaGE6IGVudi5BUFBWRVlPUl9SRVBPX0NPTU1JVCxcbiAgICAgIC8vIHNpbmNlIEFQUFZFWU9SX1JFUE9fQlJBTkNIIHdpbGwgYmUgdGhlIHRhcmdldCBicmFuY2ggb24gYSBQUlxuICAgICAgLy8gd2UgbmVlZCB0byB1c2UgUFVMTF9SRVFVRVNUX0hFQURfUkVQT19CUkFOQ0ggaWYgaXQgZXhpc3RzLlxuICAgICAgLy8gZS5nLiBpZiB5b3UgaGF2ZSBhIFBSOiBkZXZlbG9wIDwtIG15LWZlYXR1cmUtYnJhbmNoXG4gICAgICAvLyBteS1mZWF0dXJlLWJyYW5jaCBpcyBBUFBWRVlPUl9QVUxMX1JFUVVFU1RfSEVBRF9SRVBPX0JSQU5DSFxuICAgICAgLy8gZGV2ZWxvcCAgICAgICAgICAgaXMgQVBQVkVZT1JfUkVQT19CUkFOQ0hcbiAgICAgIGJyYW5jaDpcbiAgICAgICAgZW52LkFQUFZFWU9SX1BVTExfUkVRVUVTVF9IRUFEX1JFUE9fQlJBTkNIIHx8IGVudi5BUFBWRVlPUl9SRVBPX0JSQU5DSCxcbiAgICAgIG1lc3NhZ2U6IGpvaW4oXG4gICAgICAgIFwiXFxuXCIsXG4gICAgICAgIGVudi5BUFBWRVlPUl9SRVBPX0NPTU1JVF9NRVNTQUdFLFxuICAgICAgICBlbnYuQVBQVkVZT1JfUkVQT19DT01NSVRfTUVTU0FHRV9FWFRFTkRFRFxuICAgICAgKSxcbiAgICAgIGF1dGhvck5hbWU6IGVudi5BUFBWRVlPUl9SRVBPX0NPTU1JVF9BVVRIT1IsXG4gICAgICBhdXRob3JFbWFpbDogZW52LkFQUFZFWU9SX1JFUE9fQ09NTUlUX0FVVEhPUl9FTUFJTCxcbiAgICAgIC8vIHJlbW90ZU9yaWdpbjogPz8/XG4gICAgICAvLyBkZWZhdWx0QnJhbmNoOiA/Pz9cbiAgICB9LFxuICAgIGF3c0NvZGVCdWlsZDoge1xuICAgICAgc2hhOiBlbnYuQ09ERUJVSUxEX1JFU09MVkVEX1NPVVJDRV9WRVJTSU9OLFxuICAgICAgLy8gYnJhbmNoOiA/Pz8sXG4gICAgICAvLyBtZXNzYWdlOiA/Pz9cbiAgICAgIC8vIGF1dGhvck5hbWU6ID8/P1xuICAgICAgLy8gYXV0aG9yRW1haWw6ID8/P1xuICAgICAgcmVtb3RlT3JpZ2luOiBlbnYuQ09ERUJVSUxEX1NPVVJDRV9SRVBPX1VSTCxcbiAgICAgIC8vIGRlZmF1bHRCcmFuY2g6ID8/P1xuICAgIH0sXG4gICAgYXp1cmU6IHtcbiAgICAgIHNoYTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT04sXG4gICAgICBicmFuY2g6IGVudi5CVUlMRF9TT1VSQ0VCUkFOQ0hOQU1FLFxuICAgICAgbWVzc2FnZTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT05NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT05BVVRIT1IsXG4gICAgICBhdXRob3JFbWFpbDogZW52LkJVSUxEX1JFUVVFU1RFREZPUkVNQUlMLFxuICAgIH0sXG4gICAgYmFtYm9vOiB7XG4gICAgICBzaGE6IGVudi5iYW1ib29fcGxhblJlcG9zaXRvcnlfcmV2aXNpb24sXG4gICAgICBicmFuY2g6IGVudi5iYW1ib29fcGxhblJlcG9zaXRvcnlfYnJhbmNoLFxuICAgICAgLy8gbWVzc2FnZTogPz8/XG4gICAgICBhdXRob3JOYW1lOiBlbnYuYmFtYm9vX3BsYW5SZXBvc2l0b3J5X3VzZXJuYW1lLFxuICAgICAgLy8gYXV0aG9yRW1haWw6ID8/P1xuICAgICAgcmVtb3RlT3JpZ2luOiBlbnYuYmFtYm9vX3BsYW5SZXBvc2l0b3J5X3JlcG9zaXRvcnlVUkwsXG4gICAgICAvLyBkZWZhdWx0QnJhbmNoOiA/Pz9cbiAgICB9LFxuICAgIGJpdGJ1Y2tldDoge1xuICAgICAgc2hhOiBlbnYuQklUQlVDS0VUX0NPTU1JVCxcbiAgICAgIGJyYW5jaDogZW52LkJJVEJVQ0tFVF9CUkFOQ0gsXG4gICAgICAvLyBtZXNzYWdlOiA/Pz9cbiAgICAgIC8vIGF1dGhvck5hbWU6ID8/P1xuICAgICAgLy8gYXV0aG9yRW1haWw6ID8/P1xuICAgICAgLy8gcmVtb3RlT3JpZ2luOiA/Pz9cbiAgICAgIC8vIGRlZmF1bHRCcmFuY2g6ID8/P1xuICAgIH0sXG4gICAgYnVpbGRraXRlOiB7XG4gICAgICBzaGE6IGVudi5CVUlMREtJVEVfQ09NTUlULFxuICAgICAgYnJhbmNoOiBlbnYuQlVJTERLSVRFX0JSQU5DSCxcbiAgICAgIG1lc3NhZ2U6IGVudi5CVUlMREtJVEVfTUVTU0FHRSxcbiAgICAgIGF1dGhvck5hbWU6IGVudi5CVUlMREtJVEVfQlVJTERfQ1JFQVRPUixcbiAgICAgIGF1dGhvckVtYWlsOiBlbnYuQlVJTERLSVRFX0JVSUxEX0NSRUFUT1JfRU1BSUwsXG4gICAgICByZW1vdGVPcmlnaW46IGVudi5CVUlMREtJVEVfUkVQTyxcbiAgICAgIGRlZmF1bHRCcmFuY2g6IGVudi5CVUlMREtJVEVfUElQRUxJTkVfREVGQVVMVF9CUkFOQ0gsXG4gICAgfSxcbiAgICBjaXJjbGU6IHtcbiAgICAgIHNoYTogZW52LkNJUkNMRV9TSEExLFxuICAgICAgYnJhbmNoOiBlbnYuQ0lSQ0xFX0JSQU5DSCxcbiAgICAgIC8vIG1lc3NhZ2U6ID8/P1xuICAgICAgYXV0aG9yTmFtZTogZW52LkNJUkNMRV9VU0VSTkFNRSxcbiAgICAgIC8vIGF1dGhvckVtYWlsOiA/Pz9cbiAgICAgIHJlbW90ZU9yaWdpbjogZW52LkNJUkNMRV9SRVBPU0lUT1JZX1VSTCxcbiAgICAgIC8vIGRlZmF1bHRCcmFuY2g6ID8/P1xuICAgIH0sXG4gICAgY29kZXNoaXBCYXNpYzoge1xuICAgICAgc2hhOiBlbnYuQ0lfQ09NTUlUX0lELFxuICAgICAgYnJhbmNoOiBlbnYuQ0lfQlJBTkNILFxuICAgICAgbWVzc2FnZTogZW52LkNJX0NPTU1JVF9NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkNJX0NPTU1JVFRFUl9OQU1FLFxuICAgICAgYXV0aG9yRW1haWw6IGVudi5DSV9DT01NSVRURVJfRU1BSUwsXG4gICAgICAvLyByZW1vdGVPcmlnaW46ID8/P1xuICAgICAgLy8gZGVmYXVsdEJyYW5jaDogPz8/XG4gICAgfSxcbiAgICBjb2Rlc2hpcFBybzoge1xuICAgICAgc2hhOiBlbnYuQ0lfQ09NTUlUX0lELFxuICAgICAgYnJhbmNoOiBlbnYuQ0lfQlJBTkNILFxuICAgICAgbWVzc2FnZTogZW52LkNJX0NPTU1JVF9NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkNJX0NPTU1JVFRFUl9OQU1FLFxuICAgICAgYXV0aG9yRW1haWw6IGVudi5DSV9DT01NSVRURVJfRU1BSUwsXG4gICAgICAvLyByZW1vdGVPcmlnaW46ID8/P1xuICAgICAgLy8gZGVmYXVsdEJyYW5jaDogPz8/XG4gICAgfSxcbiAgICBjb2RlRnJlc2g6IHtcbiAgICAgIHNoYTogZW52LkNGX1JFVklTSU9OLFxuICAgICAgYnJhbmNoOiBlbnYuQ0ZfQlJBTkNILFxuICAgICAgbWVzc2FnZTogZW52LkNGX0NPTU1JVF9NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkNGX0NPTU1JVF9BVVRIT1IsXG4gICAgfSxcbiAgICBkcm9uZToge1xuICAgICAgc2hhOiBlbnYuRFJPTkVfQ09NTUlUX1NIQSxcbiAgICAgIC8vIGh0dHBzOi8vZG9jcy5kcm9uZS5pby9waXBlbGluZS9lbnZpcm9ubWVudC9yZWZlcmVuY2UvZHJvbmUtc291cmNlLWJyYW5jaC9cbiAgICAgIGJyYW5jaDogZW52LkRST05FX1NPVVJDRV9CUkFOQ0gsXG4gICAgICBtZXNzYWdlOiBlbnYuRFJPTkVfQ09NTUlUX01FU1NBR0UsXG4gICAgICBhdXRob3JOYW1lOiBlbnYuRFJPTkVfQ09NTUlUX0FVVEhPUixcbiAgICAgIGF1dGhvckVtYWlsOiBlbnYuRFJPTkVfQ09NTUlUX0FVVEhPUl9FTUFJTCxcbiAgICAgIHJlbW90ZU9yaWdpbjogZW52LkRST05FX0dJVF9IVFRQX1VSTCxcbiAgICAgIGRlZmF1bHRCcmFuY2g6IGVudi5EUk9ORV9SRVBPX0JSQU5DSCxcbiAgICB9LFxuICAgIGdpdGh1YkFjdGlvbnM6IHtcbiAgICAgIHNoYTogZW52LkdJVEhVQl9TSEEsXG4gICAgICBicmFuY2g6IGVudi5HSF9CUkFOQ0ggfHwgZW52LkdJVEhVQl9SRUYsXG4gICAgICBkZWZhdWx0QnJhbmNoOiBlbnYuR0lUSFVCX0JBU0VfUkVGLFxuICAgICAgcmVtb3RlQnJhbmNoOiBlbnYuR0lUSFVCX0hFQURfUkVGLFxuICAgICAgcnVuQXR0ZW1wdDogZW52LkdJVEhVQl9SVU5fQVRURU1QVCxcbiAgICB9LFxuICAgIGdpdGxhYjoge1xuICAgICAgc2hhOiBlbnYuQ0lfQ09NTUlUX1NIQSxcbiAgICAgIGJyYW5jaDogZW52LkNJX0NPTU1JVF9SRUZfTkFNRSxcbiAgICAgIG1lc3NhZ2U6IGVudi5DSV9DT01NSVRfTUVTU0FHRSxcbiAgICAgIGF1dGhvck5hbWU6IGVudi5HSVRMQUJfVVNFUl9OQU1FLFxuICAgICAgYXV0aG9yRW1haWw6IGVudi5HSVRMQUJfVVNFUl9FTUFJTCxcbiAgICAgIHJlbW90ZU9yaWdpbjogZW52LkNJX1JFUE9TSVRPUllfVVJMLFxuICAgICAgZGVmYXVsdEJyYW5jaDogZW52LkNJX0RFRkFVTFRfQlJBTkNILFxuICAgIH0sXG4gICAgZ29vZ2xlQ2xvdWQ6IHtcbiAgICAgIHNoYTogZW52LkNPTU1JVF9TSEEsXG4gICAgICBicmFuY2g6IGVudi5CUkFOQ0hfTkFNRSxcbiAgICAgIC8vIG1lc3NhZ2U6ID8/XG4gICAgICAvLyBhdXRob3JOYW1lOiA/P1xuICAgICAgLy8gYXV0aG9yRW1haWw6ID8/XG4gICAgICAvLyByZW1vdGVPcmlnaW46ID8/P1xuICAgICAgLy8gZGVmYXVsdEJyYW5jaDogPz9cbiAgICB9LFxuICAgIGplbmtpbnM6IHtcbiAgICAgIHNoYTogZW52LkdJVF9DT01NSVQsXG4gICAgICBicmFuY2g6IGVudi5HSVRfQlJBTkNILFxuICAgICAgLy8gbWVzc2FnZTogPz8/XG4gICAgICAvLyBhdXRob3JOYW1lOiA/Pz9cbiAgICAgIC8vIGF1dGhvckVtYWlsOiA/Pz9cbiAgICAgIC8vIHJlbW90ZU9yaWdpbjogPz8/XG4gICAgICAvLyBkZWZhdWx0QnJhbmNoOiA/Pz9cbiAgICB9LFxuICAgIC8vIE9ubHkgZnJvbSBmb3Jrcz8gaHR0cHM6Ly9zZW1hcGhvcmVjaS5jb20vZG9jcy9hdmFpbGFibGUtZW52aXJvbm1lbnQtdmFyaWFibGVzLmh0bWxcbiAgICBzZW1hcGhvcmU6IHtcbiAgICAgIHNoYTogZW52LlNFTUFQSE9SRV9HSVRfU0hBLFxuICAgICAgYnJhbmNoOiBlbnYuU0VNQVBIT1JFX0dJVF9CUkFOQ0gsXG4gICAgICAvLyBtZXNzYWdlOiA/Pz9cbiAgICAgIC8vIGF1dGhvck5hbWU6ID8/P1xuICAgICAgLy8gYXV0aG9yRW1haWw6ID8/P1xuICAgICAgcmVtb3RlT3JpZ2luOiBlbnYuU0VNQVBIT1JFX0dJVF9SRVBPX1NMVUcsXG4gICAgICAvLyBkZWZhdWx0QnJhbmNoOiA/Pz9cbiAgICB9LFxuICAgIHNoaXBwYWJsZToge1xuICAgICAgc2hhOiBlbnYuQ09NTUlULFxuICAgICAgYnJhbmNoOiBlbnYuQlJBTkNILFxuICAgICAgbWVzc2FnZTogZW52LkNPTU1JVF9NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkNPTU1JVFRFUixcbiAgICAgIC8vIGF1dGhvckVtYWlsOiA/Pz9cbiAgICAgIC8vIHJlbW90ZU9yaWdpbjogPz8/XG4gICAgICAvLyBkZWZhdWx0QnJhbmNoOiA/Pz9cbiAgICB9LFxuICAgIHNuYXA6IG51bGwsXG4gICAgdGVhbWNpdHk6IG51bGwsXG4gICAgdGVhbWZvdW5kYXRpb246IHtcbiAgICAgIHNoYTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT04sXG4gICAgICBicmFuY2g6IGVudi5CVUlMRF9TT1VSQ0VCUkFOQ0hOQU1FLFxuICAgICAgbWVzc2FnZTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT05NRVNTQUdFLFxuICAgICAgYXV0aG9yTmFtZTogZW52LkJVSUxEX1NPVVJDRVZFUlNJT05BVVRIT1IsXG4gICAgfSxcbiAgICB0cmF2aXM6IHtcbiAgICAgIHNoYTogZW52LlRSQVZJU19QVUxMX1JFUVVFU1RfU0hBIHx8IGVudi5UUkFWSVNfQ09NTUlULFxuICAgICAgLy8gZm9yIFBScywgVFJBVklTX0JSQU5DSCBpcyB0aGUgYmFzZSBicmFuY2ggYmVpbmcgbWVyZ2VkIGludG9cbiAgICAgIGJyYW5jaDogZW52LlRSQVZJU19QVUxMX1JFUVVFU1RfQlJBTkNIIHx8IGVudi5UUkFWSVNfQlJBTkNILFxuICAgICAgLy8gYXV0aG9yTmFtZTogPz8/XG4gICAgICAvLyBhdXRob3JFbWFpbDogPz8/XG4gICAgICBtZXNzYWdlOiBlbnYuVFJBVklTX0NPTU1JVF9NRVNTQUdFLFxuICAgICAgLy8gcmVtb3RlT3JpZ2luOiA/Pz9cbiAgICAgIC8vIGRlZmF1bHRCcmFuY2g6ID8/P1xuICAgIH0sXG4gICAgd2VyY2tlcjogbnVsbCxcbiAgICBuZXRsaWZ5OiB7XG4gICAgICBzaGE6IGVudi5DT01NSVRfUkVGLFxuICAgICAgYnJhbmNoOiBlbnYuQlJBTkNILFxuICAgICAgcmVtb3RlT3JpZ2luOiBlbnYuUkVQT1NJVE9SWV9VUkwsXG4gICAgfSxcbiAgICBsYXllcmNpOiB7XG4gICAgICBzaGE6IGVudi5HSVRfQ09NTUlULFxuICAgICAgYnJhbmNoOiBlbnYuTEFZRVJDSV9CUkFOQ0gsXG4gICAgICBtZXNzYWdlOiBlbnYuR0lUX0NPTU1JVF9USVRMRSxcbiAgICB9LFxuICB9O1xufTtcblxudHlwZSBDaVByb3ZpZGVyRGF0YSA9IHtcbiAgc2hhPzogc3RyaW5nO1xuICBicmFuY2g/OiBzdHJpbmc7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIGF1dGhvck5hbWU/OiBzdHJpbmc7XG4gIGF1dGhvckVtYWlsPzogc3RyaW5nO1xuICByZW1vdGVPcmlnaW4/OiBzdHJpbmc7XG4gIGRlZmF1bHRCcmFuY2g/OiBzdHJpbmc7XG4gIHJlbW90ZUJyYW5jaD86IHN0cmluZztcbiAgcnVuQXR0ZW1wdD86IHN0cmluZztcbn07XG5cbmludGVyZmFjZSBQcm92aWRlckNvbW1pdFBhcmFtc1JlcyB7XG4gIFtrZXk6IHN0cmluZ106IENpUHJvdmlkZXJEYXRhIHwgbnVsbDtcbn1cblxuaW50ZXJmYWNlIFByb3ZpZGVyQ2lQYXJhbXNSZXMge1xuICBba2V5OiBzdHJpbmddOiB7XG4gICAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9IHwgbnVsbDtcbn1cblxuY29uc3QgX2dldCA9IChmbjogKCkgPT4gUHJvdmlkZXJDb21taXRQYXJhbXNSZXMgfCBQcm92aWRlckNpUGFyYW1zUmVzKSA9PiB7XG4gIGNvbnN0IHByb3ZpZGVyTmFtZSA9IGdldENpUHJvdmlkZXIoKTtcbiAgaWYgKCFwcm92aWRlck5hbWUpIHJldHVybiB7fTtcblxuICByZXR1cm4gXy5jaGFpbihmbigpKS5nZXQocHJvdmlkZXJOYW1lKS52YWx1ZSgpO1xufTtcblxuLyoqXG4gKiBJZiB0aGVyZSBpcyBubyBidWlsZCBJRCBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYnkgdXNlclxuICogQ2hlY2sgaWYgd2UgY2FuIGZldGNoIGl0IGF1dG9tYXRpY2FsbHkgZnJvbSBDSSB2YXJpYWJsZXMuXG4gKiBUaGUgcHJvY2VzcyB3aWxsIHN0b3AgaWYgd2UgY2Fubm90IGRvIGl0XG4gKiBodHRwczovL2RvY3MuY3lwcmVzcy5pby9ndWlkZXMvcmVmZXJlbmNlcy9lcnJvci1tZXNzYWdlcyNXZS1jb3VsZC1ub3QtZGV0ZXJtaW5lLWEtdW5pcXVlLUNJLWJ1aWxkLUlEXG4gKi9cbmZ1bmN0aW9uIGNoZWNrRm9yQ2lCdWlsZEZyb21DaShjaVByb3ZpZGVyOiBzdHJpbmcgfCBudWxsKSB7XG4gIGlmIChjaVByb3ZpZGVyICYmIGRldGVjdGFibGVDaUJ1aWxkSWRQcm92aWRlcnMoKS5pbmNsdWRlcyhjaVByb3ZpZGVyKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFxuICAgIGBDb3VsZCBub3QgZGV0ZXJtaW5lIENJIGJ1aWxkIElEIGZyb20gdGhlIGVudmlyb25tZW50LiBQbGVhc2UgcHJvdmlkZSBhIHVuaXF1ZSBDSSBidWlsZCBJRCB1c2luZyB0aGUgLS1jaS1idWlsZC1pZCBDTEkgZmxhZyBvciAnY2lCdWlsZElkJyBwYXJhbWV0ZXIgZm9yICdydW4nIG1ldGhvZC5gXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0KCkge1xuICByZXR1cm4gXy5rZXlzKENJX1BST1ZJREVSUyk7XG59XG5cbi8vIGdyYWIgYWxsIGRldGVjdGFibGUgcHJvdmlkZXJzXG4vLyB0aGF0IHdlIGNhbiBleHRyYWN0IGNpQnVpbGRJZCBmcm9tXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0YWJsZUNpQnVpbGRJZFByb3ZpZGVycygpIHtcbiAgcmV0dXJuIF8uY2hhaW4oX3Byb3ZpZGVyQ2lQYXJhbXMoKSkub21pdEJ5KF8uaXNOdWxsKS5rZXlzKCkudmFsdWUoKTtcbn1cblxuZXhwb3J0IHR5cGUgQ2lQcm92aWRlciA9IHN0cmluZyB8IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaVByb3ZpZGVyKCk6IENpUHJvdmlkZXIge1xuICByZXR1cm4gX2RldGVjdFByb3ZpZGVyTmFtZSgpIHx8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIENpUGFyYW1zID0ge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2lQYXJhbXMoKSB7XG4gIHJldHVybiBfZ2V0KF9wcm92aWRlckNpUGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbW1pdFBhcmFtcygpIHtcbiAgcmV0dXJuIF9nZXQoX3Byb3ZpZGVyQ29tbWl0UGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENJKGNpQnVpbGRJZD86IHN0cmluZykge1xuICBjb25zdCBwYXJhbXMgPSBnZXRDaVBhcmFtcygpO1xuICBjb25zdCBwcm92aWRlciA9IGdldENpUHJvdmlkZXIoKTtcbiAgaWYgKCFjaUJ1aWxkSWQpIGNoZWNrRm9yQ2lCdWlsZEZyb21DaShwcm92aWRlcik7XG5cbiAgZGVidWcoXCJkZXRlY3RlZCBDSSBwcm92aWRlcjogJXNcIiwgcHJvdmlkZXIpO1xuICBkZWJ1ZyhcImRldGVjdGVkIENJIHBhcmFtczogJU9cIiwgcGFyYW1zKTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcHJvdmlkZXIsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21taXREZWZhdWx0cyhleGlzdGluZ0luZm86IENpUHJvdmlkZXJEYXRhKSB7XG4gIGRlYnVnKFwiZ2l0IGNvbW1pdCBleGlzdGluZyBpbmZvXCIpO1xuICBkZWJ1ZyhleGlzdGluZ0luZm8pO1xuXG4gIGNvbnN0IGNvbW1pdFBhcmFtc09iaiA9IGdldENvbW1pdFBhcmFtcygpO1xuXG4gIGRlYnVnKFwiY29tbWl0IGluZm8gZnJvbSBwcm92aWRlciBlbnZpcm9ubWVudCB2YXJpYWJsZXM6ICVPXCIsIGNvbW1pdFBhcmFtc09iaik7XG5cbiAgLy8gYmFzZWQgb24gdGhlIGV4aXN0aW5nSW5mbyBwcm9wZXJ0aWVzXG4gIC8vIG1lcmdlIGluIHRoZSBjb21taXRQYXJhbXMgaWYgbnVsbCBvciB1bmRlZmluZWRcbiAgLy8gZGVmYXVsdGluZyBiYWNrIHRvIG51bGwgaWYgYWxsIGZhaWxzXG4gIC8vIE5PVEU6IG9ubHkgcHJvcGVydGllcyBkZWZpbmVkIGluIFwiZXhpc3RpbmdJbmZvXCIgd2lsbCBiZSByZXR1cm5lZFxuICBjb25zdCBjb21iaW5lZCA9IF8udHJhbnNmb3JtKFxuICAgIGV4aXN0aW5nSW5mbyxcbiAgICAoXG4gICAgICBtZW1vOiB7IFttZW1vS2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudWxsIH0sXG4gICAgICB2YWx1ZTogc3RyaW5nLFxuICAgICAga2V5OiBzdHJpbmdcbiAgICApID0+IHtcbiAgICAgIHJldHVybiAobWVtb1trZXldID0gXy5kZWZhdWx0VG8odmFsdWUgfHwgY29tbWl0UGFyYW1zT2JqW2tleV0sIG51bGwpKTtcbiAgICB9XG4gICk7XG5cbiAgZGVidWcoXCJjb21iaW5lZCBnaXQgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tIHByb3ZpZGVyXCIpO1xuICBkZWJ1Zyhjb21iaW5lZCk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkO1xufVxuIiwgImltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBEZXRlY3RlZEJyb3dzZXIsIFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgYm9vdEN5cHJlc3MgfSBmcm9tIFwiLi4vYm9vdHN0cmFwXCI7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IHsgcmVxdWlyZSB9IGZyb20gXCIuLi9yZXF1aXJlXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21Qb3J0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNvbnN0IGRlYnVnID0gRGVidWcoXCJjdXJyZW50czpjb25maWdcIik7XG5cbmV4cG9ydCB0eXBlIEUyRUNvbmZpZyA9IHtcbiAgYmF0Y2hTaXplOiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgQ29tcG9uZW50Q29uZmlnID0ge1xuICBiYXRjaFNpemU6IG51bWJlcjtcbn07XG5leHBvcnQgdHlwZSBDdXJyZW50c0NvbmZpZyA9IHtcbiAgcHJvamVjdElkPzogc3RyaW5nO1xuICByZWNvcmRLZXk/OiBzdHJpbmc7XG4gIGNsb3VkU2VydmljZVVybDogc3RyaW5nO1xuICBlMmU6IEUyRUNvbmZpZztcbiAgY29tcG9uZW50OiBDb21wb25lbnRDb25maWc7XG59O1xuXG5sZXQgX2NvbmZpZzogQ3VycmVudHNDb25maWcgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRzQ29uZmlnKHByb2plY3RSb290Pzogc3RyaW5nKTogQ3VycmVudHNDb25maWcge1xuICBpZiAoX2NvbmZpZykge1xuICAgIHJldHVybiBfY29uZmlnO1xuICB9XG4gIGNvbnN0IGRlZmF1bHRDb25maWc6IEN1cnJlbnRzQ29uZmlnID0ge1xuICAgIGUyZToge1xuICAgICAgYmF0Y2hTaXplOiAzLFxuICAgIH0sXG4gICAgY29tcG9uZW50OiB7XG4gICAgICBiYXRjaFNpemU6IDUsXG4gICAgfSxcbiAgICBjbG91ZFNlcnZpY2VVcmw6IFwiaHR0cHM6Ly9jeS5jdXJyZW50cy5kZXZcIixcbiAgfTtcblxuICBjb25zdCBjb25maWdGaWxlUGF0aCA9IGdldENvbmZpZ0ZpbGVQYXRoKHByb2plY3RSb290KTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNvbHZlZFBhdGggPSBwYXRoLnJlc29sdmUoLi4uY29uZmlnRmlsZVBhdGgpO1xuICAgIGRlYnVnKFwibG9hZGluZyBjdXJyZW50cyBjb25maWcgZmlsZSBmcm9tICclcydcIiwgcmVzb2x2ZWRQYXRoKTtcblxuICAgIGNvbnN0IGZzQ29uZmlnID0gcmVxdWlyZShyZXNvbHZlZFBhdGgpO1xuICAgIF9jb25maWcgPSB7XG4gICAgICAuLi5kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4uZnNDb25maWcsXG4gICAgfSBhcyBDdXJyZW50c0NvbmZpZztcbiAgICByZXR1cm4gX2NvbmZpZztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdhcm4oXCJmYWlsZWQgdG8gbG9hZCBjb25maWcgZmlsZTogJXNcIiwgY29uZmlnRmlsZVBhdGgpO1xuICAgIGRlYnVnKFwiZmFpbHVyZSBkZXRhaWxzOiAlc1wiLCBlKTtcbiAgICBfY29uZmlnID0gZGVmYXVsdENvbmZpZztcbiAgICByZXR1cm4gX2NvbmZpZztcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBNZXJnZWRDb25maWcgPSBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIGdldE1lcmdlZENvbmZpZz4+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1lcmdlZENvbmZpZyhwYXJhbXM6IFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycykge1xuICBkZWJ1ZyhcInJlc29sdmluZyBjeXByZXNzIGNvbmZpZ1wiKTtcbiAgY29uc3QgY3lwcmVzc1Jlc29sdmVkQ29uZmlnOlxuICAgIHwgKEN5cHJlc3MuUmVzb2x2ZWRDb25maWdPcHRpb25zICYge1xuICAgICAgICBwcm9qZWN0Um9vdDogc3RyaW5nO1xuICAgICAgICByYXdKc29uOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICAgICAgYnJvd3NlcnM6IERldGVjdGVkQnJvd3NlcltdO1xuICAgICAgfSlcbiAgICB8IHVuZGVmaW5lZCA9IGF3YWl0IGJvb3RDeXByZXNzKGdldFJhbmRvbVBvcnQoKSwgcGFyYW1zKTtcblxuICBkZWJ1ZyhcImN5cHJlc3MgcmVzb2x2ZWRDb25maWc6ICVPXCIsIGN5cHJlc3NSZXNvbHZlZENvbmZpZyk7XG5cbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCByYXdFMkVQYXR0ZXJuID0gY3lwcmVzc1Jlc29sdmVkQ29uZmlnLnJhd0pzb24/LmUyZT8uc3BlY1BhdHRlcm47XG4gIGxldCBhZGRpdGlvbmFsSWdub3JlUGF0dGVybjogc3RyaW5nW10gPSBbXTtcbiAgaWYgKHBhcmFtcy50ZXN0aW5nVHlwZSA9PT0gXCJjb21wb25lbnRcIiAmJiByYXdFMkVQYXR0ZXJuKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFkZGl0aW9uYWxJZ25vcmVQYXR0ZXJuID0gcmF3RTJFUGF0dGVybjtcbiAgfVxuXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3lwcmVzcy1pby9jeXByZXNzL2Jsb2IvZWQwNjY4ZTI0YzJlZTY3NTNiYmQyNWFlNDY3Y2U5NGFlNTg1Nzc0MS9wYWNrYWdlcy9jb25maWcvc3JjL29wdGlvbnMudHMjTDQ1N1xuICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2N5cHJlc3MtaW8vY3lwcmVzcy9ibG9iL2RldmVsb3AvcGFja2FnZXMvY29uZmlnL3NyYy9wcm9qZWN0L3V0aWxzLnRzI0w0MTJcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHByb2plY3RSb290OiBjeXByZXNzUmVzb2x2ZWRDb25maWc/LnByb2plY3RSb290IHx8IHByb2Nlc3MuY3dkKCksXG4gICAgcHJvamVjdElkOiBwYXJhbXMucHJvamVjdElkLFxuICAgIHNwZWNQYXR0ZXJuOiBjeXByZXNzUmVzb2x2ZWRDb25maWc/LnNwZWNQYXR0ZXJuIHx8IFwiKiovKi4qXCIsXG4gICAgZXhjbHVkZVNwZWNQYXR0ZXJuOlxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY3lwcmVzc1Jlc29sdmVkQ29uZmlnPy5yZXNvbHZlZC5leGNsdWRlU3BlY1BhdHRlcm4udmFsdWUgPz8gW10sXG4gICAgYWRkaXRpb25hbElnbm9yZVBhdHRlcm4sXG4gICAgcmVzb2x2ZWQ6IGN5cHJlc3NSZXNvbHZlZENvbmZpZyxcbiAgfTtcbiAgZGVidWcoXCJtZXJnZWQgY29uZmlnOiAlT1wiLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRDb25maWdGaWxlUGF0aChwcm9qZWN0Um9vdDogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgcmV0dXJuIFtwcm9qZWN0Um9vdCA/PyBwcm9jZXNzLmN3ZCgpLCBcImN1cnJlbnRzLmNvbmZpZy5qc1wiXTtcbn1cbiIsICJpbXBvcnQgeyBnZXRCaW5QYXRoIH0gZnJvbSBcImN5MlwiO1xuaW1wb3J0IHsgVmFsaWRhdGVkQ3VycmVudHNQYXJhbWV0ZXJzIH0gZnJvbSBcImN5cHJlc3MtY2xvdWQvdHlwZXNcIjtcbmltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCBleGVjYSwgeyBFeGVjYUVycm9yIH0gZnJvbSBcImV4ZWNhXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzXCI7XG5pbXBvcnQgeyBjcmVhdGVUZW1wRmlsZSB9IGZyb20gXCIuLi9mc1wiO1xuaW1wb3J0IHsgYm9sZCwgaW5mbyB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IHJlcXVpcmUgfSBmcm9tIFwiLi4vcmVxdWlyZVwiO1xuaW1wb3J0IHsgZ2V0Qm9vdHN0cmFwQXJncyB9IGZyb20gXCIuL3NlcmlhbGl6ZXJcIjtcblxuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOmJvb3RcIik7XG5cbmV4cG9ydCBjb25zdCBib290Q3lwcmVzcyA9IGFzeW5jIChcbiAgcG9ydDogbnVtYmVyLFxuICBwYXJhbXM6IFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVyc1xuKSA9PiB7XG4gIGRlYnVnKFwiYm9vdGluZyBjeXByZXNzLi4uXCIpO1xuICBjb25zdCB0ZW1wRmlsZVBhdGggPSBhd2FpdCBjcmVhdGVUZW1wRmlsZSgpO1xuXG4gIGNvbnN0IGN5cHJlc3NCaW4gPSBhd2FpdCBnZXRCaW5QYXRoKHJlcXVpcmUucmVzb2x2ZShcImN5cHJlc3NcIikpO1xuICBkZWJ1ZyhcImN5cHJlc3MgZXhlY3V0YWJsZSBsb2NhdGlvbjogJXNcIiwgY3lwcmVzc0Jpbik7XG5cbiAgLy8gaXQgaXMgaW1wb3J0YW50IHRvIHBhc3MgdGhlIHNhbWUgYXJncyBpbiBvcmRlciB0byBnZXQgdGhlIHNhbWUgY29uZmlnIGFzIGZvciB0aGUgYWN0dWFsIHJ1blxuICBjb25zdCBhcmdzID0gZ2V0Qm9vdHN0cmFwQXJncyh7IHBvcnQsIHRlbXBGaWxlUGF0aCwgcGFyYW1zIH0pO1xuICBkZWJ1ZyhcImJvb3RpbmcgY3lwcmVzcyB3aXRoIGFyZ3M6ICVvXCIsIGFyZ3MpO1xuICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBhd2FpdCBleGVjQ3lwcmVzcyhjeXByZXNzQmluLCBhcmdzKTtcblxuICBpZiAoIWZzLmV4aXN0c1N5bmModGVtcEZpbGVQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDYW5ub3QgcmVzb2x2ZSBjeXByZXNzIGNvbmZpZ3VyYXRpb24gZnJvbSAke3RlbXBGaWxlUGF0aH0uIFBsZWFzZSByZXBvcnQgdGhlIGlzc3VlLmBcbiAgICApO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgZiA9IGZzLnJlYWRGaWxlU3luYyh0ZW1wRmlsZVBhdGgsIFwidXRmLThcIik7XG4gICAgaWYgKCFmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJcyBjeXByZXNzLWNsb3VkL3BsdWdpbiBpbnN0YWxsZWQ/XCIpO1xuICAgIH1cbiAgICBkZWJ1ZyhcImN5cHJlc3MgY29uZmlnICclcyc6ICclcydcIiwgdGVtcEZpbGVQYXRoLCBmKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShmKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVidWcoXCJyZWFkIGNvbmZpZyB0ZW1wIGZpbGUgZmFpbGVkOiAlb1wiLCBlcnIpO1xuICAgIGluZm8oYm9sZChcIkN5cHJlc3Mgc3Rkb3V0OlxcblwiKSwgc3Rkb3V0KTtcbiAgICBpbmZvKGJvbGQoXCJDeXByZXNzIHN0ZGVycjpcXG5cIiksIHN0ZGVycik7XG5cbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBVbmFibGUgdG8gcmVzb2x2ZSBjeXByZXNzIGNvbmZpZ3VyYXRpb25cbi0gbWFrZSBzdXJlIHRoYXQgJ2N5cHJlc3MtY2xvdWQvcGx1Z2luJyBpcyBpbnN0YWxsZWRcbi0gcmVwb3J0IHRoZSBpc3N1ZSB0b2dldGhlciB3aXRoIGN5cHJlc3Mgc3Rkb3V0IGFuZCBzdGRlcnJcbmApO1xuICB9XG59O1xuXG5hc3luYyBmdW5jdGlvbiBleGVjQ3lwcmVzcyhjeXByZXNzQmluOiBzdHJpbmcsIGFyZ3M6IHJlYWRvbmx5IHN0cmluZ1tdKSB7XG4gIGxldCBzdGRvdXQgPSBcIlwiO1xuICBsZXQgc3RkZXJyID0gXCJcIjtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjYShjeXByZXNzQmluLCBbXCJydW5cIiwgLi4uYXJnc10sIHtcbiAgICAgIHN0ZGlvOiBcInBpcGVcIixcbiAgICAgIGVudjoge1xuICAgICAgICAuLi5wcm9jZXNzLmVudixcbiAgICAgICAgLy8gcHJldmVudCB3YXJuaW5ncyBhYm91dCByZWNvcmRpbmcgbW9kZVxuICAgICAgICBDWVBSRVNTX1JFQ09SRF9LRVk6IHVuZGVmaW5lZCxcbiAgICAgICAgQ1lQUkVTU19QUk9KRUNUX0lEOiB1bmRlZmluZWQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWJ1ZyhcImV4ZWMgY3lwcmVzcyBmYWlsZWQgKGNlcnRhaW4gZmFpbHVyZXMgYXJlIGV4cGVjdGVkKTogJW9cIiwgZXJyKTtcbiAgICBzdGRvdXQgPSAoZXJyIGFzIEV4ZWNhRXJyb3IpLnN0ZG91dDtcbiAgICBzdGRlcnIgPSAoZXJyIGFzIEV4ZWNhRXJyb3IpLnN0ZGVycjtcbiAgfVxuICByZXR1cm4geyBzdGRvdXQsIHN0ZGVyciB9O1xufVxuIiwgImltcG9ydCB7IGZpbGUgfSBmcm9tIFwidG1wLXByb21pc2VcIjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRlbXBGaWxlID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IHBhdGggfSA9IGF3YWl0IGZpbGUoKTtcbiAgcmV0dXJuIHBhdGg7XG59O1xuIiwgImltcG9ydCB7XG4gIEN1cnJlbnRzUnVuUGFyYW1ldGVycyxcbiAgQ3lwcmVzc1J1blBhcmFtZXRlcnMsXG59IGZyb20gXCJjeXByZXNzLWNsb3VkL3R5cGVzXCI7XG5pbXBvcnQgRGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBjdXN0b21BbHBoYWJldCB9IGZyb20gXCJuYW5vaWRcIjtcbmltcG9ydCB7IGdldEN5cHJlc3NSdW5BUElQYXJhbXMgfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5jb25zdCBkZWJ1ZyA9IERlYnVnKFwiY3VycmVudHM6Ym9vdFwiKTtcblxuY29uc3QgZ2V0RHVtbXlTcGVjID0gY3VzdG9tQWxwaGFiZXQoXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLCAxMCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb290c3RyYXBBcmdzKHtcbiAgcGFyYW1zLFxuICBwb3J0LFxuICB0ZW1wRmlsZVBhdGgsXG59OiB7XG4gIHBhcmFtczogQ3VycmVudHNSdW5QYXJhbWV0ZXJzO1xuICBwb3J0OiBudW1iZXI7XG4gIHRlbXBGaWxlUGF0aDogc3RyaW5nO1xufSkge1xuICByZXR1cm4gXy5jaGFpbihnZXRDeXByZXNzQ0xJUGFyYW1zKHBhcmFtcykpXG4gICAgLnRocnUoKG9wdHMpID0+ICh7XG4gICAgICAuLi5vcHRzLFxuICAgICAgLy8gbWVyZ2UgdGhlIGVudiB3aXRoIHRoZSBjdXJyZW50cyBzcGVjaWZpYyBlbnYgdmFyaWFibGVzXG4gICAgICBlbnY6IHtcbiAgICAgICAgLi4uKG9wdHMuZW52ID8/IHt9KSxcbiAgICAgICAgY3VycmVudHNfdGVtcF9maWxlOiB0ZW1wRmlsZVBhdGgsXG4gICAgICAgIGN1cnJlbnRzX3BvcnQ6IHBvcnQsXG4gICAgICAgIGN1cnJlbnRzX2RlYnVnX2VuYWJsZWQ6IHByb2Nlc3MuZW52LkRFQlVHPy5pbmNsdWRlcyhcImN1cnJlbnRzOlwiKVxuICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgIDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pKVxuICAgIC50YXAoKG9wdHMpID0+IHtcbiAgICAgIGRlYnVnKFwiY3lwcmVzcyBib290c3RyYXAgcGFyYW1zOiAlb1wiLCBvcHRzKTtcbiAgICB9KVxuICAgIC50aHJ1KHNlcmlhbGl6ZU9wdGlvbnMpXG4gICAgLnRhcCgob3B0cykgPT4ge1xuICAgICAgZGVidWcoXCJjeXByZXNzIGJvb3RzdHJhcCBzZXJpYWxpemVkIHBhcmFtczogJW9cIiwgb3B0cyk7XG4gICAgfSlcbiAgICAudGhydSgoYXJncykgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgXCItLXNwZWNcIixcbiAgICAgICAgZ2V0RHVtbXlTcGVjKCksXG4gICAgICAgIHBhcmFtcy50ZXN0aW5nVHlwZSA9PT0gXCJjb21wb25lbnRcIiA/IFwiLS1jb21wb25lbnRcIiA6IFwiLS1lMmVcIixcbiAgICAgIF07XG4gICAgfSlcbiAgICAudmFsdWUoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBDdXJyZW50cyBvcHRpb25zIHRvIEN5cHJlc3MgQ0xJIHBhcmFtcy5cbiAqIEN5cHJlc3MgQ0xJIG9wdGlvbnMgYXJlIGRpZmZlcmVudCBmcm9tIEN5cHJlc3MgbW9kdWxlIEFQSSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSBwYXJhbXMgQ3VycmVudHMgcGFyYW1cbiAqIEByZXR1cm5zIEN5cHJlc3MgQ0xJIHBhcmFtc1xuICogQHNlZSBodHRwczovL2RvY3MuY3lwcmVzcy5pby9ndWlkZXMvZ3VpZGVzL2NvbW1hbmQtbGluZSNjeXByZXNzLXJ1blxuICogQHNlZSBodHRwczovL2RvY3MuY3lwcmVzcy5pby9hcGkvbW9kdWxlLWFwaVxuICovXG5mdW5jdGlvbiBnZXRDeXByZXNzQ0xJUGFyYW1zKFxuICBwYXJhbXM6IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1xuKTogQ3lwcmVzc1J1blBhcmFtZXRlcnMge1xuICBjb25zdCByZXN1bHQgPSBnZXRDeXByZXNzUnVuQVBJUGFyYW1zKHBhcmFtcyk7XG4gIGNvbnN0IHRlc3RpbmdUeXBlID1cbiAgICByZXN1bHQudGVzdGluZ1R5cGUgPT09IFwiY29tcG9uZW50XCJcbiAgICAgID8ge1xuICAgICAgICAgIGNvbXBvbmVudDogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgOiB7fTtcbiAgcmV0dXJuIHtcbiAgICAuLi5fLm9taXQocmVzdWx0LCBcInRlc3RpbmdUeXBlXCIpLFxuICAgIC4uLnRlc3RpbmdUeXBlLFxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVPcHRpb25zKG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogc3RyaW5nW10ge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZmxhdE1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgY29uc3QgX2tleSA9IGRhc2hlZChrZXkpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgPyBbYC0tJHtfa2V5fWBdIDogW2AtLSR7X2tleX1gLCBmYWxzZV07XG4gICAgfVxuXG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gW2AtLSR7X2tleX1gLCBzZXJpYWxpemVDb21wbGV4UGFyYW0odmFsdWUpXTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIFtgLS0ke19rZXl9YCwgdmFsdWUudG9TdHJpbmcoKV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVDb21wbGV4UGFyYW0ocGFyYW06IHt9KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbSk7XG59XG5cbmNvbnN0IGRhc2hlZCA9ICh2OiBzdHJpbmcpID0+IHYucmVwbGFjZSgvW0EtWl0vZywgKG0pID0+IFwiLVwiICsgbS50b0xvd2VyQ2FzZSgpKTtcbiIsICJpbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheSh2YWw/OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICByZXR1cm4gdmFsID8gKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBbdmFsXSA6IHZhbCkgOiBbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUG9zaXgoZmlsZTogc3RyaW5nLCBzZXA6IHN0cmluZyA9IHBhdGguc2VwKSB7XG4gIHJldHVybiBmaWxlLnNwbGl0KHNlcCkuam9pbihwYXRoLnBvc2l4LnNlcCk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRSYW5kb21Qb3J0ID0gKCkgPT4ge1xuICBjb25zdCBtaW4gPSAxMDI0O1xuICBjb25zdCBtYXggPSA2NTUzNTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59O1xuIiwgImltcG9ydCB7XG4gIEN1cnJlbnRzUnVuUGFyYW1ldGVycyxcbiAgQ3lwcmVzc1J1blBhcmFtZXRlcnMsXG4gIFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycyxcbn0gZnJvbSBcImN5cHJlc3MtY2xvdWQvdHlwZXNcIjtcbmltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnNcIjtcbmltcG9ydCB7IGVycm9yIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudHNDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcbmNvbnN0IGRlYnVnID0gRGVidWcoXCJjdXJyZW50czp2YWxpZGF0ZVBhcmFtc1wiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDdXJyZW50c1BhcmFtcyhcbiAgcGFyYW1zOiBDdXJyZW50c1J1blBhcmFtZXRlcnNcbik6IEN1cnJlbnRzUnVuUGFyYW1ldGVycyB7XG4gIGNvbnN0IGNvbmZpZ0Zyb21GaWxlID0gZ2V0Q3VycmVudHNDb25maWcocGFyYW1zLnByb2plY3QpO1xuXG4gIGNvbnN0IGNsb3VkU2VydmljZVVybCA9XG4gICAgcGFyYW1zLmNsb3VkU2VydmljZVVybCA/P1xuICAgIHByb2Nlc3MuZW52LkNVUlJFTlRTX0FQSV9VUkwgPz9cbiAgICBjb25maWdGcm9tRmlsZS5jbG91ZFNlcnZpY2VVcmw7XG5cbiAgY29uc3QgcmVjb3JkS2V5ID1cbiAgICBwYXJhbXMucmVjb3JkS2V5ID8/XG4gICAgcHJvY2Vzcy5lbnYuQ1VSUkVOVFNfUkVDT1JEX0tFWSA/P1xuICAgIGNvbmZpZ0Zyb21GaWxlLnJlY29yZEtleTtcblxuICBjb25zdCBwcm9qZWN0SWQgPVxuICAgIHBhcmFtcy5wcm9qZWN0SWQgPz9cbiAgICBwcm9jZXNzLmVudi5DVVJSRU5UU19QUk9KRUNUX0lEID8/XG4gICAgY29uZmlnRnJvbUZpbGUucHJvamVjdElkO1xuXG4gIGNvbnN0IHRlc3RpbmdUeXBlID0gcGFyYW1zLnRlc3RpbmdUeXBlID8/IFwiZTJlXCI7XG5cbiAgY29uc3QgYmF0Y2hTaXplID1cbiAgICB0ZXN0aW5nVHlwZSA9PT0gXCJlMmVcIlxuICAgICAgPyBjb25maWdGcm9tRmlsZS5lMmUuYmF0Y2hTaXplXG4gICAgICA6IGNvbmZpZ0Zyb21GaWxlLmNvbXBvbmVudC5iYXRjaFNpemU7XG5cbiAgLy8gYmF0Y2hTaXplIGFuZCBjbG91ZFNlcnZpY2VVcmwgZGVmYXVsdHMgYXJlIGluIGdldEN1cnJlbnRzQ29uZmlnKClcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJhbXMsXG4gICAgY2xvdWRTZXJ2aWNlVXJsLFxuICAgIHJlY29yZEtleSxcbiAgICBwcm9qZWN0SWQsXG4gICAgYmF0Y2hTaXplLFxuICAgIHRlc3RpbmdUeXBlLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgcHJvamVjdElkRXJyb3IgPSBgQ2Fubm90IHJlc29sdmUgcHJvamVjdElkLiBQbGVhc2UgdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuLSBwcm92aWRlIGl0IGFzIGEgXCJwcm9qZWN0SWRcIiBwcm9wZXJ0eSBmb3IgXCJydW5cIiBBUEkgbWV0aG9kXG4tIHNldCBDVVJSRU5UU19QUk9KRUNUX0lEIGVudmlyb25tZW50IHZhcmlhYmxlXG4tIHNldCBcInByb2plY3RJZFwiIGluIFwiY3VycmVudHMuY29uZmlnLmpzXCIgZmlsZWA7XG5cbmV4cG9ydCBjb25zdCBjbG91ZFNlcnZpY2VVcmxFcnJvciA9IGBDYW5ub3QgcmVzb2x2ZSBjbG91ZCBzZXJ2aWNlIFVSTC4gUGxlYXNlIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbi0gcHJvdmlkZSBpdCBhcyBhIFwiY2xvdWRTZXJ2aWNlVXJsXCIgcHJvcGVydHkgZm9yIFwicnVuXCIgQVBJIG1ldGhvZFxuLSBzZXQgQ1VSUkVOVFNfQVBJX1VSTCBlbnZpcm9ubWVudCB2YXJpYWJsZVxuLSBzZXQgXCJjbG91ZFNlcnZpY2VVcmxcIiBpbiBcImN1cnJlbnRzLmNvbmZpZy5qc1wiIGZpbGVgO1xuXG5leHBvcnQgY29uc3QgY2xvdWRTZXJ2aWNlSW52YWxpZFVybEVycm9yID0gYEludmFsaWQgY2xvdWQgc2VydmljZSBVUkwgcHJvdmlkZWRgO1xuXG5leHBvcnQgY29uc3QgcmVjb3JkS2V5RXJyb3IgPSBgQ2Fubm90IHJlc29sdmUgcmVjb3JkIGtleS4gUGxlYXNlIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcblxuLSBwYXNzIGl0IGFzIGEgQ0xJIGZsYWcgJy1rLCAtLWtleSA8cmVjb3JkLWtleT4nXG4tIHByb3ZpZGUgaXQgYXMgYSBcInJlY29yZEtleVwiIHByb3BlcnR5IGZvciBcInJ1blwiIEFQSSBtZXRob2Rcbi0gc2V0IENVUlJFTlRTX1JFQ09SRF9LRVkgZW52aXJvbm1lbnQgdmFyaWFibGVcbi0gc2V0IFwicmVjb3JkS2V5XCIgaW4gXCJjdXJyZW50cy5jb25maWcuanNcIiBmaWxlXG5gO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMoXG4gIF9wYXJhbXM6IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1xuKTogVmFsaWRhdGVkQ3VycmVudHNQYXJhbWV0ZXJzIHtcbiAgY29uc3QgcGFyYW1zID0gcmVzb2x2ZUN1cnJlbnRzUGFyYW1zKF9wYXJhbXMpO1xuXG4gIGlmICghcGFyYW1zLmNsb3VkU2VydmljZVVybCkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoY2xvdWRTZXJ2aWNlVXJsRXJyb3IpO1xuICB9XG4gIGlmICghcGFyYW1zLnByb2plY3RJZCkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IocHJvamVjdElkRXJyb3IpO1xuICB9XG4gIGlmICghcGFyYW1zLnJlY29yZEtleSkge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IocmVjb3JkS2V5RXJyb3IpO1xuICB9XG5cbiAgdmFsaWRhdGVVUkwocGFyYW1zLmNsb3VkU2VydmljZVVybCk7XG5cbiAgY29uc3QgcmVxdWlyZWRQYXJhbWV0ZXJzOiBBcnJheTxrZXlvZiBDdXJyZW50c1J1blBhcmFtZXRlcnM+ID0gW1xuICAgIFwidGVzdGluZ1R5cGVcIixcbiAgICBcImJhdGNoU2l6ZVwiLFxuICAgIFwicHJvamVjdElkXCIsXG4gIF07XG4gIHJlcXVpcmVkUGFyYW1ldGVycy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBlcnJvcignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXIgXCIlc1wiJywga2V5KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcGFyYW1zLnRhZyA9IHBhcnNlVGFncyhwYXJhbXMudGFnKTtcbiAgcGFyYW1zLmF1dG9DYW5jZWxBZnRlckZhaWx1cmVzID0gZ2V0QXV0b0NhbmNlbFZhbHVlKFxuICAgIHBhcmFtcy5hdXRvQ2FuY2VsQWZ0ZXJGYWlsdXJlc1xuICApO1xuXG4gIGRlYnVnKFwidmFsaWRhdGVkIGN1cnJlbnRzIHBhcmFtczogJW9cIiwgcGFyYW1zKTtcblxuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjYXN0IGFmdGVyIGZpbmRpbmcgYSB3YXkgdG8gcHJvcGVybHkgcmVzb2x2ZSBwYXJhbXMgdHlwZSBhZnRlciB2YWxpZGF0aW9uc1xuICByZXR1cm4gcGFyYW1zIGFzIFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycztcbn1cblxuZnVuY3Rpb24gZ2V0QXV0b0NhbmNlbFZhbHVlKHZhbHVlOiB1bmtub3duKTogbnVtYmVyIHwgZmFsc2UgfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiB2YWx1ZSA/IDEgOiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcbiAgICBgYXV0b0NhbmNlbEFmdGVyRmFpbHVyZXM6IHNob3VsZCBiZSBhIHBvc2l0aXZlIGludGVnZXIgb3IgXCJmYWxzZVwiLiBHb3Q6IFwiJHt2YWx1ZX1cImBcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2ZmbGluZShwYXJhbXM6IEN1cnJlbnRzUnVuUGFyYW1ldGVycykge1xuICByZXR1cm4gcGFyYW1zLnJlY29yZCA9PT0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGFncyh0YWdTdHJpbmc6IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1tcInRhZ1wiXSk6IHN0cmluZ1tdIHtcbiAgaWYgKCF0YWdTdHJpbmcpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnU3RyaW5nKSkge1xuICAgIHJldHVybiB0YWdTdHJpbmcuZmlsdGVyKEJvb2xlYW4pO1xuICB9XG4gIHJldHVybiB0YWdTdHJpbmdcbiAgICAuc3BsaXQoXCIsXCIpXG4gICAgLm1hcCgodGFnKSA9PiB0YWcudHJpbSgpKVxuICAgIC5maWx0ZXIoQm9vbGVhbik7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVVJMKHVybDogc3RyaW5nKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh1cmwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGAke2Nsb3VkU2VydmljZUludmFsaWRVcmxFcnJvcn06IFwiJHt1cmx9XCJgKTtcbiAgfVxufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJucyBDeXByZXNzIG9wdGlvbnMgd2l0aG91dCBpdGVtcyB0aGF0IGFmZmVjdCByZWNvcmRpbmcgbW9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3lwcmVzc1J1bkFQSVBhcmFtcyhcbiAgcGFyYW1zOiBDdXJyZW50c1J1blBhcmFtZXRlcnNcbik6IEN5cHJlc3NSdW5QYXJhbWV0ZXJzIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5fLnBpY2tCeShcbiAgICAgIF8ub21pdChwYXJhbXMsIFtcbiAgICAgICAgXCJhdXRvQ2FuY2VsQWZ0ZXJGYWlsdXJlc1wiLFxuICAgICAgICBcImNsb3VkU2VydmljZVVybFwiLFxuICAgICAgICBcImJhdGNoU2l6ZVwiLFxuICAgICAgICBcInByb2plY3RJZFwiLFxuICAgICAgICBcImtleVwiLFxuICAgICAgICBcInJlY29yZEtleVwiLFxuICAgICAgICBcInJlY29yZFwiLFxuICAgICAgICBcImdyb3VwXCIsXG4gICAgICAgIFwicGFyYWxsZWxcIixcbiAgICAgICAgXCJ0YWdcIixcbiAgICAgICAgXCJjaUJ1aWxkSWRcIixcbiAgICAgICAgXCJzcGVjXCIsXG4gICAgICAgIFwiZXhpdFwiLFxuICAgICAgICBcImhlYWRlZFwiLFxuICAgICAgICBcImhlYWRsZXNzXCIsXG4gICAgICBdKSxcbiAgICAgIEJvb2xlYW5cbiAgICApLFxuICAgIHJlY29yZDogZmFsc2UsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwcm9jZXNzUGFyYW1zKFxuICBwYXJhbXM6IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1xuKTogQ3VycmVudHNSdW5QYXJhbWV0ZXJzIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wYXJhbXMsXG4gICAgc3BlYzogcHJvY2Vzc1NwZWNQYXJhbShwYXJhbXMuc3BlYyksXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NTcGVjUGFyYW0oXG4gIHNwZWM6IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1tcInNwZWNcIl1cbik6IHN0cmluZ1tdIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFzcGVjKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHNwZWMpKSB7XG4gICAgcmV0dXJuIF8uZmxhdHRlbihzcGVjLm1hcCgoaSkgPT4gaS5zcGxpdChcIixcIikpKTtcbiAgfVxuXG4gIHJldHVybiBzcGVjLnNwbGl0KFwiLFwiKTtcbn1cbiIsICJpbXBvcnQgY3lwcmVzcyBmcm9tIFwiY3lwcmVzc1wiO1xuaW1wb3J0IHtcbiAgQ3VycmVudHNSdW5QYXJhbWV0ZXJzLFxuICBDeXByZXNzUmVzdWx0LFxuICBWYWxpZGF0ZWRDdXJyZW50c1BhcmFtZXRlcnMsXG59IGZyb20gXCJjeXByZXNzLWNsb3VkL3R5cGVzXCI7XG5pbXBvcnQgRGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBnZXRDeXByZXNzUnVuQVBJUGFyYW1zIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKFwiY3VycmVudHM6Y3lwcmVzc1wiKTtcbmludGVyZmFjZSBSdW5DeXByZXNzU3BlY0ZpbGUge1xuICBzcGVjOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5CYXJlQ3lwcmVzcyhwYXJhbXM6IEN1cnJlbnRzUnVuUGFyYW1ldGVycyA9IHt9KSB7XG4gIC8vIHJldmVydCBjdXJyZW50cyBwYXJhbXMgdG8gY3lwcmVzcyBwYXJhbXNcbiAgLy8gZXhjbHVkZSByZWNvcmQgbW9kZSBwYXJhbXNcbiAgY29uc3QgcCA9IHtcbiAgICAuLi5wYXJhbXMsXG4gICAgY2lCdWlsZElkOiB1bmRlZmluZWQsXG4gICAgdGFnOiB1bmRlZmluZWQsXG4gICAgcGFyYWxsZWw6IHVuZGVmaW5lZCxcbiAgICByZWNvcmQ6IGZhbHNlLFxuICAgIGdyb3VwOiB1bmRlZmluZWQsXG4gICAgc3BlYzogXy5mbGF0dGVuKHBhcmFtcy5zcGVjKS5qb2luKFwiLFwiKSxcbiAgfTtcbiAgZGVidWcoXCJSdW5uaW5nIGJhcmUgQ3lwcmVzcyB3aXRoIHBhcmFtcyAlb1wiLCBwKTtcbiAgcmV0dXJuIGN5cHJlc3MucnVuKHApO1xufVxuXG4vKipcbiAqIFJ1biBDeXByZXNzIHRlc3RzLCB3ZSBuZWVkIHRvIHBhc3MgZG93biB0aGUgc3RyaXBwZWQgb3B0aW9ucyBhcyBpZiB3ZSd2ZSByZWNlaXZlZCB0aGVtIGZyb20gdGhlIENMSVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuU3BlY0ZpbGUoXG4gIHsgc3BlYyB9OiBSdW5DeXByZXNzU3BlY0ZpbGUsXG4gIGN5cHJlc3NSdW5PcHRpb25zOiBWYWxpZGF0ZWRDdXJyZW50c1BhcmFtZXRlcnNcbikge1xuICBjb25zdCBydW5BUElPcHRpb25zID0gZ2V0Q3lwcmVzc1J1bkFQSVBhcmFtcyhjeXByZXNzUnVuT3B0aW9ucyk7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5ydW5BUElPcHRpb25zLFxuICAgIGNvbmZpZzoge1xuICAgICAgLi4ucnVuQVBJT3B0aW9ucy5jb25maWcsXG4gICAgICB0cmFzaEFzc2V0c0JlZm9yZVJ1bnM6IGZhbHNlLFxuICAgIH0sXG4gICAgZW52OiB7XG4gICAgICAuLi5ydW5BUElPcHRpb25zLmVudixcbiAgICAgIGN1cnJlbnRzX3dzOiB0cnVlLFxuICAgIH0sXG4gICAgc3BlYyxcbiAgfTtcbiAgZGVidWcoXCJydW5uaW5nIGN5cHJlc3Mgd2l0aCBvcHRpb25zICVvXCIsIG9wdGlvbnMpO1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBjeXByZXNzLnJ1bihvcHRpb25zKTtcblxuICBkZWJ1ZyhcImN5cHJlc3MgcnVuIHJlc3VsdCAlb1wiLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgY29uc3QgcnVuU3BlY0ZpbGVTYWZlID0gYXN5bmMgKFxuICB7IHNwZWMgfTogUnVuQ3lwcmVzc1NwZWNGaWxlLFxuICBjeXByZXNzUnVuT3B0aW9uczogVmFsaWRhdGVkQ3VycmVudHNQYXJhbWV0ZXJzXG4pOiBQcm9taXNlPEN5cHJlc3NSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgcnVuU3BlY0ZpbGUoeyBzcGVjIH0sIGN5cHJlc3NSdW5PcHRpb25zKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBkZWJ1ZyhcImN5cHJlc3MgcnVuIGV4Y2VwdGlvbiAlb1wiLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogXCJmYWlsZWRcIixcbiAgICAgIGZhaWx1cmVzOiAxLFxuICAgICAgbWVzc2FnZTogYEN5cHJlc3MgcHJvY2VzcyBjcmFzaGVkIHdpdGggYW4gZXJyb3I6XFxuJHtcbiAgICAgICAgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlXG4gICAgICB9XFxuJHsoZXJyb3IgYXMgRXJyb3IpLnN0YWNrfX1gLFxuICAgIH07XG4gIH1cbn07XG4iLCAiLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGdpdCBmcm9tIFwiQGN5cHJlc3MvY29tbWl0LWluZm9cIjtcbmltcG9ydCB7IGdldENvbW1pdERlZmF1bHRzIH0gZnJvbSBcIi4vY2lQcm92aWRlclwiO1xuXG5leHBvcnQgY29uc3QgZ2V0R2l0SW5mbyA9IGFzeW5jIChwcm9qZWN0Um9vdDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGNvbW1pdEluZm8gPSBhd2FpdCBnaXQuY29tbWl0SW5mbyhwcm9qZWN0Um9vdCk7XG4gIHJldHVybiBnZXRDb21taXREZWZhdWx0cyh7XG4gICAgYnJhbmNoOiBjb21taXRJbmZvLmJyYW5jaCxcbiAgICByZW1vdGVPcmlnaW46IGNvbW1pdEluZm8ucmVtb3RlLFxuICAgIGF1dGhvckVtYWlsOiBjb21taXRJbmZvLmVtYWlsLFxuICAgIGF1dGhvck5hbWU6IGNvbW1pdEluZm8uYXV0aG9yLFxuICAgIG1lc3NhZ2U6IGNvbW1pdEluZm8ubWVzc2FnZSxcbiAgICBzaGE6IGNvbW1pdEluZm8uc2hhLFxuICB9KTtcbn07XG4iLCAiaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IHsgRGV0ZWN0ZWRCcm93c2VyLCBQbGF0Zm9ybSB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gXCIuLi9sb2dcIjtcblxuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOmJyb3dzZXJcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBndWVzc0Jyb3dzZXIoXG4gIGJyb3dzZXI6IHN0cmluZyxcbiAgYXZhaWxhYmxlQnJvd3NlcnM6IERldGVjdGVkQnJvd3NlcltdID0gW11cbik6IFBpY2s8UGxhdGZvcm0sIFwiYnJvd3Nlck5hbWVcIiB8IFwiYnJvd3NlclZlcnNpb25cIj4ge1xuICBkZWJ1ZyhcbiAgICBcImd1ZXNzaW5nIGJyb3dzZXIgZnJvbSAnJXMnLCBhdmFpbGFibGUgYnJvd3NlcnM6ICVvXCIsXG4gICAgYnJvd3NlcixcbiAgICBhdmFpbGFibGVCcm93c2Vyc1xuICApO1xuICAvLyB0cnkgaWRlbnRpZnlpbmcgdGhlIGJyb3dzZXIgYnkgbmFtZSBmaXJzdFxuICBsZXQgcmVzdWx0ID0gYXZhaWxhYmxlQnJvd3NlcnMuZmluZCgoYikgPT4gYi5uYW1lID09PSBicm93c2VyKTtcblxuICBpZiAocmVzdWx0KSB7XG4gICAgZGVidWcoXCJpZGVudGlmaWVkIGJyb3dzZXIgYnkgbmFtZTogJW9cIiwgcmVzdWx0KTtcbiAgICByZXR1cm4ge1xuICAgICAgYnJvd3Nlck5hbWU6IHJlc3VsdC5kaXNwbGF5TmFtZSxcbiAgICAgIGJyb3dzZXJWZXJzaW9uOiByZXN1bHQudmVyc2lvbixcbiAgICB9O1xuICB9XG5cbiAgLy8gb3RoZXJ3aXNlLCB0cnkgaWRlbnRpZnlpbmcgYnkgdGhlIHBhdGhcbiAgcmVzdWx0ID0gYXZhaWxhYmxlQnJvd3NlcnMuZmluZCgoYikgPT4gYi5wYXRoID09PSBicm93c2VyKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGRlYnVnKFwiaWRlbnRpZmllZCBicm93c2VyIGJ5IHBhdGg6ICVvXCIsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJyb3dzZXJOYW1lOiByZXN1bHQuZGlzcGxheU5hbWUgPz8gcmVzdWx0Lm5hbWUsXG4gICAgICBicm93c2VyVmVyc2lvbjogcmVzdWx0LnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIHdhcm4oXCJVbmFibGUgdG8gaWRlbnRpZnkgYnJvd3NlciBuYW1lIGFuZCB2ZXJzaW9uXCIpO1xuXG4gIC8vIG90aGVyd2lzZSwgcmV0dXJuIGR1bW15IGJyb3dzZXJcbiAgcmV0dXJuIHtcbiAgICBicm93c2VyTmFtZTogXCJ1bmtub3duXCIsXG4gICAgYnJvd3NlclZlcnNpb246IFwidW5rbm93blwiLFxuICB9O1xufVxuIiwgImltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCBnZXRvcyBmcm9tIFwiZ2V0b3NcIjtcbmltcG9ydCB7IGNwdXMsIGZyZWVtZW0sIHBsYXRmb3JtLCByZWxlYXNlLCB0b3RhbG1lbSB9IGZyb20gXCJvc1wiO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSBcInV0aWxcIjtcbmNvbnN0IGRlYnVnID0gRGVidWcoXCJjdXJyZW50czpwbGF0Zm9ybVwiKTtcblxuY29uc3QgZ2V0T3NWZXJzaW9uID0gYXN5bmMgKCkgPT4ge1xuICBpZiAocGxhdGZvcm0oKSA9PT0gXCJsaW51eFwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxpbnV4T3MgPSBhd2FpdCBwcm9taXNpZnkoZ2V0b3MpKCk7XG4gICAgICBpZiAoXCJkaXN0XCIgaW4gbGludXhPcyAmJiBcInJlbGVhc2VcIiBpbiBsaW51eE9zKSB7XG4gICAgICAgIHJldHVybiBbbGludXhPcy5kaXN0LCBsaW51eE9zLnJlbGVhc2VdLmpvaW4oXCIgLSBcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVsZWFzZSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHJlbGVhc2UoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbGVhc2UoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQbGF0Zm9ybUluZm8gPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IG9zVmVyc2lvbiA9IGF3YWl0IGdldE9zVmVyc2lvbigpO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgb3NOYW1lOiBwbGF0Zm9ybSgpLFxuICAgIG9zVmVyc2lvbixcbiAgICBvc0NwdXM6IGNwdXMoKSxcbiAgICBvc01lbW9yeToge1xuICAgICAgZnJlZTogZnJlZW1lbSgpLFxuICAgICAgdG90YWw6IHRvdGFsbWVtKCksXG4gICAgfSxcbiAgfTtcbiAgZGVidWcoXCJwbGF0Zm9ybSBpbmZvOiAlb1wiLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsICJpbXBvcnQgeyBNZXJnZWRDb25maWcgfSBmcm9tIFwiLi4vY29uZmlnXCI7XG5pbXBvcnQgeyBndWVzc0Jyb3dzZXIgfSBmcm9tIFwiLi9icm93c2VyXCI7XG5pbXBvcnQgeyBnZXRQbGF0Zm9ybUluZm8gfSBmcm9tIFwiLi9wbGF0Zm9ybVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGxhdGZvcm0oe1xuICBicm93c2VyLFxuICBjb25maWcsXG59OiB7XG4gIGJyb3dzZXI/OiBzdHJpbmc7XG4gIGNvbmZpZzogTWVyZ2VkQ29uZmlnO1xufSkge1xuICByZXR1cm4ge1xuICAgIC4uLihhd2FpdCBnZXRQbGF0Zm9ybUluZm8oKSksXG4gICAgLi4uZ3Vlc3NCcm93c2VyKGJyb3dzZXIgPz8gXCJlbGVjdHJvblwiLCBjb25maWcucmVzb2x2ZWQ/LmJyb3dzZXJzKSxcbiAgfTtcbn1cbiIsICJpbXBvcnQgeyBDeXByZXNzUmVzdWx0LCBTY3JlZW5zaG90QXJ0aWZhY3QgfSBmcm9tIFwiY3lwcmVzcy1jbG91ZC90eXBlc1wiO1xuaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcIm5hbm9pZFwiO1xuaW1wb3J0IHtcbiAgU2V0SW5zdGFuY2VUZXN0c1BheWxvYWQsXG4gIFRlc3RTdGF0ZSxcbiAgVXBkYXRlSW5zdGFuY2VSZXN1bHRzUGF5bG9hZCxcbn0gZnJvbSBcIi4uL2FwaVwiO1xuaW1wb3J0IHsgTWVyZ2VkQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZy9jb25maWdcIjtcblxuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOnJlc3VsdHNcIik7XG5cbmV4cG9ydCBjb25zdCBpc1N1Y2Nlc3NSZXN1bHQgPSAoXG4gIHJlc3VsdDogQ3lwcmVzc1Jlc3VsdFxuKTogcmVzdWx0IGlzIEN5cHJlc3NDb21tYW5kTGluZS5DeXByZXNzUnVuUmVzdWx0ID0+IHtcbiAgcmV0dXJuIHJlc3VsdC5zdGF0dXMgPT09IFwiZmluaXNoZWRcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTY3JlZW5zaG90c1N1bW1hcnkgPSAoXG4gIHRlc3RzOiBDeXByZXNzQ29tbWFuZExpbmUuVGVzdFJlc3VsdFtdID0gW11cbik6IFNjcmVlbnNob3RBcnRpZmFjdFtdID0+IHtcbiAgcmV0dXJuIHRlc3RzLmZsYXRNYXAoKHRlc3QsIGkpID0+XG4gICAgdGVzdC5hdHRlbXB0cy5mbGF0TWFwKChhLCBhaSkgPT5cbiAgICAgIGEuc2NyZWVuc2hvdHMuZmxhdE1hcCgocykgPT4gKHtcbiAgICAgICAgLi4ucyxcbiAgICAgICAgdGVzdElkOiBgciR7aX1gLFxuICAgICAgICB0ZXN0QXR0ZW1wdEluZGV4OiBhaSxcbiAgICAgICAgc2NyZWVuc2hvdElkOiBuYW5vaWQoKSxcbiAgICAgIH0pKVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0cyA9IChzdGF0czogQ3lwcmVzc0NvbW1hbmRMaW5lLlJ1blJlc3VsdFtcInN0YXRzXCJdKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdHMsXG4gICAgd2FsbENsb2NrRHVyYXRpb246IHN0YXRzLmR1cmF0aW9uLFxuICAgIHdhbGxDbG9ja1N0YXJ0ZWRBdDogc3RhdHMuc3RhcnRlZEF0LFxuICAgIHdhbGxDbG9ja0VuZGVkQXQ6IHN0YXRzLmVuZGVkQXQsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VGVzdEF0dGVtcHQgPSAoYXR0ZW1wdDogQ3lwcmVzc0NvbW1hbmRMaW5lLkF0dGVtcHRSZXN1bHQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5hdHRlbXB0LFxuICAgIHN0YXRlOiBhdHRlbXB0LnN0YXRlIGFzIFRlc3RTdGF0ZSxcbiAgICB3YWxsQ2xvY2tEdXJhdGlvbjogYXR0ZW1wdC5kdXJhdGlvbixcbiAgICB3YWxsQ2xvY2tTdGFydGVkQXQ6IGF0dGVtcHQuc3RhcnRlZEF0LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEluc3RhbmNlUmVzdWx0UGF5bG9hZCA9IChcbiAgcnVuUmVzdWx0OiBDeXByZXNzQ29tbWFuZExpbmUuUnVuUmVzdWx0XG4pOiBVcGRhdGVJbnN0YW5jZVJlc3VsdHNQYXlsb2FkID0+IHtcbiAgY29uc3QgYWx0VGVzdHMgPSBbXTtcbiAgaWYgKHJ1blJlc3VsdC5lcnJvciAmJiAhcnVuUmVzdWx0LnRlc3RzPy5sZW5ndGgpIHtcbiAgICBhbHRUZXN0cy5wdXNoKGdldEZha2VUZXN0RnJvbUV4Y2VwdGlvbihydW5SZXN1bHQuZXJyb3IsIHJ1blJlc3VsdC5zdGF0cykpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhdHM6IGdldFN0YXRzKHJ1blJlc3VsdC5zdGF0cyksXG4gICAgcmVwb3J0ZXJTdGF0czogcnVuUmVzdWx0LnJlcG9ydGVyU3RhdHMsXG4gICAgZXhjZXB0aW9uOiBydW5SZXN1bHQuZXJyb3IgPz8gbnVsbCxcbiAgICB2aWRlbzogISFydW5SZXN1bHQudmlkZW8sIC8vIERpZCB0aGUgaW5zdGFuY2UgZ2VuZXJhdGUgYSB2aWRlbz9cbiAgICBzY3JlZW5zaG90czogZ2V0U2NyZWVuc2hvdHNTdW1tYXJ5KHJ1blJlc3VsdC50ZXN0cyA/PyBbXSksXG4gICAgdGVzdHM6XG4gICAgICBydW5SZXN1bHQudGVzdHM/Lm1hcCgodGVzdCwgaSkgPT4gKHtcbiAgICAgICAgZGlzcGxheUVycm9yOiB0ZXN0LmRpc3BsYXlFcnJvcixcbiAgICAgICAgc3RhdGU6IHRlc3Quc3RhdGUgYXMgVGVzdFN0YXRlLFxuICAgICAgICBob29rczogcnVuUmVzdWx0Lmhvb2tzLFxuICAgICAgICBhdHRlbXB0czogdGVzdC5hdHRlbXB0cz8ubWFwKGdldFRlc3RBdHRlbXB0KSA/PyBbXSxcbiAgICAgICAgY2xpZW50SWQ6IGByJHtpfWAsXG4gICAgICB9KSkgPz8gYWx0VGVzdHMsXG4gIH07XG59O1xuXG5mdW5jdGlvbiBnZXRGYWtlVGVzdEZyb21FeGNlcHRpb24oXG4gIGVycm9yOiBzdHJpbmcsXG4gIHN0YXRzOiBDeXByZXNzQ29tbWFuZExpbmUuUnVuUmVzdWx0W1wic3RhdHNcIl1cbikge1xuICByZXR1cm4ge1xuICAgIHRpdGxlOiBbXCJVbmtub3duXCJdLFxuICAgIGJvZHk6IFwiXCIsXG4gICAgZGlzcGxheUVycm9yOiBlcnJvci5zcGxpdChcIlxcblwiKVswXSxcbiAgICBzdGF0ZTogXCJmYWlsZWRcIixcbiAgICBob29rczogW10sXG4gICAgYXR0ZW1wdHM6IFtcbiAgICAgIGdldFRlc3RBdHRlbXB0KHtcbiAgICAgICAgc3RhdGU6IFwiZmFpbGVkXCIsXG4gICAgICAgIGR1cmF0aW9uOiAwLFxuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIG5hbWU6IFwiRXJyb3JcIixcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5zcGxpdChcIlxcblwiKVswXSxcbiAgICAgICAgICBzdGFjazogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIHNjcmVlbnNob3RzOiBbXSxcbiAgICAgICAgc3RhcnRlZEF0OiBzdGF0cy5zdGFydGVkQXQsXG4gICAgICAgIHZpZGVvVGltZXN0YW1wOiAwLFxuICAgICAgfSksXG4gICAgXSxcbiAgICBjbGllbnRJZDogXCJyMFwiLFxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgZ2V0SW5zdGFuY2VUZXN0c1BheWxvYWQgPSAoXG4gIHJ1blJlc3VsdDogQ3lwcmVzc0NvbW1hbmRMaW5lLlJ1blJlc3VsdCxcbiAgY29uZmlnOiBDeXByZXNzLlJlc29sdmVkQ29uZmlnT3B0aW9uc1xuKTogU2V0SW5zdGFuY2VUZXN0c1BheWxvYWQgPT4ge1xuICBjb25zdCBhbHRUZXN0cyA9IFtdO1xuICBpZiAocnVuUmVzdWx0LmVycm9yICYmICFydW5SZXN1bHQudGVzdHM/Lmxlbmd0aCkge1xuICAgIGFsdFRlc3RzLnB1c2goZ2V0RmFrZVRlc3RGcm9tRXhjZXB0aW9uKHJ1blJlc3VsdC5lcnJvciwgcnVuUmVzdWx0LnN0YXRzKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb25maWcsXG4gICAgdGVzdHM6XG4gICAgICBydW5SZXN1bHQudGVzdHM/Lm1hcCgodGVzdCwgaSkgPT4gKHtcbiAgICAgICAgdGl0bGU6IHRlc3QudGl0bGUsXG4gICAgICAgIGNvbmZpZzogbnVsbCxcbiAgICAgICAgYm9keTogdGVzdC5ib2R5LFxuICAgICAgICBjbGllbnRJZDogYHIke2l9YCxcbiAgICAgICAgaG9va0lkczogW10sXG4gICAgICB9KSkgPz8gYWx0VGVzdHMsXG4gICAgaG9va3M6IHJ1blJlc3VsdC5ob29rcyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzdW1tYXJpemVUZXN0UmVzdWx0cyA9IChcbiAgaW5wdXQ6IEN5cHJlc3NDb21tYW5kTGluZS5DeXByZXNzUnVuUmVzdWx0W10sXG4gIGNvbmZpZzogTWVyZ2VkQ29uZmlnXG4pOiBDeXByZXNzQ29tbWFuZExpbmUuQ3lwcmVzc1J1blJlc3VsdCA9PiB7XG4gIGlmICghaW5wdXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdldEVtcHR5Q3lwcmVzc1Jlc3VsdHMoY29uZmlnKTtcbiAgfVxuXG4gIGNvbnN0IG92ZXJhbGwgPSBpbnB1dC5yZWR1Y2UoXG4gICAgKFxuICAgICAgYWNjLFxuICAgICAge1xuICAgICAgICB0b3RhbER1cmF0aW9uLFxuICAgICAgICB0b3RhbEZhaWxlZCxcbiAgICAgICAgdG90YWxQYXNzZWQsXG4gICAgICAgIHRvdGFsUGVuZGluZyxcbiAgICAgICAgdG90YWxTa2lwcGVkLFxuICAgICAgICB0b3RhbFRlc3RzLFxuICAgICAgICB0b3RhbFN1aXRlcyxcbiAgICAgIH1cbiAgICApID0+ICh7XG4gICAgICB0b3RhbER1cmF0aW9uOiBhY2MudG90YWxEdXJhdGlvbiArIHRvdGFsRHVyYXRpb24sXG4gICAgICB0b3RhbFN1aXRlczogYWNjLnRvdGFsU3VpdGVzICsgdG90YWxTdWl0ZXMsXG4gICAgICB0b3RhbFBlbmRpbmc6IGFjYy50b3RhbFBlbmRpbmcgKyB0b3RhbFBlbmRpbmcsXG4gICAgICB0b3RhbEZhaWxlZDogYWNjLnRvdGFsRmFpbGVkICsgdG90YWxGYWlsZWQsXG4gICAgICB0b3RhbFNraXBwZWQ6IGFjYy50b3RhbFNraXBwZWQgKyB0b3RhbFNraXBwZWQsXG4gICAgICB0b3RhbFBhc3NlZDogYWNjLnRvdGFsUGFzc2VkICsgdG90YWxQYXNzZWQsXG4gICAgICB0b3RhbFRlc3RzOiBhY2MudG90YWxUZXN0cyArIHRvdGFsVGVzdHMsXG4gICAgfSksXG4gICAgZW1wdHlTdGF0c1xuICApO1xuICBjb25zdCBmaXJzdFJlc3VsdCA9IGlucHV0WzBdO1xuICBjb25zdCBzdGFydEl0ZW1zID0gaW5wdXQubWFwKChpKSA9PiBpLnN0YXJ0ZWRUZXN0c0F0KS5zb3J0KCk7XG4gIGNvbnN0IGVuZEl0ZW1zID0gaW5wdXQubWFwKChpKSA9PiBpLmVuZGVkVGVzdHNBdCkuc29ydCgpO1xuICBjb25zdCBydW5zID0gaW5wdXQubWFwKChpKSA9PiBpLnJ1bnMpLmZsYXQoKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5vdmVyYWxsLFxuICAgIHJ1bnMsXG4gICAgc3RhcnRlZFRlc3RzQXQ6IF8uZmlyc3Qoc3RhcnRJdGVtcykgYXMgc3RyaW5nLFxuICAgIGVuZGVkVGVzdHNBdDogXy5sYXN0KGVuZEl0ZW1zKSBhcyBzdHJpbmcsXG4gICAgLi4uXy5waWNrKFxuICAgICAgZmlyc3RSZXN1bHQsXG4gICAgICBcImJyb3dzZXJOYW1lXCIsXG4gICAgICBcImJyb3dzZXJWZXJzaW9uXCIsXG4gICAgICBcImJyb3dzZXJQYXRoXCIsXG4gICAgICBcIm9zTmFtZVwiLFxuICAgICAgXCJvc1ZlcnNpb25cIixcbiAgICAgIFwiY3lwcmVzc1ZlcnNpb25cIixcbiAgICAgIFwiY29uZmlnXCJcbiAgICApLFxuICAgIHN0YXR1czogXCJmaW5pc2hlZFwiLFxuICB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVtcHR5Q3lwcmVzc1Jlc3VsdHMoXG4gIGNvbmZpZzogTWVyZ2VkQ29uZmlnXG4pOiBDeXByZXNzQ29tbWFuZExpbmUuQ3lwcmVzc1J1blJlc3VsdCB7XG4gIHJldHVybiB7XG4gICAgLi4uZW1wdHlTdGF0cyxcbiAgICBzdGF0dXM6IFwiZmluaXNoZWRcIixcbiAgICBzdGFydGVkVGVzdHNBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIGVuZGVkVGVzdHNBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHJ1bnM6IFtdLFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25maWcsXG4gIH07XG59XG5jb25zdCBlbXB0eVN0YXRzID0ge1xuICB0b3RhbER1cmF0aW9uOiAwLFxuICB0b3RhbFN1aXRlczogMCxcbiAgdG90YWxQZW5kaW5nOiAwLFxuICB0b3RhbEZhaWxlZDogMCxcbiAgdG90YWxTa2lwcGVkOiAwLFxuICB0b3RhbFBhc3NlZDogMCxcbiAgdG90YWxUZXN0czogMCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYWlsZWREdW1teVJlc3VsdCh7XG4gIHNwZWNzLFxuICBlcnJvcixcbiAgY29uZmlnLFxufToge1xuICBzcGVjczogc3RyaW5nW107XG4gIGVycm9yOiBzdHJpbmc7XG4gIGNvbmZpZzogYW55OyAvLyBUT0RPIHRpZ2h0ZW4gdGhpcyB1cFxufSk6IEN5cHJlc3NDb21tYW5kTGluZS5DeXByZXNzUnVuUmVzdWx0IHtcbiAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgcmV0dXJuIHtcbiAgICBjb25maWcsXG4gICAgc3RhdHVzOiBcImZpbmlzaGVkXCIsXG4gICAgc3RhcnRlZFRlc3RzQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICBlbmRlZFRlc3RzQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB0b3RhbER1cmF0aW9uOiAwLFxuICAgIHRvdGFsU3VpdGVzOiAxLFxuICAgIHRvdGFsRmFpbGVkOiAxLFxuICAgIHRvdGFsUGFzc2VkOiAwLFxuICAgIHRvdGFsUGVuZGluZzogMCxcbiAgICB0b3RhbFNraXBwZWQ6IDAsXG4gICAgdG90YWxUZXN0czogMSxcbiAgICBicm93c2VyTmFtZTogXCJ1bmtub3duXCIsXG4gICAgYnJvd3NlclZlcnNpb246IFwidW5rbm93blwiLFxuICAgIGJyb3dzZXJQYXRoOiBcInVua25vd25cIixcbiAgICBvc05hbWU6IFwidW5rbm93blwiLFxuICAgIG9zVmVyc2lvbjogXCJ1bmtub3duXCIsXG4gICAgY3lwcmVzc1ZlcnNpb246IFwidW5rbm93blwiLFxuICAgIHJ1bnM6IHNwZWNzLm1hcCgocykgPT4gKHtcbiAgICAgIHN0YXRzOiB7XG4gICAgICAgIHN1aXRlczogMSxcbiAgICAgICAgdGVzdHM6IDEsXG4gICAgICAgIHBhc3NlczogMCxcbiAgICAgICAgcGVuZGluZzogMCxcbiAgICAgICAgc2tpcHBlZDogMCxcbiAgICAgICAgZmFpbHVyZXM6IDEsXG4gICAgICAgIHN0YXJ0ZWRBdDogc3RhcnQsXG4gICAgICAgIGVuZGVkQXQ6IGVuZCxcbiAgICAgICAgZHVyYXRpb246IDAsXG4gICAgICB9LFxuICAgICAgcmVwb3J0ZXI6IFwic3BlY1wiLFxuICAgICAgcmVwb3J0ZXJTdGF0czoge30sXG4gICAgICBob29rczogW10sXG4gICAgICBlcnJvcixcbiAgICAgIHZpZGVvOiBudWxsLFxuICAgICAgc3BlYzoge1xuICAgICAgICBuYW1lOiBzLFxuICAgICAgICByZWxhdGl2ZTogXCJcIixcbiAgICAgICAgYWJzb2x1dGU6IFwiXCIsXG4gICAgICAgIHJlbGF0aXZlVG9Db21tb25Sb290OiBcIlwiLFxuICAgICAgfSxcbiAgICAgIHRlc3RzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogW1wiVW5rbm93blwiXSxcbiAgICAgICAgICBzdGF0ZTogXCJmYWlsZWRcIixcbiAgICAgICAgICBib2R5OiBcIi8vIFRoaXMgdGVzdCBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBkdWUgdG8gZXhlY3V0aW9uIGZhaWx1cmVcIixcbiAgICAgICAgICBkaXNwbGF5RXJyb3I6IGVycm9yLFxuICAgICAgICAgIGF0dGVtcHRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcImZhaWxlZFwiLFxuICAgICAgICAgICAgICBzdGFydGVkQXQ6IHN0YXJ0LFxuICAgICAgICAgICAgICBkdXJhdGlvbjogMCxcbiAgICAgICAgICAgICAgdmlkZW9UaW1lc3RhbXA6IDAsXG4gICAgICAgICAgICAgIHNjcmVlbnNob3RzOiBbXSxcbiAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsb3VkRXhlY3V0aW9uRXJyb3JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICAgICAgICAgICAgICBzdGFjazogXCJcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBzaG91bGRVcGxvYWRWaWRlbzogZmFsc2UsXG4gICAgICBza2lwcGVkU3BlYzogZmFsc2UsXG4gICAgfSkpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplUmF3UmVzdWx0KFxuICByYXdSZXN1bHQ6IEN5cHJlc3NSZXN1bHQsXG4gIHNwZWNzOiBzdHJpbmdbXSxcbiAgY29uZmlnOiBNZXJnZWRDb25maWdcbik6IEN5cHJlc3NDb21tYW5kTGluZS5DeXByZXNzUnVuUmVzdWx0IHtcbiAgaWYgKCFpc1N1Y2Nlc3NSZXN1bHQocmF3UmVzdWx0KSkge1xuICAgIHJldHVybiBnZXRGYWlsZWREdW1teVJlc3VsdCh7XG4gICAgICBzcGVjcyxcbiAgICAgIGVycm9yOiByYXdSZXN1bHQubWVzc2FnZSxcbiAgICAgIGNvbmZpZyxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmF3UmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VtbWFyeUZvclNwZWMoXG4gIHNwZWM6IHN0cmluZyxcbiAgcnVuUmVzdWx0OiBDeXByZXNzQ29tbWFuZExpbmUuQ3lwcmVzc1J1blJlc3VsdFxuKSB7XG4gIGNvbnN0IHJ1biA9IHJ1blJlc3VsdC5ydW5zLmZpbmQoKHIpID0+IHIuc3BlYy5yZWxhdGl2ZSA9PT0gc3BlYyk7XG4gIGlmICghcnVuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHN0YXRzID0gZ2V0U3RhdHMocnVuLnN0YXRzKTtcbiAgLy8gYWRqdXN0IHRoZSByZXN1bHQgZm9yIHNpbmdlIHNwZWNcbiAgcmV0dXJuIHtcbiAgICAuLi5ydW5SZXN1bHQsXG4gICAgcnVuczogW3J1bl0sXG4gICAgdG90YWxTdWl0ZXM6IDEsXG4gICAgdG90YWxEdXJhdGlvbjogc3RhdHMud2FsbENsb2NrRHVyYXRpb24sXG4gICAgdG90YWxUZXN0czogc3RhdHMudGVzdHMsXG4gICAgdG90YWxGYWlsZWQ6IHN0YXRzLmZhaWx1cmVzLFxuICAgIHRvdGFsUGFzc2VkOiBzdGF0cy5wYXNzZXMsXG4gICAgdG90YWxQZW5kaW5nOiBzdGF0cy5wZW5kaW5nLFxuICAgIHRvdGFsU2tpcHBlZDogc3RhdHMuc2tpcHBlZCxcbiAgICBzdGFydGVkVGVzdHNBdDogc3RhdHMud2FsbENsb2NrU3RhcnRlZEF0LFxuICAgIGVuZGVkVGVzdHNBdDogc3RhdHMud2FsbENsb2NrRW5kZWRBdCxcbiAgfTtcbn1cbiIsICJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgcHJldHR5TVMgZnJvbSBcInByZXR0eS1tc1wiO1xuaW1wb3J0IHsgdGFibGUgfSBmcm9tIFwidGFibGVcIjtcbmltcG9ydCB7IGN5YW4sIGdyYXksIGdyZWVuLCByZWQsIHdoaXRlIH0gZnJvbSBcIi4uL2xvZ1wiO1xuXG5jb25zdCBmYWlsdXJlSWNvbiA9IHJlZChcIlx1MjcxNlwiKTtcbmNvbnN0IHN1Y2Nlc3NJY29uID0gZ3JlZW4oXCJcdTI3MTRcIik7XG5cbmV4cG9ydCBjb25zdCBzdW1tYXJ5VGFibGUgPSAocjogQ3lwcmVzc0NvbW1hbmRMaW5lLkN5cHJlc3NSdW5SZXN1bHQpID0+IHtcbiAgY29uc3Qgb3ZlcmFsbFNwZWNDb3VudCA9IHIucnVucy5sZW5ndGg7XG4gIGNvbnN0IGZhaWxlZFNwZWNzQ291bnQgPSBfLnN1bShcbiAgICByLnJ1bnMuZmlsdGVyKCh2KSA9PiB2LnN0YXRzLmZhaWx1cmVzICsgdi5zdGF0cy5za2lwcGVkID4gMCkubWFwKCgpID0+IDEpXG4gICk7XG4gIGNvbnN0IGhhc0ZhaWxlZCA9IGZhaWxlZFNwZWNzQ291bnQgPiAwO1xuXG4gIGNvbnN0IHZlcmRpY3QgPSBoYXNGYWlsZWRcbiAgICA/IHJlZChgJHtmYWlsZWRTcGVjc0NvdW50fSBvZiAke292ZXJhbGxTcGVjQ291bnR9IGZhaWxlZGApXG4gICAgOiBvdmVyYWxsU3BlY0NvdW50ID4gMFxuICAgID8gXCJBbGwgc3BlY3MgcGFzc2VkIVwiXG4gICAgOiBcIk5vIHNwZWNzIGV4ZWN1dGVkXCI7XG5cbiAgY29uc3QgZGF0YSA9IHIucnVucy5tYXAoKHIpID0+IFtcbiAgICByLnN0YXRzLmZhaWx1cmVzICsgci5zdGF0cy5za2lwcGVkID4gMCA/IGZhaWx1cmVJY29uIDogc3VjY2Vzc0ljb24sXG4gICAgci5zcGVjLnJlbGF0aXZlVG9Db21tb25Sb290LFxuICAgIGdyYXkocHJldHR5TVMoci5zdGF0cy5kdXJhdGlvbikpLFxuICAgIHdoaXRlKHIuc3RhdHMudGVzdHMgPz8gMCksXG4gICAgci5zdGF0cy5wYXNzZXMgPyBncmVlbihyLnN0YXRzLnBhc3NlcykgOiBncmF5KFwiLVwiKSxcbiAgICByLnN0YXRzLmZhaWx1cmVzID8gcmVkKHIuc3RhdHMuZmFpbHVyZXMpIDogZ3JheShcIi1cIiksXG4gICAgci5zdGF0cy5wZW5kaW5nID8gY3lhbihyLnN0YXRzLnBlbmRpbmcpIDogZ3JheShcIi1cIiksXG4gICAgci5zdGF0cy5za2lwcGVkID8gcmVkKHIuc3RhdHMuc2tpcHBlZCkgOiBncmF5KFwiLVwiKSxcbiAgXSk7XG5cbiAgcmV0dXJuIHRhYmxlKFxuICAgIFtcbiAgICAgIFtcbiAgICAgICAgXCJcIiwgLy8gbWFya2VyXG4gICAgICAgIGdyYXkoXCJTcGVjXCIpLFxuICAgICAgICBcIlwiLFxuICAgICAgICBncmF5KFwiVGVzdHNcIiksXG4gICAgICAgIGdyYXkoXCJQYXNzaW5nXCIpLFxuICAgICAgICBncmF5KFwiRmFpbGluZ1wiKSxcbiAgICAgICAgZ3JheShcIlBlbmRpbmdcIiksXG4gICAgICAgIGdyYXkoXCJTa2lwcGVkXCIpLFxuICAgICAgXSxcbiAgICAgIC4uLmRhdGEsXG4gICAgICBbXG4gICAgICAgIGhhc0ZhaWxlZCA/IGZhaWx1cmVJY29uIDogc3VjY2Vzc0ljb24sIC8vIG1hcmtlclxuICAgICAgICB2ZXJkaWN0LFxuICAgICAgICBncmF5KHByZXR0eU1TKHIudG90YWxEdXJhdGlvbiA/PyAwKSksXG4gICAgICAgIG92ZXJhbGxTcGVjQ291bnQgPiAwID8gd2hpdGUoci50b3RhbFRlc3RzID8/IDApIDogZ3JheShcIi1cIiksXG4gICAgICAgIHIudG90YWxQYXNzZWQgPyBncmVlbihyLnRvdGFsUGFzc2VkKSA6IGdyYXkoXCItXCIpLFxuICAgICAgICByLnRvdGFsRmFpbGVkID8gcmVkKHIudG90YWxGYWlsZWQpIDogZ3JheShcIi1cIiksXG4gICAgICAgIHIudG90YWxQZW5kaW5nID8gY3lhbihyLnRvdGFsUGVuZGluZykgOiBncmF5KFwiLVwiKSxcbiAgICAgICAgci50b3RhbFNraXBwZWQgPyByZWQoci50b3RhbFNraXBwZWQpIDogZ3JheShcIi1cIiksXG4gICAgICBdLFxuICAgIF0sXG4gICAge1xuICAgICAgYm9yZGVyLFxuICAgICAgY29sdW1uRGVmYXVsdDoge1xuICAgICAgICB3aWR0aDogOCxcbiAgICAgIH0sXG4gICAgICBjb2x1bW5zOiBbXG4gICAgICAgIHsgYWxpZ25tZW50OiBcImxlZnRcIiwgd2lkdGg6IDIgfSxcbiAgICAgICAgeyBhbGlnbm1lbnQ6IFwibGVmdFwiLCB3aWR0aDogMzAgfSxcbiAgICAgICAgeyBhbGlnbm1lbnQ6IFwicmlnaHRcIiB9LFxuICAgICAgICB7IGFsaWdubWVudDogXCJyaWdodFwiIH0sXG4gICAgICAgIHsgYWxpZ25tZW50OiBcInJpZ2h0XCIgfSxcbiAgICAgICAgeyBhbGlnbm1lbnQ6IFwicmlnaHRcIiB9LFxuICAgICAgICB7IGFsaWdubWVudDogXCJyaWdodFwiIH0sXG4gICAgICAgIHsgYWxpZ25tZW50OiBcInJpZ2h0XCIgfSxcbiAgICAgIF0sXG4gICAgICAvLyBzaW5nbGVMaW5lOiB0cnVlLFxuICAgICAgZHJhd0hvcml6b250YWxMaW5lOiAobGluZUluZGV4LCByb3dDb3VudCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGxpbmVJbmRleCA9PT0gMSB8fFxuICAgICAgICAgIGxpbmVJbmRleCA9PT0gMCB8fFxuICAgICAgICAgIGxpbmVJbmRleCA9PT0gcm93Q291bnQgLSAxIHx8XG4gICAgICAgICAgbGluZUluZGV4ID09PSByb3dDb3VudFxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGRyYXdWZXJ0aWNhbExpbmU6IChsaW5lSW5kZXgsIHJvd0NvdW50KSA9PiB7XG4gICAgICAgIHJldHVybiBsaW5lSW5kZXggPT09IDAgfHwgcm93Q291bnQgPT09IGxpbmVJbmRleDtcbiAgICAgIH0sXG4gICAgfVxuICApO1xufTtcblxuY29uc3QgYm9yZGVyID0gXy5tYXBWYWx1ZXMoXG4gIHtcbiAgICB0b3BCb2R5OiBgXHUyNTAwYCxcbiAgICB0b3BKb2luOiBgXHUyNTJDYCxcbiAgICB0b3BMZWZ0OiBgICBcdTI1MENgLFxuICAgIHRvcFJpZ2h0OiBgXHUyNTEwYCxcblxuICAgIGJvdHRvbUJvZHk6IGBcdTI1MDBgLFxuICAgIGJvdHRvbUpvaW46IGBcdTI1MzRgLFxuICAgIGJvdHRvbUxlZnQ6IGAgIFx1MjUxNGAsXG4gICAgYm90dG9tUmlnaHQ6IGBcdTI1MThgLFxuXG4gICAgYm9keUxlZnQ6IGAgIFx1MjUwMmAsXG4gICAgYm9keVJpZ2h0OiBgXHUyNTAyYCxcbiAgICBib2R5Sm9pbjogYFx1MjUwMmAsXG5cbiAgICBqb2luQm9keTogYFx1MjUwMGAsXG4gICAgam9pbkxlZnQ6IGAgIFx1MjUxQ2AsXG4gICAgam9pblJpZ2h0OiBgXHUyNTI0YCxcbiAgICBqb2luSm9pbjogYFx1MjUzQ2AsXG4gIH0sXG4gICh2KSA9PiBncmF5KHYpXG4pO1xuIiwgImltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCB7XG4gIHJlcG9ydEluc3RhbmNlUmVzdWx0c01lcmdlZCxcbiAgc2V0SW5zdGFuY2VUZXN0cyxcbiAgU2V0SW5zdGFuY2VUZXN0c1BheWxvYWQsXG4gIHVwZGF0ZUluc3RhbmNlUmVzdWx0cyxcbiAgVXBkYXRlSW5zdGFuY2VSZXN1bHRzUGF5bG9hZCxcbn0gZnJvbSBcIi4uL2FwaVwiO1xuaW1wb3J0IHsgdXBsb2FkQXJ0aWZhY3RzLCB1cGxvYWRTdGRvdXRTYWZlIH0gZnJvbSBcIi4uL2FydGlmYWN0c1wiO1xuaW1wb3J0IHsgZ2V0SW5pdGlhbE91dHB1dCB9IGZyb20gXCIuLi9jYXB0dXJlXCI7XG5pbXBvcnQgeyBpc0N1cnJlbnRzIH0gZnJvbSBcIi4uL2VudlwiO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IHNldENhbmNlbGxhdGlvblJlYXNvbiB9IGZyb20gXCIuLi9zdGF0ZVwiO1xuaW1wb3J0IHsgZ2V0SW5zdGFuY2VSZXN1bHRQYXlsb2FkLCBnZXRJbnN0YW5jZVRlc3RzUGF5bG9hZCB9IGZyb20gXCIuL3Jlc3VsdHNcIjtcbmNvbnN0IGRlYnVnID0gRGVidWcoXCJjdXJyZW50czpyZXN1bHRzXCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXBsb2FkUmVzdWx0c1Rhc2soe1xuICBpbnN0YW5jZUlkLFxuICBzcGVjLFxuICBydW5SZXN1bHQsXG4gIG91dHB1dCxcbn06IHtcbiAgaW5zdGFuY2VJZDogc3RyaW5nO1xuICBzcGVjOiBzdHJpbmc7XG4gIHJ1blJlc3VsdDogQ3lwcmVzc0NvbW1hbmRMaW5lLkN5cHJlc3NSdW5SZXN1bHQ7XG4gIG91dHB1dDogc3RyaW5nO1xufSkge1xuICBjb25zdCBydW4gPSBydW5SZXN1bHQucnVucy5maW5kKChyKSA9PiByLnNwZWMucmVsYXRpdmUgPT09IHNwZWMpO1xuICBpZiAoIXJ1bikge1xuICAgIHdhcm4oJ0Nhbm5vdCBkZXRlcm1pbmUgcnVuIHJlc3VsdCBmb3Igc3BlYyBcIiVzXCInLCBzcGVjKTtcbiAgICByZXR1cm47XG4gIH1cbiAgcmV0dXJuIHByb2Nlc3NDeXByZXNzUmVzdWx0cyhcbiAgICBpbnN0YW5jZUlkLFxuICAgIHtcbiAgICAgIC8vIHJlcGxhY2UgdGhlIHJ1bnMgd2l0aCB0aGUgcnVuIGZvciB0aGUgc3BlY2lmaWVkIHNwZWNcbiAgICAgIC4uLnJ1blJlc3VsdCxcbiAgICAgIHJ1bnM6IFtydW5dLFxuICAgIH0sXG4gICAgb3V0cHV0XG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzQ3lwcmVzc1Jlc3VsdHMoXG4gIGluc3RhbmNlSWQ6IHN0cmluZyxcbiAgcmVzdWx0czogQ3lwcmVzc0NvbW1hbmRMaW5lLkN5cHJlc3NSdW5SZXN1bHQsXG4gIHN0ZG91dDogc3RyaW5nXG4pIHtcbiAgY29uc3QgcnVuID0gcmVzdWx0cy5ydW5zWzBdO1xuICBpZiAoIXJ1bikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHJ1biBmb3VuZCBpbiBDeXByZXNzIHJlc3VsdHNcIik7XG4gIH1cbiAgY29uc3QgaW5zdGFuY2VSZXN1bHRzID0gZ2V0SW5zdGFuY2VSZXN1bHRQYXlsb2FkKHJ1bik7XG4gIGNvbnN0IGluc3RhbmNlVGVzdHMgPSBnZXRJbnN0YW5jZVRlc3RzUGF5bG9hZChydW4sIHJlc3VsdHMuY29uZmlnKTtcblxuICBjb25zdCB7IHZpZGVvVXBsb2FkVXJsLCBzY3JlZW5zaG90VXBsb2FkVXJscywgY2xvdWQgfSA9IGF3YWl0IHJlcG9ydFJlc3VsdHMoXG4gICAgaW5zdGFuY2VJZCxcbiAgICBpbnN0YW5jZVRlc3RzLFxuICAgIGluc3RhbmNlUmVzdWx0c1xuICApO1xuXG4gIGlmIChjbG91ZD8uc2hvdWxkQ2FuY2VsKSB7XG4gICAgZGVidWcoXCJpbnN0YW5jZSAlcyBzaG91bGQgY2FuY2VsXCIsIGluc3RhbmNlSWQpO1xuICAgIHNldENhbmNlbGxhdGlvblJlYXNvbihjbG91ZC5zaG91bGRDYW5jZWwpO1xuICB9XG4gIGRlYnVnKFwiaW5zdGFuY2UgJXMgYXJ0aWZhY3QgdXBsb2FkIGluc3RydWN0aW9ucyAlb1wiLCBpbnN0YW5jZUlkLCB7XG4gICAgdmlkZW9VcGxvYWRVcmwsXG4gICAgc2NyZWVuc2hvdFVwbG9hZFVybHMsXG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgdXBsb2FkQXJ0aWZhY3RzKHtcbiAgICAgIHZpZGVvVXBsb2FkVXJsLFxuICAgICAgdmlkZW9QYXRoOiBydW4udmlkZW8sXG4gICAgICBzY3JlZW5zaG90VXBsb2FkVXJscyxcbiAgICAgIHNjcmVlbnNob3RzOiBpbnN0YW5jZVJlc3VsdHMuc2NyZWVuc2hvdHMsXG4gICAgfSksXG4gICAgdXBsb2FkU3Rkb3V0U2FmZShpbnN0YW5jZUlkLCBnZXRJbml0aWFsT3V0cHV0KCkgKyBzdGRvdXQpLFxuICBdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVwb3J0UmVzdWx0cyhcbiAgaW5zdGFuY2VJZDogc3RyaW5nLFxuICBpbnN0YW5jZVRlc3RzOiBTZXRJbnN0YW5jZVRlc3RzUGF5bG9hZCxcbiAgaW5zdGFuY2VSZXN1bHRzOiBVcGRhdGVJbnN0YW5jZVJlc3VsdHNQYXlsb2FkXG4pIHtcbiAgZGVidWcoXCJyZXBvcnRpbmcgaW5zdGFuY2UgJXMgcmVzdWx0cy4uLlwiLCBpbnN0YW5jZUlkKTtcbiAgaWYgKGlzQ3VycmVudHMoKSkge1xuICAgIHJldHVybiByZXBvcnRJbnN0YW5jZVJlc3VsdHNNZXJnZWQoaW5zdGFuY2VJZCwge1xuICAgICAgdGVzdHM6IGluc3RhbmNlVGVzdHMsXG4gICAgICByZXN1bHRzOiBpbnN0YW5jZVJlc3VsdHMsXG4gICAgfSk7XG4gIH1cblxuICAvLyBydW4gb25lIGFmdGVyIGFub3RoZXJcbiAgYXdhaXQgc2V0SW5zdGFuY2VUZXN0cyhpbnN0YW5jZUlkLCBpbnN0YW5jZVRlc3RzKTtcbiAgcmV0dXJuIHVwZGF0ZUluc3RhbmNlUmVzdWx0cyhpbnN0YW5jZUlkLCBpbnN0YW5jZVJlc3VsdHMpO1xufVxuIiwgImltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCB7IFNjcmVlbnNob3RBcnRpZmFjdCwgU2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyB1cGRhdGVJbnN0YW5jZVN0ZG91dCB9IGZyb20gXCIuL2FwaVwiO1xuaW1wb3J0IHsgc2FmZSB9IGZyb20gXCIuL2xhbmdcIjtcbmltcG9ydCB7IHdhcm4gfSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7IHVwbG9hZEltYWdlLCB1cGxvYWRWaWRlbyB9IGZyb20gXCIuL3VwbG9hZFwiO1xuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOmFydGlmYWN0c1wiKTtcbmludGVyZmFjZSBVcGxvYWRBcnRpZmFjdHMge1xuICB2aWRlb1BhdGg6IHN0cmluZyB8IG51bGw7XG4gIHZpZGVvVXBsb2FkVXJsPzogc3RyaW5nIHwgbnVsbDtcbiAgc2NyZWVuc2hvdHM6IFNjcmVlbnNob3RBcnRpZmFjdFtdO1xuICBzY3JlZW5zaG90VXBsb2FkVXJsczogU2NyZWVuc2hvdFVwbG9hZEluc3RydWN0aW9uW107XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkQXJ0aWZhY3RzKHtcbiAgdmlkZW9QYXRoLFxuICB2aWRlb1VwbG9hZFVybCxcbiAgc2NyZWVuc2hvdHMsXG4gIHNjcmVlbnNob3RVcGxvYWRVcmxzLFxufTogVXBsb2FkQXJ0aWZhY3RzKSB7XG4gIC8vIHRpdGxlKFwiYmx1ZVwiLCBcIlVwbG9hZGluZyAgUmVzdWx0c1wiKTtcblxuICBkZWJ1ZyhcInVwbG9hZGluZyBhcnRpZmFjdHM6ICVvXCIsIHtcbiAgICB2aWRlb1BhdGgsXG4gICAgdmlkZW9VcGxvYWRVcmwsXG4gICAgc2NyZWVuc2hvdHMsXG4gICAgc2NyZWVuc2hvdFVwbG9hZFVybHMsXG4gIH0pO1xuXG4gIGNvbnN0IHRvdGFsVXBsb2FkcyA9ICh2aWRlb1BhdGggPyAxIDogMCkgKyBzY3JlZW5zaG90cy5sZW5ndGg7XG4gIGlmICh0b3RhbFVwbG9hZHMgPT09IDApIHtcbiAgICAvLyBpbmZvKFwiTm90aGluZyB0byB1cGxvYWRcIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gdXBsb2FkIHZpZGVvXG4gIGlmICh2aWRlb1VwbG9hZFVybCAmJiB2aWRlb1BhdGgpIHtcbiAgICBhd2FpdCBzYWZlKFxuICAgICAgdXBsb2FkVmlkZW8sXG4gICAgICAoZSkgPT4gZGVidWcoXCJmYWlsZWQgdXBsb2FkaW5nIHZpZGVvICVzLiBFcnJvcjogJW9cIiwgdmlkZW9QYXRoLCBlKSxcbiAgICAgICgpID0+IGRlYnVnKFwic3VjY2VzcyB1cGxvYWRpbmdcIiwgdmlkZW9QYXRoKVxuICAgICkodmlkZW9QYXRoLCB2aWRlb1VwbG9hZFVybCk7XG4gIH1cbiAgLy8gdXBsb2FkIHNjcmVlbnNob3RzXG4gIGlmIChzY3JlZW5zaG90VXBsb2FkVXJscyAmJiBzY3JlZW5zaG90VXBsb2FkVXJscy5sZW5ndGgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIHNjcmVlbnNob3RzLm1hcCgoc2NyZWVuc2hvdCkgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBzY3JlZW5zaG90VXBsb2FkVXJscy5maW5kKFxuICAgICAgICAgICh1cmxzKSA9PiB1cmxzLnNjcmVlbnNob3RJZCA9PT0gc2NyZWVuc2hvdC5zY3JlZW5zaG90SWRcbiAgICAgICAgKT8udXBsb2FkVXJsO1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgIGRlYnVnKFxuICAgICAgICAgICAgXCJObyB1cGxvYWQgdXJsIGZvciBzY3JlZW5zaG90ICVvLCBzY3JlZW5zaG90VXBsb2FkVXJsczogJW9cIixcbiAgICAgICAgICAgIHNjcmVlbnNob3QsXG4gICAgICAgICAgICBzY3JlZW5zaG90VXBsb2FkVXJsc1xuICAgICAgICAgICk7XG4gICAgICAgICAgd2FybihcIkNhbm5vdCBmaW5kIHVwbG9hZCB1cmwgZm9yIHNjcmVlbnNob3Q6ICVzXCIsIHNjcmVlbnNob3QucGF0aCk7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzYWZlKFxuICAgICAgICAgIHVwbG9hZEltYWdlLFxuICAgICAgICAgIChlKSA9PlxuICAgICAgICAgICAgZGVidWcoXG4gICAgICAgICAgICAgIFwiZmFpbGVkIHVwbG9hZGluZyBzY3JlZW5zaG90ICVzLiBFcnJvcjogJW9cIixcbiAgICAgICAgICAgICAgc2NyZWVuc2hvdC5wYXRoLFxuICAgICAgICAgICAgICBlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICgpID0+IGRlYnVnKFwic3VjY2VzcyB1cGxvYWRpbmdcIiwgc2NyZWVuc2hvdC5wYXRoKVxuICAgICAgICApKHNjcmVlbnNob3QucGF0aCwgdXJsKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXBsb2FkU3Rkb3V0U2FmZSA9IHNhZmUoXG4gIHVwZGF0ZUluc3RhbmNlU3Rkb3V0LFxuICAoKSA9PiB7fSxcbiAgKCkgPT4ge31cbik7XG4iLCAiaW1wb3J0IGJsdWViaXJkIGZyb20gXCJibHVlYmlyZFwiO1xuXG5ibHVlYmlyZC5Qcm9taXNlLmNvbmZpZyh7XG4gIGNhbmNlbGxhdGlvbjogdHJ1ZSxcbn0pO1xuZXhwb3J0IGNvbnN0IEJQcm9taXNlID0gYmx1ZWJpcmQuUHJvbWlzZTtcblxuZXhwb3J0IGNvbnN0IHNhZmUgPVxuICA8VCBleHRlbmRzIGFueVtdLCBSIGV4dGVuZHMgYW55PihcbiAgICBmbjogKC4uLmFyZ3M6IFQpID0+IFByb21pc2U8Uj4sXG4gICAgaWZGYWxlZDogKGU6IHVua25vd24pID0+IGFueSxcbiAgICBpZlN1Y2NlZWQ6ICgpID0+IGFueVxuICApID0+XG4gIGFzeW5jICguLi5hcmdzOiBUKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHIgPSBhd2FpdCBmbiguLi5hcmdzKTtcbiAgICAgIGlmU3VjY2VlZCgpO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZGYWxlZChlKTtcbiAgICB9XG4gIH07XG4iLCAiaW1wb3J0IERlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgbWFrZVJlcXVlc3QgfSBmcm9tIFwiLi9odHRwQ2xpZW50XCI7XG5jb25zdCByZWFkRmlsZSA9IGZzLnByb21pc2VzLnJlYWRGaWxlO1xuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOnVwbG9hZFwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZFZpZGVvKGZpbGU6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHVwbG9hZEZpbGUoZmlsZSwgdXJsLCBcInZpZGVvL21wNFwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwbG9hZEltYWdlKGZpbGU6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHVwbG9hZEZpbGUoZmlsZSwgdXJsLCBcImltYWdlL3BuZ1wiKTtcbn1cblxudHlwZSBVcGxvYWRUeXBlcyA9IFwidmlkZW8vbXA0XCIgfCBcImltYWdlL3BuZ1wiIHwgXCJwbGFpbi90ZXh0XCI7XG5hc3luYyBmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGU6IHN0cmluZywgdXJsOiBzdHJpbmcsIHR5cGU6IFVwbG9hZFR5cGVzKSB7XG4gIGRlYnVnKCd1cGxvYWRpbmcgZmlsZSBcIiVzXCIgdG8gXCIlc1wiJywgZmlsZSwgdXJsKTtcbiAgY29uc3QgZiA9IGF3YWl0IHJlYWRGaWxlKGZpbGUpO1xuICBhd2FpdCBtYWtlUmVxdWVzdCh7XG4gICAgdXJsLFxuICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICBkYXRhOiBmLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IHR5cGUsXG4gICAgfSxcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHsgZ2V0QVBJQmFzZVVybCB9IGZyb20gXCIuL2h0dHBDbGllbnQvY29uZmlnXCI7XG5cbmV4cG9ydCBjb25zdCBpc0N1cnJlbnRzID0gKCkgPT5cbiAgISFwcm9jZXNzLmVudi5DVVJSRU5UU19FTkZPUkNFX0lTX0NVUlJFTlRTIHx8XG4gIGdldEFQSUJhc2VVcmwoKSA9PT0gXCJodHRwczovL2N5LmN1cnJlbnRzLmRldlwiO1xuIiwgImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcImV2ZW50c1wiO1xuZXhwb3J0IGVudW0gRXZlbnQge1xuICBSVU5fQ0FOQ0VMTEVEID0gXCJydW5DYW5jZWxsZWRcIixcbn1cbmV4cG9ydCBjb25zdCBwdWJzdWIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4iLCAiaW1wb3J0IHsgRXZlbnQsIHB1YnN1YiB9IGZyb20gXCIuL3B1YnN1YlwiO1xuXG5pbnRlcmZhY2UgRXhlY3V0aW9uU3RhdGUge1xuICBjYW5jZWxsYXRpb25SZWFzb246IHN0cmluZyB8IG51bGw7XG59XG5jb25zdCBzdGF0ZTogRXhlY3V0aW9uU3RhdGUgPSB7XG4gIGNhbmNlbGxhdGlvblJlYXNvbjogbnVsbCxcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDYW5jZWxsYXRpb25SZWFzb24gPSAocmVhc29uOiBzdHJpbmcpID0+IHtcbiAgaWYgKHN0YXRlLmNhbmNlbGxhdGlvblJlYXNvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBzdGF0ZS5jYW5jZWxsYXRpb25SZWFzb24gPSByZWFzb247XG4gIHB1YnN1Yi5lbWl0KEV2ZW50LlJVTl9DQU5DRUxMRUQsIHJlYXNvbik7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FuY2VsbGF0aW9uUmVhc29uID0gKCkgPT4gc3RhdGUuY2FuY2VsbGF0aW9uUmVhc29uO1xuIiwgImltcG9ydCB7XG4gIFNwZWNXaXRoUmVsYXRpdmVSb290LFxuICBWYWxpZGF0ZWRDdXJyZW50c1BhcmFtZXRlcnMsXG59IGZyb20gXCJjeXByZXNzLWNsb3VkL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRDYXB0dXJlZE91dHB1dCwgcmVzZXRDYXB0dXJlIH0gZnJvbSBcIi4uL2NhcHR1cmVcIjtcbmltcG9ydCB7IE1lcmdlZENvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcblxuaW1wb3J0IHtcbiAgZ2V0U3VtbWFyeUZvclNwZWMsXG4gIGdldFVwbG9hZFJlc3VsdHNUYXNrLFxuICBub3JtYWxpemVSYXdSZXN1bHQsXG59IGZyb20gXCIuLi9yZXN1bHRzXCI7XG5cbmltcG9ydCBEZWJ1ZyBmcm9tIFwiZGVidWdcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUJhdGNoZWRJbnN0YW5jZXMsXG4gIGNyZWF0ZUluc3RhbmNlLFxuICBDcmVhdGVJbnN0YW5jZVBheWxvYWQsXG4gIEluc3RhbmNlUmVzcG9uc2VTcGVjRGV0YWlscyxcbn0gZnJvbSBcIi4uL2FwaVwiO1xuXG5pbXBvcnQgeyBydW5TcGVjRmlsZVNhZmUgfSBmcm9tIFwiLi4vY3lwcmVzc1wiO1xuaW1wb3J0IHsgaXNDdXJyZW50cyB9IGZyb20gXCIuLi9lbnZcIjtcbmltcG9ydCB7IGRpdmlkZXIsIGVycm9yLCBpbmZvLCB0aXRsZSwgd2FybiB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IHN1bW1hcnksIHVwbG9hZFRhc2tzIH0gZnJvbSBcIi4vc3RhdGVcIjtcblxuY29uc3QgZGVidWcgPSBEZWJ1ZyhcImN1cnJlbnRzOnJ1bm5lclwiKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blRpbGxEb25lKFxuICB7XG4gICAgcnVuSWQsXG4gICAgZ3JvdXBJZCxcbiAgICBtYWNoaW5lSWQsXG4gICAgcGxhdGZvcm0sXG4gICAgY29uZmlnLFxuICAgIHNwZWNzOiBhbGxTcGVjcyxcbiAgfTogQ3JlYXRlSW5zdGFuY2VQYXlsb2FkICYge1xuICAgIGNvbmZpZzogTWVyZ2VkQ29uZmlnO1xuICAgIHNwZWNzOiBTcGVjV2l0aFJlbGF0aXZlUm9vdFtdO1xuICB9LFxuICBwYXJhbXM6IFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVyc1xuKSB7XG4gIGxldCBoYXNNb3JlID0gdHJ1ZTtcblxuICB3aGlsZSAoaGFzTW9yZSkge1xuICAgIGNvbnN0IG5ld1Rhc2tzID0gYXdhaXQgcnVuQmF0Y2goe1xuICAgICAgcnVuTWV0YToge1xuICAgICAgICBydW5JZCxcbiAgICAgICAgZ3JvdXBJZCxcbiAgICAgICAgbWFjaGluZUlkLFxuICAgICAgICBwbGF0Zm9ybSxcbiAgICAgIH0sXG4gICAgICBhbGxTcGVjcyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIGNvbmZpZyxcbiAgICB9KTtcbiAgICBpZiAoIW5ld1Rhc2tzLmxlbmd0aCkge1xuICAgICAgZGVidWcoXCJObyBtb3JlIHRhc2tzIHRvIHJ1bi4gVXBsb2FkcyBxdWV1ZTogJWRcIiwgdXBsb2FkVGFza3MubGVuZ3RoKTtcbiAgICAgIGhhc01vcmUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBuZXdUYXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICBpZiAodGFzay5zdW1tYXJ5LnNwZWNTdW1tYXJ5KSB7XG4gICAgICAgIHN1bW1hcnlbdGFzay5zdW1tYXJ5LnNwZWNdID0gdGFzay5zdW1tYXJ5LnNwZWNTdW1tYXJ5O1xuICAgICAgfVxuICAgICAgdXBsb2FkVGFza3MucHVzaCh0YXNrLnVwbG9hZFRhc2tzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBydW5CYXRjaCh7XG4gIHJ1bk1ldGEsXG4gIGNvbmZpZyxcbiAgcGFyYW1zLFxuICBhbGxTcGVjcyxcbn06IHtcbiAgcnVuTWV0YToge1xuICAgIHJ1bklkOiBzdHJpbmc7XG4gICAgZ3JvdXBJZDogc3RyaW5nO1xuICAgIG1hY2hpbmVJZDogc3RyaW5nO1xuICAgIHBsYXRmb3JtOiBDcmVhdGVJbnN0YW5jZVBheWxvYWRbXCJwbGF0Zm9ybVwiXTtcbiAgfTtcbiAgYWxsU3BlY3M6IFNwZWNXaXRoUmVsYXRpdmVSb290W107XG4gIGNvbmZpZzogTWVyZ2VkQ29uZmlnO1xuICBwYXJhbXM6IFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycztcbn0pIHtcbiAgbGV0IGJhdGNoID0ge1xuICAgIHNwZWNzOiBbXSBhcyBJbnN0YW5jZVJlc3BvbnNlU3BlY0RldGFpbHNbXSxcbiAgICBjbGFpbWVkSW5zdGFuY2VzOiAwLFxuICAgIHRvdGFsSW5zdGFuY2VzOiAwLFxuICB9O1xuXG4gIGlmIChpc0N1cnJlbnRzKCkpIHtcbiAgICBkZWJ1ZyhcIkdldHRpbmcgYmF0Y2hlZCB0YXNrczogJWRcIiwgcGFyYW1zLmJhdGNoU2l6ZSk7XG4gICAgYmF0Y2ggPSBhd2FpdCBjcmVhdGVCYXRjaGVkSW5zdGFuY2VzKHtcbiAgICAgIC4uLnJ1bk1ldGEsXG4gICAgICBiYXRjaFNpemU6IHBhcmFtcy5iYXRjaFNpemUsXG4gICAgfSk7XG4gICAgZGVidWcoXCJHb3QgYmF0Y2hlZCB0YXNrczogJW9cIiwgYmF0Y2gpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3JlYXRlSW5zdGFuY2UocnVuTWV0YSk7XG5cbiAgICBpZiAocmVzcG9uc2Uuc3BlYyAhPT0gbnVsbCAmJiByZXNwb25zZS5pbnN0YW5jZUlkICE9PSBudWxsKSB7XG4gICAgICBiYXRjaC5zcGVjcy5wdXNoKHtcbiAgICAgICAgc3BlYzogcmVzcG9uc2Uuc3BlYyxcbiAgICAgICAgaW5zdGFuY2VJZDogcmVzcG9uc2UuaW5zdGFuY2VJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBiYXRjaC5jbGFpbWVkSW5zdGFuY2VzID0gcmVzcG9uc2UuY2xhaW1lZEluc3RhbmNlcztcbiAgICBiYXRjaC50b3RhbEluc3RhbmNlcyA9IHJlc3BvbnNlLnRvdGFsSW5zdGFuY2VzO1xuICB9XG5cbiAgaWYgKGJhdGNoLnNwZWNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGRpdmlkZXIoKTtcbiAgaW5mbyhcbiAgICBcIlJ1bm5pbmc6ICVzICglZC8lZClcIixcbiAgICBiYXRjaC5zcGVjcy5tYXAoKHMpID0+IHMuc3BlYykuam9pbihcIiwgXCIpLFxuICAgIGJhdGNoLmNsYWltZWRJbnN0YW5jZXMsXG4gICAgYmF0Y2gudG90YWxJbnN0YW5jZXNcbiAgKTtcblxuICBjb25zdCByYXdSZXN1bHQgPSBhd2FpdCBydW5TcGVjRmlsZVNhZmUoXG4gICAge1xuICAgICAgLy8gdXNlIGFic29sdXRlIHBhdGhzIC0gIHVzZXIgY2FuIHJ1biB0aGUgcHJvZ3JhbSBmcm9tIGEgZGlmZmVyZW50IGRpcmVjdG9yeSwgZS5nLiBueCBvciBhIG1vbm9yZXBvIHdvcmtzcGFjZVxuICAgICAgLy8gY3lwcmVzcyBzdGlsbCByZXBvcnRzIHRoZSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBwcm9qZWN0IHJvb3RcbiAgICAgIHNwZWM6IGJhdGNoLnNwZWNzXG4gICAgICAgIC5tYXAoKGJzKSA9PiBnZXRTcGVjQWJzb2x1dGVQYXRoKGFsbFNwZWNzLCBicy5zcGVjKSlcbiAgICAgICAgLmpvaW4oXCIsXCIpLFxuICAgIH0sXG4gICAgcGFyYW1zXG4gICk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRSZXN1bHQgPSBub3JtYWxpemVSYXdSZXN1bHQoXG4gICAgcmF3UmVzdWx0LFxuICAgIGJhdGNoLnNwZWNzLm1hcCgocykgPT4gcy5zcGVjKSxcbiAgICBjb25maWdcbiAgKTtcblxuICB0aXRsZShcImJsdWVcIiwgXCJSZXBvcnRpbmcgcmVzdWx0cyBhbmQgYXJ0aWZhY3RzIGluIGJhY2tncm91bmQuLi5cIik7XG5cbiAgY29uc3Qgb3V0cHV0ID0gZ2V0Q2FwdHVyZWRPdXRwdXQoKTtcbiAgcmVzZXRDYXB0dXJlKCk7XG5cbiAgY29uc3QgYmF0Y2hSZXN1bHQgPSBiYXRjaC5zcGVjcy5tYXAoKHNwZWMpID0+IHtcbiAgICBjb25zdCBzcGVjU3VtbWFyeSA9IGdldFN1bW1hcnlGb3JTcGVjKHNwZWMuc3BlYywgbm9ybWFsaXplZFJlc3VsdCk7XG4gICAgaWYgKCFzcGVjU3VtbWFyeSkge1xuICAgICAgd2FybignQ2Fubm90IGZpbmQgcnVuIHJlc3VsdCBmb3Igc3BlYyBcIiVzXCInLCBzcGVjLnNwZWMpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdW1tYXJ5OiB7XG4gICAgICAgIHNwZWM6IHNwZWMuc3BlYyxcbiAgICAgICAgc3BlY1N1bW1hcnksXG4gICAgICB9LFxuICAgICAgdXBsb2FkVGFza3M6IGdldFVwbG9hZFJlc3VsdHNUYXNrKHtcbiAgICAgICAgLi4uc3BlYyxcbiAgICAgICAgcnVuUmVzdWx0OiBub3JtYWxpemVkUmVzdWx0LFxuICAgICAgICBvdXRwdXQsXG4gICAgICB9KS5jYXRjaChlcnJvciksXG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJhdGNoUmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRTcGVjQWJzb2x1dGVQYXRoKFxuICBhbGxTcGVjczogU3BlY1dpdGhSZWxhdGl2ZVJvb3RbXSxcbiAgcmVsYXRpdmU6IHN0cmluZ1xuKSB7XG4gIGNvbnN0IGFic29sdXRlUGF0aCA9IGFsbFNwZWNzLmZpbmQoKGkpID0+IGkucmVsYXRpdmUgPT09IHJlbGF0aXZlKT8uYWJzb2x1dGU7XG4gIGlmICghYWJzb2x1dGVQYXRoKSB7XG4gICAgd2FybihcbiAgICAgICdDYW5ub3QgZmluZCBhYnNvbHV0ZSBwYXRoIGZvciBzcGVjLiBTcGVjOiBcIiVzXCIsIGNhbmRpZGF0ZXM6ICVvJyxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgYWxsU3BlY3NcbiAgICApO1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgYWJzb2x1dGUgcGF0aCBmb3Igc3BlY2ApO1xuICB9XG4gIHJldHVybiBhYnNvbHV0ZVBhdGg7XG59XG4iLCAiaW1wb3J0IHsgU3VtbWFyeVJlc3VsdCB9IGZyb20gXCJjeXByZXNzLWNsb3VkL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBzdW1tYXJ5OiBTdW1tYXJ5UmVzdWx0ID0ge307XG5leHBvcnQgY29uc3QgdXBsb2FkVGFza3M6IFByb21pc2U8YW55PltdID0gW107XG4iLCAiaW1wb3J0IHsgQlByb21pc2UgfSBmcm9tIFwiLi4vbGFuZ1wiO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gXCIuLi9sb2dcIjtcbmltcG9ydCB7IEV2ZW50LCBwdWJzdWIgfSBmcm9tIFwiLi4vcHVic3ViXCI7XG5pbXBvcnQgeyBydW5UaWxsRG9uZSB9IGZyb20gXCIuL3J1bm5lclwiO1xuaW1wb3J0IHsgc3VtbWFyeSB9IGZyb20gXCIuL3N0YXRlXCI7XG5cbmxldCBjYW5jZWxsYWJsZToge1xuICBjYW5jZWw6ICgpID0+IHZvaWQ7XG59IHwgbnVsbCA9IG51bGw7XG5cbmZ1bmN0aW9uIG9uUnVuQ2FuY2VsbGVkKHJlYXNvbjogc3RyaW5nKSB7XG4gIHdhcm4oXG4gICAgYFJ1biBjYW5jZWxsZWQ6ICVzLiBXYWl0aW5nIGZvciB1cGxvYWRzIHRvIGNvbXBsZXRlIGFuZCBzdG9wcGluZyBleGVjdXRpb24uLi5gLFxuICAgIHJlYXNvblxuICApO1xuICBjYW5jZWxsYWJsZT8uY2FuY2VsKCk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuVGlsbERvbmVPckNhbmNlbGxlZChcbiAgLi4uYXJnczogUGFyYW1ldGVyczx0eXBlb2YgcnVuVGlsbERvbmU+XG4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgIGNhbmNlbGxhYmxlID0gbmV3IEJQcm9taXNlKChyZXNvbHZlLCByZWplY3QsIG9uQ2FuY2VsKSA9PiB7XG4gICAgICBpZiAoIW9uQ2FuY2VsKSB7XG4gICAgICAgIF9yZWplY3QobmV3IEVycm9yKFwiQmx1ZUJpcmQgaXMgbWlzY29uZmlndXJlZDogb25DYW5jZWwgaXMgdW5kZWZpbmVkXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgb25DYW5jZWwoKCkgPT4gX3Jlc29sdmUoc3VtbWFyeSkpO1xuICAgICAgcnVuVGlsbERvbmUoLi4uYXJncykudGhlbihcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICBfcmVzb2x2ZShzdW1tYXJ5KTtcbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgX3JlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBwdWJzdWIuYWRkTGlzdGVuZXIoRXZlbnQuUlVOX0NBTkNFTExFRCwgb25SdW5DYW5jZWxsZWQpO1xuICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICBwdWJzdWIucmVtb3ZlTGlzdGVuZXIoRXZlbnQuUlVOX0NBTkNFTExFRCwgb25SdW5DYW5jZWxsZWQpO1xuICB9KTtcbn1cbiIsICJpbXBvcnQgRGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5pbXBvcnQgY29tbW9uUGF0aFByZWZpeCBmcm9tIFwiY29tbW9uLXBhdGgtcHJlZml4XCI7XG5pbXBvcnQgZ2xvYmJ5LCB7IEdsb2JieU9wdGlvbnMgfSBmcm9tIFwiZ2xvYmJ5XCI7XG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgb3MgZnJvbSBcIm9zXCI7XG5pbXBvcnQge1xuICBGaW5kU3BlY3MsXG4gIFNwZWNUeXBlLFxuICBTcGVjV2l0aFJlbGF0aXZlUm9vdCxcbiAgVGVzdGluZ1R5cGUsXG59IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgdG9BcnJheSwgdG9Qb3NpeCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKFwiY3VycmVudHM6c3BlY3NcIik7XG5cbnR5cGUgR2xvYlBhdHRlcm4gPSBzdHJpbmcgfCBzdHJpbmdbXTtcblxuLyoqXG4gKiBSZXBsaWNhdGUgaG93IGN5cHJlc3MgaXMgZGlzY292ZXJpbmcgc3BlYyBmaWxlc1xuICogaHR0cHM6Ly9naXRodWIuY29tL2N5cHJlc3MtaW8vY3lwcmVzcy9ibG9iL2JjOWVkYjQ0NTIzZDYyY2E5MzQ4MjdiOGU4NzBmMzhmODY2MzRjYTQvcGFja2FnZXMvZGF0YS1jb250ZXh0L3NyYy9zb3VyY2VzL1Byb2plY3REYXRhU291cmNlLnRzI0wyNTBcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jeXByZXNzLWlvL2N5cHJlc3MvYmxvYi9iYzllZGI0NDUyM2Q2MmNhOTM0ODI3YjhlODcwZjM4Zjg2NjM0Y2E0L3BhY2thZ2VzL2RhdGEtY29udGV4dC9zcmMvYWN0aW9ucy9Qcm9qZWN0QWN0aW9ucy50cyNMNDE3XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kU3BlY3Moe1xuICBwcm9qZWN0Um9vdCxcbiAgdGVzdGluZ1R5cGUsXG4gIHNwZWNQYXR0ZXJuLFxuICBjb25maWdTcGVjUGF0dGVybixcbiAgZXhjbHVkZVNwZWNQYXR0ZXJuLFxuICBhZGRpdGlvbmFsSWdub3JlUGF0dGVybixcbn06IEZpbmRTcGVjczxzdHJpbmdbXSB8IHN0cmluZz4pOiBQcm9taXNlPFNwZWNXaXRoUmVsYXRpdmVSb290W10+IHtcbiAgY29uZmlnU3BlY1BhdHRlcm4gPSB0b0FycmF5KGNvbmZpZ1NwZWNQYXR0ZXJuKTtcbiAgc3BlY1BhdHRlcm4gPSB0b0FycmF5KHNwZWNQYXR0ZXJuKTtcbiAgZXhjbHVkZVNwZWNQYXR0ZXJuID0gdG9BcnJheShleGNsdWRlU3BlY1BhdHRlcm4pIHx8IFtdO1xuXG4gIC8vIGV4Y2x1ZGUgYWxsIHNwZWNzIG1hdGNoaW5nIGUyZSBpZiBpbiBjb21wb25lbnQgdGVzdGluZ1xuICBhZGRpdGlvbmFsSWdub3JlUGF0dGVybiA9IHRvQXJyYXkoYWRkaXRpb25hbElnbm9yZVBhdHRlcm4pIHx8IFtdO1xuXG4gIGRlYnVnKFwiZXhwbG9yaW5nIHNwZWMgZmlsZXMgZm9yIGV4ZWN1dGlvbiAlT1wiLCB7XG4gICAgdGVzdGluZ1R5cGUsXG4gICAgcHJvamVjdFJvb3QsXG4gICAgc3BlY1BhdHRlcm4sXG4gICAgY29uZmlnU3BlY1BhdHRlcm4sXG4gICAgZXhjbHVkZVNwZWNQYXR0ZXJuLFxuICAgIGFkZGl0aW9uYWxJZ25vcmVQYXR0ZXJuLFxuICB9KTtcblxuICBpZiAoIXNwZWNQYXR0ZXJuIHx8ICFjb25maWdTcGVjUGF0dGVybikge1xuICAgIHRocm93IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZ2xvYiBwYXR0ZXJucyBmb3IgZXhwbG9yaW5nIHNwZWNzXCIpO1xuICB9XG5cbiAgbGV0IHNwZWNBYnNvbHV0ZVBhdGhzID0gYXdhaXQgZ2V0RmlsZXNCeUdsb2IocHJvamVjdFJvb3QsIHNwZWNQYXR0ZXJuLCB7XG4gICAgYWJzb2x1dGU6IHRydWUsXG4gICAgaWdub3JlOiBbLi4uZXhjbHVkZVNwZWNQYXR0ZXJuLCAuLi5hZGRpdGlvbmFsSWdub3JlUGF0dGVybl0sXG4gIH0pO1xuXG4gIC8vIElmIHRoZSBzcGVjUGF0dGVybiBhbmQgY29uZmlnU3BlY1BhdHRlcm4gYXJlIGRpZmZlcmVudCxcbiAgLy8gaXQgbWVhbnMgdGhlIHVzZXIgcGFzc2VkIHNvbWV0aGluZyBub24tZGVmYXVsdCB2aWEgLS1zcGVjIChydW4gbW9kZSBvbmx5KVxuICAvLyBpbiB0aGlzIHNjZW5hcmlvLCB3ZSB3YW50IHRvIGdyYWIgZXZlcnl0aGluZyB0aGF0IG1hdGNoZXMgYC0tc3BlY2BcbiAgLy8gdGhhdCBmYWxscyB3aXRoaW4gdGhlaXIgZGVmYXVsdCBzcGVjUGF0dGVybi4gVGhlIHJlYXNvbiBpcyBzbyB3ZSBhdm9pZFxuICAvLyBhdHRlbXB0aW5nIHRvIHJ1biB0aGluZ3MgdGhhdCBhcmUgbm90IHNwZWNzLCBlZyBzb3VyY2UgY29kZSwgdmlkZW9zLCBldGMuXG4gIC8vXG4gIC8vIEV4YW1wbGU6IGRldmVsb3BlciB3YW50cyB0byBydW4gdGVzdHMgYXNzb2NpYXRlZCB3aXRoIHRpbWVycyBpbiBwYWNrYWdlcy9kcml2ZXJcbiAgLy8gU28gdGhleSBydW4geWFybiBjeXByZXNzOnJ1biAtLXNwZWMgKiovdGltZXJzKlxuICAvLyB3ZSBkbyAqKm5vdCoqIHdhbnQgdG8gY2FwdHVyZSBgdGltZXJzLnRzYCAoc291cmNlIGNvZGUpIG9yIGEgdmlkZW8gaW5cbiAgLy8gY3lwcmVzcy92aWRlb3MvdGltZXJzLmN5LnRzLm1wNCwgc28gd2UgdGFrZSB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gc3BlY1BhdHRlcm5cbiAgLy8gYW5kIC0tc3BlYy5cbiAgaWYgKCFfLmlzRXF1YWwoc3BlY1BhdHRlcm4sIGNvbmZpZ1NwZWNQYXR0ZXJuKSkge1xuICAgIGNvbnN0IGRlZmF1bHRTcGVjQWJzb2x1dGVQYXRocyA9IGF3YWl0IGdldEZpbGVzQnlHbG9iKFxuICAgICAgcHJvamVjdFJvb3QsXG4gICAgICBjb25maWdTcGVjUGF0dGVybixcbiAgICAgIHtcbiAgICAgICAgYWJzb2x1dGU6IHRydWUsXG4gICAgICAgIGlnbm9yZTogWy4uLmV4Y2x1ZGVTcGVjUGF0dGVybiwgLi4uYWRkaXRpb25hbElnbm9yZVBhdHRlcm5dLFxuICAgICAgfVxuICAgICk7XG5cbiAgICBzcGVjQWJzb2x1dGVQYXRocyA9IF8uaW50ZXJzZWN0aW9uKFxuICAgICAgc3BlY0Fic29sdXRlUGF0aHMsXG4gICAgICBkZWZhdWx0U3BlY0Fic29sdXRlUGF0aHNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZWRTcGVjcyh7XG4gICAgcHJvamVjdFJvb3QsXG4gICAgdGVzdGluZ1R5cGUsXG4gICAgc3BlY0Fic29sdXRlUGF0aHMsXG4gICAgc3BlY1BhdHRlcm4sXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRGaWxlc0J5R2xvYihcbiAgcHJvamVjdFJvb3Q6IHN0cmluZyxcbiAgZ2xvYjogR2xvYlBhdHRlcm4sXG4gIGdsb2JPcHRpb25zOiBHbG9iYnlPcHRpb25zXG4pIHtcbiAgY29uc3Qgd29ya2luZ0RpcmVjdG9yeVByZWZpeCA9IHBhdGguam9pbihwcm9qZWN0Um9vdCwgcGF0aC5zZXApO1xuICBjb25zdCBnbG9icyA9IChbXSBhcyBzdHJpbmdbXSlcbiAgICAuY29uY2F0KGdsb2IpXG4gICAgLm1hcCgoZ2xvYlBhdHRlcm4pID0+XG4gICAgICBnbG9iUGF0dGVybi5zdGFydHNXaXRoKFwiLi9cIikgPyBnbG9iUGF0dGVybi5yZXBsYWNlKFwiLi9cIiwgXCJcIikgOiBnbG9iUGF0dGVyblxuICAgIClcbiAgICAubWFwKChnbG9iUGF0dGVybikgPT4ge1xuICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gaW5jbHVkZXMgdGhlIHdvcmtpbmcgZGlyZWN0b3J5LCB3ZSBzdHJpcCBpdCBmcm9tIHRoZSBwYXR0ZXJuLlxuICAgICAgLy8gVGhlIHdvcmtpbmcgZGlyZWN0b3J5IHBhdGggbWF5IGluY2x1ZGUgY2hhcmFjdGVycyB0aGF0IGNvbmZsaWN0IHdpdGggZ2xvYlxuICAgICAgLy8gc3ludGF4IChicmFja2V0cywgcGFyZW50aGVzZXMsIGV0Yy4pIGFuZCBjYXVzZSBvdXIgc2VhcmNoZXMgdG8gaW5hZHZlcnRlbnRseSBmYWlsLlxuICAgICAgLy8gV2Ugc2NvcGUgb3VyIHNlYXJjaCB0byB0aGUgd29ya2luZyBkaXJlY3RvcnkgdXNpbmcgdGhlIGBjd2RgIGdsb2JieSBvcHRpb24uXG4gICAgICBpZiAoZ2xvYlBhdHRlcm4uc3RhcnRzV2l0aCh3b3JraW5nRGlyZWN0b3J5UHJlZml4KSkge1xuICAgICAgICByZXR1cm4gZ2xvYlBhdHRlcm4ucmVwbGFjZSh3b3JraW5nRGlyZWN0b3J5UHJlZml4LCBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdsb2JQYXR0ZXJuO1xuICAgIH0pO1xuXG4gIGlmIChvcy5wbGF0Zm9ybSgpID09PSBcIndpbjMyXCIpIHtcbiAgICAvLyBnbG9iYnkgY2FuJ3Qgd29yayB3aXRoIGJhY2t3YXJkcyBzbGFzaGVzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9nbG9iYnkvaXNzdWVzLzE3OVxuICAgIGRlYnVnKFwidXBkYXRpbmcgZ2xvYiBwYXR0ZXJucyB0byBQT1NJWFwiKTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gZ2xvYnMpIHtcbiAgICAgIGNvbnN0IGN1ciA9IGdsb2JzW2ldO1xuXG4gICAgICBpZiAoIWN1cikgdGhyb3cgbmV3IEVycm9yKFwidW5kZWZpbmVkIGdsb2IgcmVjZWl2ZWRcIik7XG5cbiAgICAgIGdsb2JzW2ldID0gdG9Qb3NpeChjdXIpO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgZGVidWcoXCJnbG9iYmluZyBwYXR0ZXJuKHMpOiAlb1wiLCBnbG9icyk7XG4gICAgZGVidWcoXCJ3aXRoaW4gZGlyZWN0b3J5OiAlc1wiLCBwcm9qZWN0Um9vdCk7XG5cbiAgICByZXR1cm4gbWF0Y2hHbG9icyhnbG9icywge1xuICAgICAgb25seUZpbGVzOiB0cnVlLFxuICAgICAgYWJzb2x1dGU6IHRydWUsXG4gICAgICBjd2Q6IHByb2plY3RSb290LFxuICAgICAgLi4uZ2xvYk9wdGlvbnMsXG4gICAgICBpZ25vcmU6IChnbG9iT3B0aW9ucz8uaWdub3JlID8/IFtdKS5jb25jYXQoXCIqKi9ub2RlX21vZHVsZXMvKipcIiksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1ZyhcImVycm9yIGluIGdldEZpbGVzQnlHbG9iICVvXCIsIGUpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5jb25zdCBtYXRjaEdsb2JzID0gYXN5bmMgKGdsb2JzOiBHbG9iUGF0dGVybiwgZ2xvYmJ5T3B0aW9uczogR2xvYmJ5T3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgZ2xvYmJ5KGdsb2JzLCBnbG9iYnlPcHRpb25zKTtcbn07XG5cbmludGVyZmFjZSBNYXRjaGVkU3BlY3Mge1xuICBwcm9qZWN0Um9vdDogc3RyaW5nO1xuICB0ZXN0aW5nVHlwZTogVGVzdGluZ1R5cGU7XG4gIHNwZWNBYnNvbHV0ZVBhdGhzOiBzdHJpbmdbXTtcbiAgc3BlY1BhdHRlcm46IHN0cmluZyB8IHN0cmluZ1tdO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVkU3BlY3Moe1xuICBwcm9qZWN0Um9vdCxcbiAgdGVzdGluZ1R5cGUsXG4gIHNwZWNBYnNvbHV0ZVBhdGhzLFxufTogTWF0Y2hlZFNwZWNzKSB7XG4gIGRlYnVnKFwiZm91bmQgc3BlY3MgJW9cIiwgc3BlY0Fic29sdXRlUGF0aHMpO1xuXG4gIGxldCBjb21tb25Sb290ID0gXCJcIjtcblxuICBpZiAoc3BlY0Fic29sdXRlUGF0aHMubGVuZ3RoID09PSAxKSB7XG4gICAgY29tbW9uUm9vdCA9IHBhdGguZGlybmFtZShzcGVjQWJzb2x1dGVQYXRoc1swXSk7XG4gIH0gZWxzZSB7XG4gICAgY29tbW9uUm9vdCA9IGNvbW1vblBhdGhQcmVmaXgoc3BlY0Fic29sdXRlUGF0aHMpO1xuICB9XG5cbiAgcmV0dXJuIHNwZWNBYnNvbHV0ZVBhdGhzLm1hcCgoYWJzb2x1dGUpID0+XG4gICAgdHJhbnNmb3JtU3BlYyh7XG4gICAgICBwcm9qZWN0Um9vdCxcbiAgICAgIGFic29sdXRlLFxuICAgICAgdGVzdGluZ1R5cGUsXG4gICAgICBjb21tb25Sb290LFxuICAgICAgcGxhdGZvcm06IG9zLnBsYXRmb3JtKCksXG4gICAgICBzZXA6IHBhdGguc2VwLFxuICAgIH0pXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNmb3JtU3BlYyB7XG4gIHByb2plY3RSb290OiBzdHJpbmc7XG4gIGFic29sdXRlOiBzdHJpbmc7XG4gIHRlc3RpbmdUeXBlOiBUZXN0aW5nVHlwZTtcbiAgY29tbW9uUm9vdDogc3RyaW5nO1xuICBwbGF0Zm9ybTogTm9kZUpTLlBsYXRmb3JtO1xuICBzZXA6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlYyh7XG4gIHByb2plY3RSb290LFxuICBhYnNvbHV0ZSxcbiAgdGVzdGluZ1R5cGUsXG4gIGNvbW1vblJvb3QsXG4gIHBsYXRmb3JtLFxuICBzZXAsXG59OiBUcmFuc2Zvcm1TcGVjKSB7XG4gIGlmIChwbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKSB7XG4gICAgYWJzb2x1dGUgPSB0b1Bvc2l4KGFic29sdXRlLCBzZXApO1xuICAgIHByb2plY3RSb290ID0gdG9Qb3NpeChwcm9qZWN0Um9vdCwgc2VwKTtcbiAgfVxuXG4gIGNvbnN0IHJlbGF0aXZlID0gcGF0aC5yZWxhdGl2ZShwcm9qZWN0Um9vdCwgYWJzb2x1dGUpO1xuICBjb25zdCBwYXJzZWRGaWxlID0gcGF0aC5wYXJzZShhYnNvbHV0ZSk7XG4gIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBwYXRoLmV4dG5hbWUoYWJzb2x1dGUpO1xuXG4gIGNvbnN0IHNwZWNGaWxlRXh0ZW5zaW9uID1cbiAgICBbXCIuc3BlY1wiLCBcIi50ZXN0XCIsIFwiLXNwZWNcIiwgXCItdGVzdFwiLCBcIi5jeVwiXVxuICAgICAgLm1hcCgoZXh0KSA9PiBleHQgKyBmaWxlRXh0ZW5zaW9uKVxuICAgICAgLmZpbmQoKGV4dCkgPT4gYWJzb2x1dGUuZW5kc1dpdGgoZXh0KSkgfHwgZmlsZUV4dGVuc2lvbjtcblxuICBjb25zdCBwYXJ0cyA9IGFic29sdXRlLnNwbGl0KHByb2plY3RSb290KTtcbiAgbGV0IG5hbWUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSB8fCBcIlwiO1xuXG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG4gIH1cblxuICBjb25zdCBMRUFESU5HX1NMQVNIID0gL15cXC98L2c7XG4gIGNvbnN0IHJlbGF0aXZlVG9Db21tb25Sb290ID0gYWJzb2x1dGVcbiAgICAucmVwbGFjZShjb21tb25Sb290LCBcIlwiKVxuICAgIC5yZXBsYWNlKExFQURJTkdfU0xBU0gsIFwiXCIpO1xuXG4gIHJldHVybiB7XG4gICAgZmlsZUV4dGVuc2lvbixcbiAgICBiYXNlTmFtZTogcGFyc2VkRmlsZS5iYXNlLFxuICAgIGZpbGVOYW1lOiBwYXJzZWRGaWxlLmJhc2UucmVwbGFjZShzcGVjRmlsZUV4dGVuc2lvbiwgXCJcIiksXG4gICAgc3BlY0ZpbGVFeHRlbnNpb24sXG4gICAgcmVsYXRpdmVUb0NvbW1vblJvb3QsXG4gICAgc3BlY1R5cGU6ICh0ZXN0aW5nVHlwZSA9PT0gXCJjb21wb25lbnRcIlxuICAgICAgPyBcImNvbXBvbmVudFwiXG4gICAgICA6IFwiaW50ZWdyYXRpb25cIikgYXMgU3BlY1R5cGUsXG4gICAgbmFtZSxcbiAgICByZWxhdGl2ZSxcbiAgICBhYnNvbHV0ZSxcbiAgfTtcbn1cbiIsICJpbXBvcnQge1xuICBDdXJyZW50c1J1blBhcmFtZXRlcnMsXG4gIFZhbGlkYXRlZEN1cnJlbnRzUGFyYW1ldGVycyxcbn0gZnJvbSBcImN5cHJlc3MtY2xvdWQvdHlwZXNcIjtcbmltcG9ydCB7IE1lcmdlZENvbmZpZyB9IGZyb20gXCIuLi9jb25maWcvY29uZmlnXCI7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSBcIi4uL2xvZ1wiO1xuaW1wb3J0IHsgZmluZFNwZWNzIH0gZnJvbSBcIi4vc3BlY01hdGNoZXJcIjtcblxuZXhwb3J0IGNvbnN0IGdldFNwZWNGaWxlcyA9IGFzeW5jICh7XG4gIGNvbmZpZyxcbiAgcGFyYW1zLFxufToge1xuICBjb25maWc6IE1lcmdlZENvbmZpZztcbiAgcGFyYW1zOiBWYWxpZGF0ZWRDdXJyZW50c1BhcmFtZXRlcnM7XG59KSA9PiB7XG4gIGNvbnN0IHNwZWNQYXR0ZXJuID0gZ2V0U3BlY1BhdHRlcm4oY29uZmlnLnNwZWNQYXR0ZXJuLCBwYXJhbXMuc3BlYyk7XG4gIC8vIGZpbmQgdGhlIHNwZWMgZmlsZXMgYWNjb3JkaW5nIHRvIHRoZSByZXNvbHZlZCBjb25maWd1cmF0aW9uXG4gIGNvbnN0IHNwZWNzID0gYXdhaXQgZmluZFNwZWNzKHtcbiAgICAvLyBodHRwczovL2RvY3MuY3lwcmVzcy5pby9ndWlkZXMvZ3VpZGVzL2NvbW1hbmQtbGluZSNjeXByZXNzLXJ1bi1zcGVjLWx0LXNwZWMtZ3RcbiAgICBwcm9qZWN0Um9vdDogcGFyYW1zLnByb2plY3QgPz8gY29uZmlnLnByb2plY3RSb290LFxuICAgIHRlc3RpbmdUeXBlOiBwYXJhbXMudGVzdGluZ1R5cGUsXG4gICAgc3BlY1BhdHRlcm4sXG4gICAgY29uZmlnU3BlY1BhdHRlcm46IGNvbmZpZy5zcGVjUGF0dGVybixcbiAgICBleGNsdWRlU3BlY1BhdHRlcm46IGNvbmZpZy5leGNsdWRlU3BlY1BhdHRlcm4sXG4gICAgYWRkaXRpb25hbElnbm9yZVBhdHRlcm46IGNvbmZpZy5hZGRpdGlvbmFsSWdub3JlUGF0dGVybixcbiAgfSk7XG4gIGlmIChzcGVjcy5sZW5ndGggPT09IDApIHtcbiAgICB3YXJuKFxuICAgICAgXCJGb3VuZCBubyBzcGVjIGZpbGVzLiBXYXMgbG9va2luZyBmb3Igc3BlYyBmaWxlcyB0aGF0IG1hdGNoIGJvdGggY29uZmlnU3BlY1BhdHRlcm4gYW5kIHNwZWNQYXR0ZXJuIHJlbGF0aXZlIHRvIHByb2plY3RSb290LiBDb25maWd1cmF0aW9uOiAlT1wiLFxuICAgICAge1xuICAgICAgICBwcm9qZWN0Um9vdDogY29uZmlnLnByb2plY3RSb290LFxuICAgICAgICBzcGVjUGF0dGVybixcbiAgICAgICAgY29uZmlnU3BlY1BhdHRlcm46IGNvbmZpZy5zcGVjUGF0dGVybixcbiAgICAgICAgZXhjbHVkZVNwZWNQYXR0ZXJuOiBbXG4gICAgICAgICAgY29uZmlnLmV4Y2x1ZGVTcGVjUGF0dGVybixcbiAgICAgICAgICBjb25maWcuYWRkaXRpb25hbElnbm9yZVBhdHRlcm4sXG4gICAgICAgIF0uZmxhdCgyKSxcbiAgICAgICAgdGVzdGluZ1R5cGU6IHBhcmFtcy50ZXN0aW5nVHlwZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIHJldHVybiB7IHNwZWNzLCBzcGVjUGF0dGVybiB9O1xufTtcblxuZnVuY3Rpb24gZ2V0U3BlY1BhdHRlcm4oXG4gIGNvbmZpZ1BhdHRlcm46IE1lcmdlZENvbmZpZ1tcInNwZWNQYXR0ZXJuXCJdLFxuICBleHBsaWNpdD86IEN1cnJlbnRzUnVuUGFyYW1ldGVyc1tcInNwZWNcIl1cbikge1xuICByZXR1cm4gZXhwbGljaXQgfHwgY29uZmlnUGF0dGVybjtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxPQUFPOzs7QUNEUCxTQUFTLHFCQUFxQjtBQUV2QixJQUFNQSxXQUFVLGNBQWMsWUFBWSxHQUFHOzs7QUNGcEQsT0FBTyxRQUFRO0FBQ2YsSUFBTSxVQUFVLEdBQUc7QUFHbkIsR0FBRyxRQUFRLFNBQVUsU0FBUyxNQUFNLFNBQVM7QUFFM0MsTUFBSSxRQUFRLE1BQU0sU0FBUyxHQUFHO0FBRTVCLFVBQU1DLFdBQVUsUUFBUSxTQUFTLE1BQU07QUFBQSxNQUNyQyxHQUFHO0FBQUE7QUFBQSxNQUVILE9BQU8sQ0FBQyxRQUFRLFFBQVEsTUFBTTtBQUFBLElBQ2hDLENBQUM7QUFDRCxXQUFPQTtBQUFBLEVBQ1Q7QUFHQSxTQUFPLFFBQVEsU0FBUyxNQUFNLE9BQU87QUFDdkM7OztBQ2xCQSxPQUFPLFdBQVc7QUFDbEIsSUFBTSxRQUFRLE1BQU0sa0JBQWtCO0FBRXRDLElBQU0sU0FBUyxRQUFRLE9BQU87QUFDOUIsSUFBTSxPQUFPLFFBQVE7QUFFZCxJQUFNLFVBQVUsV0FBWTtBQUVqQyxVQUFRLE9BQU8sUUFBUTtBQUN2QixVQUFRLE1BQU07QUFDaEI7QUFJQSxJQUFNLFNBQVMsV0FBWTtBQUN6QixRQUFNLGtCQUFrQjtBQUN4QixNQUFJLE9BQWlCLENBQUM7QUFHdEIsUUFBTSxFQUFFLE1BQU0sSUFBSSxRQUFRO0FBQzFCLFFBQU0sRUFBRSxLQUFBQyxLQUFJLElBQUk7QUFLaEIsTUFBSUEsTUFBSztBQUNQLFlBQVEsTUFBTSxTQUFVLEtBQWE7QUFDbkMsV0FBSyxLQUFLLEdBQUc7QUFJYixhQUFPQSxLQUFJLE1BQU0sTUFBTSxTQUFTO0FBQUEsSUFDbEM7QUFBQSxFQUNGO0FBRUEsVUFBUSxPQUFPLFFBQVEsU0FBVSxLQUFhO0FBQzVDLFNBQUssS0FBSyxHQUFHO0FBSWIsV0FBTyxNQUFNLE1BQU0sTUFBTSxTQUFTO0FBQUEsRUFDcEM7QUFFQSxTQUFPO0FBQUEsSUFDTCxXQUFXO0FBQ1QsYUFBTyxLQUFLLEtBQUssRUFBRTtBQUFBLElBQ3JCO0FBQUEsSUFDQSxNQUFNO0FBQUEsSUFDTjtBQUFBLElBQ0EsT0FBTyxNQUFNO0FBQ1gsWUFBTSwyQkFBMkI7QUFDakMsYUFBTyxDQUFDO0FBQUEsSUFDVjtBQUFBLEVBQ0Y7QUFDRjtBQUVBLElBQUksZ0JBQXdCO0FBQzVCLElBQUksaUJBQW1EO0FBRWhELElBQU0sY0FBYyxNQUFPLGlCQUFpQixPQUFPO0FBRW5ELElBQU0sbUJBQW1CLE1BQU07QUFDcEMsTUFBSSxDQUFDO0FBQWdCLFVBQU0sSUFBSSxNQUFNLHdCQUF3QjtBQUM3RCxrQkFBZ0IsZUFBZSxTQUFTO0FBQ3hDLGlCQUFlLE1BQU07QUFDdkI7QUFDTyxJQUFNLGVBQWUsTUFBTTtBQUNoQyxNQUFJLENBQUM7QUFBZ0IsVUFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBQzdELGlCQUFlLE1BQU07QUFDdkI7QUFFTyxJQUFNLG9CQUFvQixNQUFNO0FBQ3JDLE1BQUksQ0FBQztBQUFnQixVQUFNLElBQUksTUFBTSx3QkFBd0I7QUFDN0QsU0FBTyxlQUFlLFNBQVM7QUFDakM7QUFDTyxJQUFNLG1CQUFtQixNQUFNOzs7QUMzRXRDLFNBQXFCLG9CQUFvQjtBQUVsQyxJQUFNLG1CQUFtQixDQUFDLFFBQTZCO0FBQzVELE1BQUksQ0FBQyxhQUFhLEdBQUcsR0FBRztBQUN0QixXQUFPO0FBQUEsRUFDVDtBQUNBLE1BQUksSUFBSSxTQUFTLGdCQUFnQjtBQUMvQixXQUFPO0FBQUEsRUFDVDtBQUNBLFNBQU8sQ0FBQyxFQUNOLEtBQUssVUFBVSxVQUNmLE9BQU8sSUFBSSxTQUFTLFVBQ3BCLElBQUksU0FBUyxTQUFTO0FBRTFCO0FBRU8sSUFBTSxXQUFXLENBQUMsTUFBYyxDQUFDLEtBQUssS0FBTSxLQUFLLEtBQU0sS0FBSyxHQUFJLEVBQUUsSUFBSSxDQUFDO0FBRTlFLElBQUksVUFBVTtBQUNQLElBQU0sZ0JBQWdCLE1BQU0sV0FBVztBQUN2QyxJQUFNLGdCQUFnQixDQUFDLFFBQzNCLFVBQVUsT0FBTzs7O0FDckJwQixPQUFPLFdBTUE7QUFDUCxPQUFPLGdCQUFnQjtBQUN2QixPQUFPQyxZQUFXO0FBQ2xCLE9BQU9DLFFBQU87QUFDZCxPQUFPLHdCQUF3Qjs7O0FDVnhCLElBQU0sa0JBQU4sY0FBOEIsTUFBTTtBQUFBLEVBQ3pDLFlBQVksU0FBaUI7QUFDM0IsVUFBTSxPQUFPO0FBQ2IsU0FBSyxPQUFPO0FBQUEsRUFDZDtBQUNGOzs7QUNMQSxPQUFPLFdBQVc7QUFDbEIsT0FBTyxVQUFVO0FBRWpCLElBQU0sTUFBTSxJQUFJLFNBQW9CLFFBQVEsSUFBSSxLQUFLLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFFN0QsSUFBTSxPQUFPO0FBRWIsSUFBTSxZQUFZLENBQUMsUUFDeEIsTUFBTSxNQUFNLE1BQU0sU0FBUyxJQUFJLE1BQU07QUFDaEMsSUFBTSxjQUFjLENBQUMsUUFDMUIsTUFBTSxTQUFTLE1BQU0sV0FBVyxJQUFJLE1BQU07QUFFckMsSUFBTSxPQUFPLElBQUksU0FDdEIsSUFBSSxZQUFZLEtBQUssT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0FBS2hDLElBQU0sUUFBUSxJQUFJLFNBQ3ZCLElBQUksVUFBVSxLQUFLLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJO0FBR3JDLElBQU0sUUFBUSxDQUFDLFVBQWlCLFNBQ3JDLEtBQUssU0FBYyxNQUFNLEtBQUssRUFBRSxLQUFLLEtBQUssT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLE1BQVc7QUFFbkUsSUFBTSxVQUFVLE1BQ3JCLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxNQUFNLEdBQUcsRUFBRSxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLElBQUk7QUFFOUQsSUFBTSxTQUFTLENBQUMsSUFBWSxNQUNqQyxRQUFRLElBQUksTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUM7QUFFbkMsSUFBTSxPQUFPLE1BQU07QUFDbkIsSUFBTSxPQUFPLE1BQU07QUFDbkIsSUFBTSxNQUFNLE1BQU07QUFDbEIsSUFBTSxRQUFRLE1BQU07QUFDcEIsSUFBTSxPQUFPLE1BQU07QUFDbkIsSUFBTSxRQUFRLE1BQU07QUFDcEIsSUFBTSxVQUFVLE1BQU07QUFDdEIsSUFBTSxPQUFPLE1BQU07OztBQ3JDMUIsT0FBTyxPQUFPO0FBR1AsU0FBUyxpQkFDZCxLQUNBO0FBQ0EsTUFBSSxDQUFDLElBQUksVUFBVSxRQUFRLENBQUMsSUFBSSxVQUFVLFFBQVE7QUFDaEQ7QUFBQSxFQUNGO0FBRUEsUUFBTSxFQUFFLFNBQVMsT0FBTyxJQUFJLElBQUksU0FBUztBQUV6QyxVQUFRLElBQUksU0FBUyxRQUFRO0FBQUEsSUFDM0IsS0FBSztBQUNILFdBQUssMkJBQTJCO0FBQ2hDO0FBQUEsSUFDRixLQUFLO0FBQ0gsYUFBTyxDQUFDO0FBQ1IsV0FBSyxHQUFHLG1CQUFtQixTQUFTLE1BQU0sQ0FBQztBQUMzQyxhQUFPLENBQUM7QUFDUjtBQUFBLElBQ0Y7QUFDRTtBQUFBLEVBQ0o7QUFDRjtBQUVPLFNBQVMsbUJBQ2QsU0FDQSxRQUNVO0FBQ1YsTUFBSSxDQUFDLEVBQUUsU0FBUyxPQUFPLEdBQUc7QUFDeEIsV0FBTyxDQUFDLHlDQUF5QztBQUFBLEVBQ25EO0FBRUEsTUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixXQUFPLENBQUMsT0FBaUI7QUFBQSxFQUMzQjtBQUNBLFNBQU87QUFBQSxJQUNMO0FBQUEsSUFDQTtBQUFBLEdBQ0QsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sT0FBTyxHQUFHLEVBQUUsS0FBSyxJQUFJO0FBQUE7QUFBQSxFQUUvQztBQUNGOzs7QUg1QkEsSUFBTUMsU0FBUUMsT0FBTSxjQUFjO0FBRWxDLElBQU0sY0FBYztBQUVwQixJQUFJLFVBQWdDO0FBRTdCLFNBQVMsWUFBWTtBQUMxQixNQUFJLFNBQVM7QUFDWCxXQUFPO0FBQUEsRUFDVDtBQUNBLFlBQVUsTUFBTSxPQUFPO0FBQUEsSUFDckIsU0FBUyxjQUFjO0FBQUEsRUFDekIsQ0FBQztBQUVELFVBQVEsYUFBYSxRQUFRLElBQUksQ0FBQyxXQUFXO0FBQzNDLFVBQU0sVUFBa0M7QUFBQSxNQUN0QyxHQUFHLE9BQU87QUFBQTtBQUFBLE1BRVYsNkJBQTZCLE9BQU8sYUFBYSxHQUFHLGNBQWM7QUFBQSxNQUNsRSxxQkFBcUIsbUJBQW1CO0FBQUEsTUFDeEMsaUJBQWlCLG9CQUFvQjtBQUFBLElBQ3ZDO0FBQ0EsUUFBSSxRQUFRO0FBQ1YsY0FBUSxrQkFBa0IsSUFBSTtBQUFBLElBQ2hDO0FBQ0EsUUFBSSxDQUFDLFFBQVEsY0FBYyxHQUFHO0FBQzVCLGNBQVEsY0FBYyxJQUFJO0FBQUEsSUFDNUI7QUFDQSxVQUFNLE1BQU07QUFBQSxNQUNWLEdBQUc7QUFBQSxNQUNIO0FBQUEsSUFDRjtBQUVBLElBQUFELE9BQU0sdUJBQXVCO0FBQUEsTUFDM0IsR0FBR0UsR0FBRSxLQUFLLEtBQUssVUFBVSxPQUFPLFNBQVM7QUFBQSxNQUN6QyxNQUFNLE9BQU8sU0FBUyxJQUFJLElBQUksSUFBSSxXQUFXLElBQUk7QUFBQSxJQUNuRCxDQUFDO0FBQ0QsV0FBTztBQUFBLEVBQ1QsQ0FBQztBQUVELGFBQVcsU0FBUztBQUFBLElBQ2xCLFNBQVM7QUFBQSxJQUNULGdCQUFnQjtBQUFBLElBQ2hCLFlBQVk7QUFBQTtBQUFBLElBRVo7QUFBQSxFQUNGLENBQUM7QUFDRCxTQUFPO0FBQ1Q7QUFFQSxJQUFJLFNBQTZCO0FBQzFCLElBQU0sV0FBVyxDQUFDLFVBQWtCO0FBQ3pDLFdBQVM7QUFDWDtBQUVBLElBQUksa0JBQXNDO0FBQ25DLElBQU0sb0JBQW9CLENBQUMsbUJBQTJCO0FBQzNELG9CQUFrQjtBQUNwQjtBQUVBLElBQUksbUJBQXVDO0FBQ3BDLElBQU0scUJBQXFCLENBQUMsTUFBYztBQUMvQyxxQkFBbUI7QUFDckI7QUFFQSxTQUFTLFFBQ1AsWUFDQSxLQUNBQyxVQUNBO0FBQ0E7QUFBQSxJQUNFO0FBQUEsSUFDQSxJQUFJO0FBQUEsSUFDSixtQkFBbUIsU0FBUyxVQUFVLENBQUM7QUFBQSxJQUN2QztBQUFBLElBQ0E7QUFBQSxFQUNGO0FBQ0Y7QUFFTyxJQUFNLGNBQWMsQ0FDekIsV0FDRztBQUNILFNBQU8sVUFBVSxFQUF1QixNQUFNLEVBQzNDLEtBQUssQ0FBQyxRQUFRO0FBQ2IsSUFBQUgsT0FBTSx3QkFBd0JFLEdBQUUsS0FBSyxLQUFLLFdBQVcsUUFBUSxDQUFDO0FBQzlELFdBQU87QUFBQSxFQUNULENBQUMsRUFDQSxNQUFNLENBQUNFLFdBQVU7QUFDaEIscUJBQWlCQSxNQUFLO0FBQ3RCLFVBQU0sSUFBSSxnQkFBZ0JBLE9BQU0sT0FBTztBQUFBLEVBQ3pDLENBQUM7QUFDTDs7O0FJdkdBLElBQU0sYUFBYUMsU0FBUSxzQkFBc0I7QUFDakQsSUFBTSxNQUFNQSxTQUFRLDRCQUE0QjtBQUtoRCxZQUFZO0FBQ1osa0JBQWtCLFdBQVcsT0FBTztBQUNwQyxtQkFBbUIsSUFBSSxPQUFPOzs7QUNWOUIsT0FBT0MsYUFBVzs7O0FDRmxCLE9BQU9DLFFBQU87QUFNUCxTQUFTLGNBQWMsVUFBMEI7QUFDdEQsT0FBSyw0QkFBNEI7QUFDakMsV0FBUyxJQUFJLENBQUMsTUFBTTtBQUNsQixXQUFPLENBQUM7QUFDUixTQUFLLFFBQVEsS0FBSyxFQUFFLE9BQU8sQ0FBQztBQUM1QixXQUFPLFFBQVFDLEdBQUUsS0FBSyxHQUFHLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3pELFdBQUssWUFBWSxLQUFLLEtBQUs7QUFBQSxJQUM3QixDQUFDO0FBQ0QsV0FBTyxDQUFDO0FBQUEsRUFDVixDQUFDO0FBQ0g7OztBQ0RPLElBQU0sWUFBWSxPQUFPLFlBQThCO0FBQzVELFFBQU0sV0FBVyxNQUFNLFlBQWlEO0FBQUEsSUFDdEUsUUFBUTtBQUFBLElBQ1IsS0FBSztBQUFBLElBQ0wsTUFBTTtBQUFBLEVBQ1IsQ0FBQztBQUVELE9BQUssU0FBUyxLQUFLLFVBQVUsVUFBVSxLQUFLLEdBQUc7QUFDN0Msa0JBQWMsU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUN0QztBQUVBLFNBQU8sU0FBUztBQUNsQjtBQUVPLElBQU0saUJBQWlCLE9BQU87QUFBQSxFQUNuQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQSxVQUFBQztBQUNGLE1BQTZCO0FBQzNCLFFBQU0sV0FBVyxNQUFNLFlBR3JCO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixLQUFLLFFBQVE7QUFBQSxJQUNiLE1BQU07QUFBQSxNQUNKO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFVBQUFBO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUVELFNBQU8sU0FBUztBQUNsQjtBQUVPLElBQU0seUJBQXlCLE9BQU8sU0FBa0M7QUFDN0UsUUFBTSxVQUFVLE1BQU0sWUFHcEI7QUFBQSxJQUNBLFFBQVE7QUFBQSxJQUNSLEtBQUssUUFBUSxLQUFLO0FBQUEsSUFDbEI7QUFBQSxFQUNGLENBQUM7QUFFRCxTQUFPLFFBQVE7QUFDakI7QUFFTyxJQUFNLG1CQUFtQixDQUM5QixZQUNBLFlBRUEsWUFBeUM7QUFBQSxFQUN2QyxRQUFRO0FBQUEsRUFDUixLQUFLLGFBQWE7QUFBQSxFQUNsQixNQUFNO0FBQ1IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFXLE9BQU8sSUFBSTtBQUUxQixJQUFNLHdCQUF3QixDQUNuQyxZQUNBLFlBRUEsWUFBeUU7QUFBQSxFQUN2RSxRQUFRO0FBQUEsRUFDUixLQUFLLGFBQWE7QUFBQSxFQUNsQixNQUFNO0FBQ1IsQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFXLE9BQU8sSUFBSTtBQUUxQixJQUFNLDhCQUE4QixDQUN6QyxZQUNBLFlBRUEsWUFHRTtBQUFBLEVBQ0EsUUFBUTtBQUFBLEVBQ1IsS0FBSyxhQUFhO0FBQUEsRUFDbEIsTUFBTTtBQUNSLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxPQUFPLElBQUk7QUFFMUIsSUFBTSx1QkFBdUIsQ0FBQyxZQUFvQkMsWUFDdkQsWUFBcUM7QUFBQSxFQUNuQyxRQUFRO0FBQUEsRUFDUixLQUFLLGFBQWE7QUFBQSxFQUNsQixNQUFNO0FBQUEsSUFDSixRQUFBQTtBQUFBLEVBQ0Y7QUFDRixDQUFDOzs7QUN6R0gsT0FBTyxhQUFhO0FBRXBCLE9BQU9DLFFBQU87QUFHZCxJQUFNQyxTQUFRLFFBQVEsYUFBYTtBQUVuQyxJQUFNLE9BQU8sQ0FBQyxTQUFpQixXQUFtQztBQUNoRSxTQUFPQyxHQUFFLE1BQU0sTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRSxNQUFNO0FBQ3BEO0FBRUEsSUFBTSxnQkFBZ0IsQ0FBQyxLQUFVLFFBQWdCO0FBQy9DLFNBQU9BLEdBQUUsSUFBSSxLQUFLQSxHQUFFLFVBQVUsR0FBRyxHQUFHLFFBQVEsSUFBSSxHQUFHLENBQUM7QUFDdEQ7QUFFQSxJQUFNLFVBQVUsQ0FBQyxZQUFzQjtBQUNyQyxTQUFPQSxHQUFFLFVBQVUsU0FBUyxlQUFlLENBQUMsQ0FBQztBQUMvQztBQU1BLElBQU0sbUJBQW1CLE1BQU07QUFDN0IsU0FBTyxRQUFRLElBQUksWUFBWSxRQUFRLElBQUk7QUFDN0M7QUFPQSxJQUFNLFlBQVksTUFBTTtBQUN0QixTQUFPLFFBQVEsSUFBSSxZQUFZLFFBQVEsSUFBSTtBQUM3QztBQUVBLElBQU0saUJBQWlCLE1BQU07QUFDM0IsU0FBT0EsR0FBRSxLQUFLLFFBQVEsS0FBSyxDQUFDLEtBQUssUUFBUTtBQUN2QyxXQUFPLGNBQWMsS0FBSyxHQUFHO0FBQUEsRUFDL0IsQ0FBQztBQUNIO0FBRUEsSUFBTSxXQUFXLE1BQU07QUFDckIsU0FBTyxRQUFRLElBQUk7QUFDckI7QUFFQSxJQUFNLGtCQUFrQixNQUFNO0FBQzVCLFNBQ0UsUUFBUSxJQUFJLFdBQ1osUUFBUSxJQUFJLFlBQVksY0FDeEIsUUFBUSxJQUFJO0FBRWhCO0FBRUEsSUFBTSxnQkFBZ0IsTUFBTTtBQUMxQixTQUNFLFFBQVEsSUFBSSxXQUNaLFFBQVEsSUFBSSxZQUFZLGNBQ3hCLENBQUMsUUFBUSxJQUFJO0FBRWpCO0FBRUEsSUFBTSxjQUFjLE1BQU07QUFDeEIsU0FBT0EsR0FBRSxLQUFLLFFBQVEsS0FBSyxDQUFDLEtBQUssUUFBUTtBQUN2QyxXQUFPLGNBQWMsS0FBSyxHQUFHO0FBQUEsRUFDL0IsQ0FBQztBQUNIO0FBRUEsSUFBTSxXQUFXLE1BQU07QUFDckIsU0FDRSxRQUFRLElBQUksYUFDWCxRQUFRLElBQUksa0JBQWtCLFVBQVUsS0FBSyxRQUFRLElBQUksY0FBYztBQUU1RTtBQUVBLElBQU0sZ0JBQWdCLE1BQU07QUFJMUIsU0FDRSxRQUFRLElBQUksZUFDWixRQUFRLElBQUksa0JBQ1osUUFBUSxJQUFJO0FBRWhCO0FBRUEsSUFBTSxZQUFZLE1BQU07QUFDdEIsU0FDRSxRQUFRLElBQUksZUFDWixRQUFRLElBQUksZ0JBQ1osUUFBUSxJQUFJLG1CQUNaLFFBQVEsSUFBSSxjQUNaLFFBQVEsSUFBSTtBQUVoQjtBQUVBLElBQU0sWUFBWSxNQUFNO0FBQ3RCLFNBQU8sUUFBUSxJQUFJLFdBQVcsUUFBUSxJQUFJO0FBQzVDO0FBVUEsSUFBTSxlQUFlO0FBQUEsRUFDbkIsVUFBVTtBQUFBLEVBQ1YsT0FBTztBQUFBLEVBQ1AsY0FBYztBQUFBLEVBQ2QsUUFBUTtBQUFBLEVBQ1IsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLEVBQ1IsZUFBZTtBQUFBLEVBQ2YsYUFBYTtBQUFBLEVBQ2IsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsT0FBTztBQUFBLEVBQ1AsZUFBZTtBQUFBLEVBQ2YsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLEVBQ04sYUFBYTtBQUFBLEVBQ2IsU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsVUFBVTtBQUFBLEVBQ1YsZ0JBQWdCO0FBQUEsRUFDaEIsUUFBUTtBQUFBLEVBQ1IsU0FBUztBQUFBLEVBQ1QsU0FBUztBQUFBLEVBQ1QsU0FBUztBQUNYO0FBRUEsU0FBUyxzQkFBMEM7QUFDakQsUUFBTSxFQUFFLElBQUksSUFBSTtBQUloQixTQUFPQSxHQUFFLFFBQVEsY0FBYyxDQUFDLFVBQVU7QUFDeEMsUUFBSUEsR0FBRSxTQUFTLEtBQUssR0FBRztBQUNyQixhQUFPLElBQUksS0FBSztBQUFBLElBQ2xCO0FBRUEsUUFBSUEsR0FBRSxXQUFXLEtBQUssR0FBRztBQUN2QixhQUFPLE1BQU07QUFBQSxJQUNmO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFJQSxJQUFNLG9CQUFvQixNQUEyQjtBQUNuRCxTQUFPO0FBQUEsSUFDTCxVQUFVLFFBQVE7QUFBQSxNQUNoQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsT0FBTyxRQUFRO0FBQUEsTUFDYjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsY0FBYyxRQUFRO0FBQUEsTUFDcEI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxRQUFRLFFBQVE7QUFBQSxNQUNkO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxXQUFXLFFBQVE7QUFBQSxNQUNqQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BRUE7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsV0FBVyxRQUFRO0FBQUEsTUFDakI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsUUFBUSxRQUFRO0FBQUEsTUFDZDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGLENBQUM7QUFBQSxJQUNELGVBQWUsUUFBUTtBQUFBLE1BQ3JCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGLENBQUM7QUFBQTtBQUFBO0FBQUEsSUFHRCxhQUFhLFFBQVEsQ0FBQyxlQUFlLGdCQUFnQixlQUFlLENBQUM7QUFBQTtBQUFBLElBRXJFLFdBQVcsUUFBUTtBQUFBLE1BQ2pCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGLENBQUM7QUFBQTtBQUFBLElBRUQsV0FBVyxRQUFRO0FBQUEsTUFDakI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFFQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsT0FBTyxRQUFRO0FBQUEsTUFDYjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBO0FBQUEsSUFFRCxlQUFlLFFBQVE7QUFBQSxNQUNyQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRixDQUFDO0FBQUE7QUFBQSxJQUVELFFBQVEsUUFBUTtBQUFBO0FBQUEsTUFFZDtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BRUE7QUFBQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFFQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUVGLENBQUM7QUFBQTtBQUFBLElBRUQsTUFBTSxRQUFRO0FBQUEsTUFDWjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsYUFBYSxRQUFRO0FBQUE7QUFBQSxNQUVuQjtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BRUE7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUVGLENBQUM7QUFBQSxJQUNELFNBQVMsUUFBUSxDQUFDLFlBQVksYUFBYSxnQkFBZ0IsYUFBYSxDQUFDO0FBQUE7QUFBQTtBQUFBLElBR3pFLFdBQVcsUUFBUTtBQUFBLE1BQ2pCO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBO0FBQUEsSUFDRixDQUFDO0FBQUE7QUFBQSxJQUVELFdBQVcsUUFBUTtBQUFBO0FBQUEsTUFFakI7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQTtBQUFBO0FBQUEsTUFFQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUEsTUFDQTtBQUFBO0FBQUE7QUFBQSxNQUVBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxNQUNBO0FBQUE7QUFBQSxJQUNGLENBQUM7QUFBQSxJQUNELFVBQVU7QUFBQSxJQUNWLGdCQUFnQixRQUFRO0FBQUEsTUFDdEI7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0YsQ0FBQztBQUFBLElBQ0QsUUFBUSxRQUFRO0FBQUEsTUFDZDtBQUFBLE1B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QUksQ0FBQyxTQUFTLEtBQUssUUFBUTtBQUFBLElBQ3hDLFFBQVEsTUFBTSxXQUFXLE9BQU8sV0FBVztBQUFBLElBQzNDO0FBQUEsSUFDQSxVQUFBRDtBQUFBLElBQ0EsVUFBVSxZQUFZO0FBQUEsSUFDdEI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0EsYUFBYSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUM7QUFBQSxJQUNqQyxNQUFNO0FBQUEsSUFDTjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRixDQUFDO0FBRUQsT0FBSyxzQkFBZSxLQUFLQyxLQUFJLE1BQU0sQ0FBQztBQUVwQyxXQUFTQSxLQUFJLEtBQUs7QUFFbEIsbUJBQWlCO0FBRWpCLFFBQU07QUFBQSxJQUNKO0FBQUEsTUFDRSxPQUFPQSxLQUFJO0FBQUEsTUFDWCxTQUFTQSxLQUFJO0FBQUEsTUFDYixXQUFXQSxLQUFJO0FBQUEsTUFDZixVQUFBRDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUFBLElBQ0E7QUFBQSxFQUNGO0FBRUEsVUFBUTtBQUVSLFFBQU0sUUFBUSxXQUFXLFdBQVc7QUFDcEMsUUFBTSxXQUFXLHFCQUFxQixPQUFPLE9BQU8sT0FBTyxHQUFHLE1BQU07QUFFcEUsUUFBTSxTQUFTLG9CQUFvQjtBQUNuQyxVQUFRLElBQUksYUFBYSxRQUFRLENBQUM7QUFDbEMsT0FBSywyQkFBb0IsS0FBS0MsS0FBSSxNQUFNLENBQUM7QUFFekMsU0FBTztBQUNQLE1BQUksU0FBUyxXQUFXLFlBQVk7QUFDbEMsV0FBTztBQUFBLE1BQ0wsR0FBRztBQUFBLE1BQ0gsUUFBUUEsS0FBSTtBQUFBLElBQ2Q7QUFBQSxFQUNGO0FBQ0EsU0FBTztBQUNUOzs7QVZqSE8sU0FBU0MsS0FBSSxRQUF5QjtBQUMzQyxTQUFPLElBQVksTUFBTTtBQUMzQjsiLAogICJuYW1lcyI6IFsicmVxdWlyZSIsICJwcm9jZXNzIiwgImxvZyIsICJEZWJ1ZyIsICJfIiwgImRlYnVnIiwgIkRlYnVnIiwgIl8iLCAiX2NvbmZpZyIsICJlcnJvciIsICJyZXF1aXJlIiwgIkRlYnVnIiwgIl8iLCAiXyIsICJwbGF0Zm9ybSIsICJzdGRvdXQiLCAiXyIsICJkZWJ1ZyIsICJfIiwgIl8iLCAiZGVidWciLCAiRGVidWciLCAicGF0aCIsICJEZWJ1ZyIsICJwYXRoIiwgIkRlYnVnIiwgIl8iLCAiZGVidWciLCAiRGVidWciLCAiXyIsICJkZWJ1ZyIsICJEZWJ1ZyIsICJyZXF1aXJlIiwgInN0ZG91dCIsICJmaWxlIiwgImRlYnVnIiwgIkRlYnVnIiwgInBhdGgiLCAicmVxdWlyZSIsICJEZWJ1ZyIsICJfIiwgImRlYnVnIiwgIkRlYnVnIiwgIl8iLCAiRGVidWciLCAiXyIsICJkZWJ1ZyIsICJEZWJ1ZyIsICJfIiwgImVycm9yIiwgIkRlYnVnIiwgImRlYnVnIiwgIkRlYnVnIiwgIkRlYnVnIiwgImRlYnVnIiwgIkRlYnVnIiwgIl8iLCAiZGVidWciLCAiZXJyb3IiLCAicnVuIiwgIl8iLCAiXyIsICJyIiwgIkRlYnVnIiwgIkRlYnVnIiwgIkRlYnVnIiwgImZzIiwgImZzIiwgImRlYnVnIiwgIkRlYnVnIiwgImZpbGUiLCAiZGVidWciLCAiRGVidWciLCAiZGVidWciLCAiRGVidWciLCAicnVuIiwgInN0ZG91dCIsICJEZWJ1ZyIsICJkZWJ1ZyIsICJEZWJ1ZyIsICJwbGF0Zm9ybSIsICJlcnJvciIsICJEZWJ1ZyIsICJwYXRoIiwgIl8iLCAiZGVidWciLCAiRGVidWciLCAiXyIsICJwYXRoIiwgInBsYXRmb3JtIiwgImRlYnVnIiwgIkRlYnVnIiwgInBsYXRmb3JtIiwgInJ1biIsICJydW4iXQp9Cg==